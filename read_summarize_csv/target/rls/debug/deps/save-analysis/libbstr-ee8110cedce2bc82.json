{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13","program":"C:\\Users\\rajesh\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","bstr","C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"lazy_static\"","--cfg","feature=\"regex-automata\"","--cfg","feature=\"serde\"","--cfg","feature=\"serde1\"","--cfg","feature=\"serde1-nostd\"","--cfg","feature=\"std\"","--cfg","feature=\"unicode\"","-C","metadata=ee8110cedce2bc82","-C","extra-filename=-ee8110cedce2bc82","--out-dir","c:\\Users\\rajesh\\Documents\\learning-rust\\read_summarize_csv\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\rajesh\\Documents\\learning-rust\\read_summarize_csv\\target\\rls\\debug\\deps","--extern","lazy_static=c:\\Users\\rajesh\\Documents\\learning-rust\\read_summarize_csv\\target\\rls\\debug\\deps\\liblazy_static-56b6aabaf637ca44.rmeta","--extern","memchr=c:\\Users\\rajesh\\Documents\\learning-rust\\read_summarize_csv\\target\\rls\\debug\\deps\\libmemchr-74df00908a1092b9.rmeta","--extern","regex_automata=c:\\Users\\rajesh\\Documents\\learning-rust\\read_summarize_csv\\target\\rls\\debug\\deps\\libregex_automata-5222128a1d4d2f13.rmeta","--extern","serde=c:\\Users\\rajesh\\Documents\\learning-rust\\read_summarize_csv\\target\\rls\\debug\\deps\\libserde-954a81de27e34c57.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\rajesh\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\rajesh\\Documents\\learning-rust\\read_summarize_csv\\target\\rls\\debug\\deps\\libbstr-ee8110cedce2bc82.rmeta"},"prelude":{"crate_id":{"name":"bstr","disambiguator":[12145689572115874257,8210010724480140270]},"crate_root":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src","external_crates":[{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[1138901771483454819,11003170576773438909]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[18042673982934947978,12625110394568559395]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7915187584390589076,11757046858262610570]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1324407439594145559,13485846882990707907]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5472063530736701744,15684119416300850850]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[15928654522864722753,13940456153253720493]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2115844197184658475,17213399006929258361]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17858385294348524431,14379613082909334050]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[12438328707936444580,15033277576925399367]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[11636031226151264141,9281530129774440609]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[13700207992002620781,3077286340393397208]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2247473288530920572,9582585870634080627]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[11977870442040858031,13845820576887411767]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":14,"id":{"name":"lazy_static","disambiguator":[7456355247836627294,3230456006714180493]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":15,"id":{"name":"memchr","disambiguator":[16172905582954787237,17492191039393381522]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":16,"id":{"name":"regex_automata","disambiguator":[9931210620430180936,6639495573536296151]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":17,"id":{"name":"byteorder","disambiguator":[11610964632004945481,16383394113034807985]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","num":18,"id":{"name":"serde","disambiguator":[13057006417804634453,11316919445711346691]}}],"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":0,"byte_end":20276,"line_start":1,"line_end":456,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1032},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18560,"byte_end":18564,"line_start":389,"line_end":389,"column_start":15,"column_end":19},"alias_span":null,"name":"BStr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1037},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18607,"byte_end":18614,"line_start":391,"line_end":391,"column_start":18,"column_end":25},"alias_span":null,"name":"BString","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18641,"byte_end":18650,"line_start":393,"line_end":393,"column_start":5,"column_end":14},"alias_span":null,"name":"ByteSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18652,"byte_end":18657,"line_start":393,"line_end":393,"column_start":16,"column_end":21},"alias_span":null,"name":"Bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1109},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18659,"byte_end":18665,"line_start":393,"line_end":393,"column_start":23,"column_end":29},"alias_span":null,"name":"Fields","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1115},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18667,"byte_end":18677,"line_start":393,"line_end":393,"column_start":31,"column_end":41},"alias_span":null,"name":"FieldsWith","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1082},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18679,"byte_end":18683,"line_start":393,"line_end":393,"column_start":43,"column_end":47},"alias_span":null,"name":"Find","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1091},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18685,"byte_end":18696,"line_start":393,"line_end":393,"column_start":49,"column_end":60},"alias_span":null,"name":"FindReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1064},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18698,"byte_end":18704,"line_start":393,"line_end":393,"column_start":62,"column_end":68},"alias_span":null,"name":"Finder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1073},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18710,"byte_end":18723,"line_start":394,"line_end":394,"column_start":5,"column_end":18},"alias_span":null,"name":"FinderReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18725,"byte_end":18730,"line_start":394,"line_end":394,"column_start":20,"column_end":25},"alias_span":null,"name":"Lines","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18732,"byte_end":18751,"line_start":394,"line_end":394,"column_start":27,"column_end":46},"alias_span":null,"name":"LinesWithTerminator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18753,"byte_end":18758,"line_start":394,"line_end":394,"column_start":48,"column_end":53},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1141},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18760,"byte_end":18766,"line_start":394,"line_end":394,"column_start":55,"column_end":61},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1149},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18768,"byte_end":18781,"line_start":394,"line_end":394,"column_start":63,"column_end":76},"alias_span":null,"name":"SplitNReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18787,"byte_end":18799,"line_start":395,"line_end":395,"column_start":5,"column_end":17},"alias_span":null,"name":"SplitReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18801,"byte_end":18802,"line_start":395,"line_end":395,"column_start":19,"column_end":20},"alias_span":null,"name":"B","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18849,"byte_end":18855,"line_start":398,"line_end":398,"column_start":19,"column_end":25},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18857,"byte_end":18861,"line_start":398,"line_end":398,"column_start":27,"column_end":31},"alias_span":null,"name":"join","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18863,"byte_end":18870,"line_start":398,"line_end":398,"column_start":33,"column_end":40},"alias_span":null,"name":"ByteVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1157},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18872,"byte_end":18882,"line_start":398,"line_end":398,"column_start":42,"column_end":52},"alias_span":null,"name":"DrainBytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1163},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18884,"byte_end":18897,"line_start":398,"line_end":398,"column_start":54,"column_end":67},"alias_span":null,"name":"FromUtf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1681},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18951,"byte_end":18966,"line_start":401,"line_end":401,"column_start":5,"column_end":20},"alias_span":null,"name":"GraphemeIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1672},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18968,"byte_end":18977,"line_start":401,"line_end":401,"column_start":22,"column_end":31},"alias_span":null,"name":"Graphemes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18979,"byte_end":18994,"line_start":401,"line_end":401,"column_start":33,"column_end":48},"alias_span":null,"name":"SentenceIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1692},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18996,"byte_end":19005,"line_start":401,"line_end":401,"column_start":50,"column_end":59},"alias_span":null,"name":"Sentences","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1721},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19007,"byte_end":19018,"line_start":401,"line_end":401,"column_start":61,"column_end":72},"alias_span":null,"name":"WordIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1711},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19024,"byte_end":19029,"line_start":402,"line_end":402,"column_start":5,"column_end":10},"alias_span":null,"name":"Words","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1740},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19031,"byte_end":19052,"line_start":402,"line_end":402,"column_start":12,"column_end":33},"alias_span":null,"name":"WordsWithBreakIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1731},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19054,"byte_end":19069,"line_start":402,"line_end":402,"column_start":35,"column_end":50},"alias_span":null,"name":"WordsWithBreaks","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1022},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19094,"byte_end":19100,"line_start":405,"line_end":405,"column_start":5,"column_end":11},"alias_span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19104,"byte_end":19115,"line_start":405,"line_end":405,"column_start":15,"column_end":26},"name":"decode_utf8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19117,"byte_end":19128,"line_start":405,"line_end":405,"column_start":28,"column_end":39},"alias_span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19132,"byte_end":19148,"line_start":405,"line_end":405,"column_start":43,"column_end":59},"name":"decode_last_utf8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1759},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19150,"byte_end":19161,"line_start":405,"line_end":405,"column_start":61,"column_end":72},"alias_span":null,"name":"CharIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1750},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19167,"byte_end":19172,"line_start":406,"line_end":406,"column_start":5,"column_end":10},"alias_span":null,"name":"Chars","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19174,"byte_end":19183,"line_start":406,"line_end":406,"column_start":12,"column_end":21},"alias_span":null,"name":"Utf8Chunk","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1770},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19185,"byte_end":19195,"line_start":406,"line_end":406,"column_start":23,"column_end":33},"alias_span":null,"name":"Utf8Chunks","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1779},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19197,"byte_end":19206,"line_start":406,"line_end":406,"column_start":35,"column_end":44},"alias_span":null,"name":"Utf8Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":0,"byte_end":20276,"line_start":1,"line_end":456,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":26},{"krate":0,"index":32},{"krate":0,"index":41},{"krate":0,"index":49},{"krate":0,"index":61},{"krate":0,"index":71},{"krate":0,"index":77},{"krate":0,"index":120},{"krate":0,"index":138},{"krate":0,"index":413},{"krate":0,"index":506},{"krate":0,"index":738},{"krate":0,"index":769},{"krate":0,"index":830},{"krate":0,"index":958}],"decl_id":null,"docs":"An experimental byte string library.","sig":null,"attributes":[{"value":"!\nAn experimental byte string library.\n\nByte strings are just like standard Unicode strings with one very important\ndifference: byte strings are only *conventionally* UTF-8 while Rust's standard\nUnicode strings are *guaranteed* to be valid UTF-8. The primary motivation for\nbyte strings is for handling arbitrary bytes that are mostly UTF-8.\n\n# Overview\n\nThis crate provides two important traits that provide string oriented methods\non `&[u8]` and `Vec<u8>` types:\n\n* [`ByteSlice`](trait.ByteSlice.html) extends the `[u8]` type with additional\n  string oriented methods.\n* [`ByteVec`](trait.ByteVec.html) extends the `Vec<u8>` type with additional\n  string oriented methods.\n\nAdditionally, this crate provides two concrete byte string types that deref to\n`[u8]` and `Vec<u8>`. These are useful for storing byte string types, and come\nwith convenient `std::fmt::Debug` implementations:\n\n* [`BStr`](struct.BStr.html) is a byte string slice, analogous to `str`.\n* [`BString`](struct.BString.html) is an owned growable byte string buffer,\n  analogous to `String`.\n\nAdditionally, the free function [`B`](fn.B.html) serves as a convenient short\nhand for writing byte string literals.\n\n# Quick examples\n\nByte strings build on the existing APIs for `Vec<u8>` and `&[u8]`, with\nadditional string oriented methods. Operations such as iterating over\ngraphemes, searching for substrings, replacing substrings, trimming and case\nconversion are examples of things not provided on the standard library `&[u8]`\nAPIs but are provided by this crate. For example, this code iterates over all\nof occurrences of a subtring:\n\n```\nuse bstr::ByteSlice;\n\nlet s = b\"foo bar foo foo quux foo\";\n\nlet mut matches = vec![];\nfor start in s.find_iter(\"foo\") {\n    matches.push(start);\n}\nassert_eq!(matches, [0, 8, 12, 21]);\n```\n\nHere's another example showing how to do a search and replace (and also showing\nuse of the `B` function):\n\n```\nuse bstr::{B, ByteSlice};\n\nlet old = B(\"foo ☃☃☃ foo foo quux foo\");\nlet new = old.replace(\"foo\", \"hello\");\nassert_eq!(new, B(\"hello ☃☃☃ hello hello quux hello\"));\n```\n\nAnd here's an example that shows case conversion, even in the presence of\ninvalid UTF-8:\n\n```\nuse bstr::{ByteSlice, ByteVec};\n\nlet mut lower = Vec::from(\"hello β\");\nlower[0] = b'\\xFF';\n// lowercase β is uppercased to Β\nassert_eq!(lower.to_uppercase(), b\"\\xFFELLO \\xCE\\x92\");\n```\n\n# Convenient debug representation\n\nWhen working with byte strings, it is often useful to be able to print them\nas if they were byte strings and not sequences of integers. While this crate\ncannot affect the `std::fmt::Debug` implementations for `[u8]` and `Vec<u8>`,\nthis crate does provide the `BStr` and `BString` types which have convenient\n`std::fmt::Debug` implementations.\n\nFor example, this\n\n```\nuse bstr::ByteSlice;\n\nlet mut bytes = Vec::from(\"hello β\");\nbytes[0] = b'\\xFF';\n\nprintln!(\"{:?}\", bytes.as_bstr());\n```\n\nwill output `\"\\xFFello β\"`.\n\nThis example works because the\n[`ByteSlice::as_bstr`](trait.ByteSlice.html#method.as_bstr)\nmethod converts any `&[u8]` to a `&BStr`.\n\n# When should I use byte strings?\n\nThis library is somewhat of an experiment that reflects my hypothesis that\nUTF-8 by convention is a better trade off in some circumstances than guaranteed\nUTF-8. It's possible, perhaps even likely, that this is a niche concern for\nfolks working closely with core text primitives.\n\nThe first time this idea hit me was in the implementation of Rust's regex\nengine. In particular, very little of the internal implementation cares at all\nabout searching valid UTF-8 encoded strings. Indeed, internally, the\nimplementation converts `&str` from the API to `&[u8]` fairly quickly and\njust deals with raw bytes. UTF-8 match boundaries are then guaranteed by the\nfinite state machine itself rather than any specific string type. This makes it\npossible to not only run regexes on `&str` values, but also on `&[u8]` values.\n\nWhy would you ever want to run a regex on a `&[u8]` though? Well, `&[u8]` is\nthe fundamental way at which one reads data from all sorts of streams, via the\nstandard library's [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html)\ntrait. In particular, there is no platform independent way to determine whether\nwhat you're reading from is some binary file or a human readable text file.\nTherefore, if you're writing a program to search files, you probably need to\ndeal with `&[u8]` directly unless you're okay with first converting it to a\n`&str` and dropping any bytes that aren't valid UTF-8. (Or otherwise determine\nthe encoding---which is often impractical---and perform a transcoding step.)\nOften, the simplest and most robust way to approach this is to simply treat the\ncontents of a file as if it were mostly valid UTF-8 and pass through invalid\nUTF-8 untouched. This may not be the most correct approach though!\n\nOne case in particular exacerbates these issues, and that's memory mapping\na file. When you memory map a file, that file may be gigabytes big, but all\nyou get is a `&[u8]`. Converting that to a `&str` all in one go is generally\nnot a good idea because of the costs associated with doing so, and also\nbecause it generally causes one to do two passes over the data instead of\none, which is quite undesirable. It is of course usually possible to do it an\nincremental way by only parsing chunks at a time, but this is often complex to\ndo or impractical. For example, many regex engines only accept one contiguous\nsequence of bytes at a time with no way to perform incremental matching.\n\nIn summary, the conventional UTF-8 byte strings provided by this library is an\nexperiment. They are definitely useful in some limited circumstances, but how\nuseful they are more broadly isn't clear yet.\n\n# `bstr` in public APIs\n\nSince this library is still experimental, you should not use it in the public\nAPI of your crates until it hits `1.0` (unless you're OK with with tracking\nbreaking releases of `bstr`).\n\nIn general, it should be possible to avoid putting anything in this crate into\nyour public APIs. Namely, you should never need to use the `ByteSlice` or\n`ByteVec` traits as bounds on public APIs, since their only purpose is to\nextend the methods on the concrete types `[u8]` and `Vec<u8>`, respectively.\nSimilarly, it should not be necessary to put either the `BStr` or `BString`\ntypes into public APIs. If you want to use them internally, then they can\nbe converted to/from `[u8]`/`Vec<u8>` as needed.\n\n# Differences with standard strings\n\nThe primary difference between `[u8]` and `str` is that the former is\nconventionally UTF-8 while the latter is guaranteed to be UTF-8. The phrase\n\"conventionally UTF-8\" means that a `[u8]` may contain bytes that do not form\na valid UTF-8 sequence, but operations defined on the type in this crate are\ngenerally most useful on valid UTF-8 sequences. For example, iterating over\nUnicode codepoints or grapheme clusters is an operation that is only defined\non valid UTF-8. Therefore, when invalid UTF-8 is encountered, the Unicode\nreplacement codepoint is substituted. Thus, a byte string that is not UTF-8 at\nall is of limited utility when using these crate.\n\nHowever, not all operations on byte strings are specifically Unicode aware. For\nexample, substring search has no specific Unicode semantics ascribed to it. It\nworks just as well for byte strings that are completely valid UTF-8 as for byte\nstrings that contain no valid UTF-8 at all. Similarly for replacements and\nvarious other operations that do not need any Unicode specific tailoring.\n\nAside from the difference in how UTF-8 is handled, the APIs between `[u8]` and\n`str` (and `Vec<u8>` and `String`) are intentionally very similar, including\nmaintaining the same behavior for corner cases in things like substring\nsplitting. There are, however, some differences:\n\n* Substring search is not done with `matches`, but instead, `find_iter`.\n  In general, this crate does not define any generic\n  [`Pattern`](https://doc.rust-lang.org/std/str/pattern/trait.Pattern.html)\n  infrastructure, and instead prefers adding new methods for different\n  argument types. For example, `matches` can search by a `char` or a `&str`,\n  where as `find_iter` can only search by a byte string. `find_char` can be\n  used for searching by a `char`.\n* Since `SliceConcatExt` in the standard library is unstable, it is not\n  possible to reuse that to implement `join` and `concat` methods. Instead,\n  [`join`](fn.join.html) and [`concat`](fn.concat.html) are provided as free\n  functions that perform a similar task.\n* This library bundles in a few more Unicode operations, such as grapheme,\n  word and sentence iterators. More operations, such as normalization and\n  case folding, may be provided in the future.\n* Some `String`/`str` APIs will panic if a particular index was not on a valid\n  UTF-8 code unit sequence boundary. Conversely, no such checking is performed\n  in this crate, as is consistent with treating byte strings as a sequence of\n  bytes. This means callers are responsible for maintaining a UTF-8 invariant\n  if that's important.\n* Some routines provided by this crate, such as `starts_with_str`, have a\n  `_str` suffix to differentiate them from similar routines already defined\n  on the `[u8]` type. The difference is that `starts_with` requires its\n  parameter to be a `&[u8]`, where as `starts_with_str` permits its parameter\n  to by anything that implements `AsRef<[u8]>`, which is more flexible. This\n  means you can write `bytes.starts_with_str(\"☃\")` instead of\n  `bytes.starts_with(\"☃\".as_bytes())`.\n\nOtherwise, you should find most of the APIs between this crate and the standard\nlibrary string APIs to be very similar, if not identical.\n\n# Handling of invalid UTF-8\n\nSince byte strings are only *conventionally* UTF-8, there is no guarantee\nthat byte strings contain valid UTF-8. Indeed, it is perfectly legal for a\nbyte string to contain arbitrary bytes. However, since this library defines\na *string* type, it provides many operations specified by Unicode. These\noperations are typically only defined over codepoints, and thus have no real\nmeaning on bytes that are invalid UTF-8 because they do not map to a particular\ncodepoint.\n\nFor this reason, whenever operations defined only on codepoints are used, this\nlibrary will automatically convert invalid UTF-8 to the Unicode replacement\ncodepoint, `U+FFFD`, which looks like this: `�`. For example, an\n[iterator over codepoints](struct.Chars.html) will yield a Unicode\nreplacement codepoint whenever it comes across bytes that are not valid UTF-8:\n\n```\nuse bstr::ByteSlice;\n\nlet bs = b\"a\\xFF\\xFFz\";\nlet chars: Vec<char> = bs.chars().collect();\nassert_eq!(vec!['a', '\\u{FFFD}', '\\u{FFFD}', 'z'], chars);\n```\n\nThere are a few ways in which invalid bytes can be substituted with a Unicode\nreplacement codepoint. One way, not used by this crate, is to replace every\nindividual invalid byte with a single replacement codepoint. In contrast, the\napproach this crate uses is called the \"substitution of maximal subparts,\" as\nspecified by the Unicode Standard (Chapter 3, Section 9). (This approach is\nalso used by [W3C's Encoding Standard](https://www.w3.org/TR/encoding/).) In\nthis strategy, a replacement codepoint is inserted whenever a byte is found\nthat cannot possibly lead to a valid UTF-8 code unit sequence. If there were\nprevious bytes that represented a *prefix* of a well-formed UTF-8 code unit\nsequence, then all of those bytes (up to 3) are substituted with a single\nreplacement codepoint. For example:\n\n```\nuse bstr::ByteSlice;\n\nlet bs = b\"a\\xF0\\x9F\\x87z\";\nlet chars: Vec<char> = bs.chars().collect();\n// The bytes \\xF0\\x9F\\x87 could lead to a valid UTF-8 sequence, but 3 of them\n// on their own are invalid. Only one replacement codepoint is substituted,\n// which demonstrates the \"substitution of maximal subparts\" strategy.\nassert_eq!(vec!['a', '\\u{FFFD}', 'z'], chars);\n```\n\nIf you do need to access the raw bytes for some reason in an iterator like\n`Chars`, then you should use the iterator's \"indices\" variant, which gives\nthe byte offsets containing the invalid UTF-8 bytes that were substituted with\nthe replacement codepoint. For example:\n\n```\nuse bstr::{B, ByteSlice};\n\nlet bs = b\"a\\xE2\\x98z\";\nlet chars: Vec<(usize, usize, char)> = bs.char_indices().collect();\n// Even though the replacement codepoint is encoded as 3 bytes itself, the\n// byte range given here is only two bytes, corresponding to the original\n// raw bytes.\nassert_eq!(vec![(0, 1, 'a'), (1, 3, '\\u{FFFD}'), (3, 4, 'z')], chars);\n\n// Thus, getting the original raw bytes is as simple as slicing the original\n// byte string:\nlet chars: Vec<&[u8]> = bs.char_indices().map(|(s, e, _)| &bs[s..e]).collect();\nassert_eq!(vec![B(\"a\"), B(b\"\\xE2\\x98\"), B(\"z\")], chars);\n```\n\n# File paths and OS strings\n\nOne of the premiere features of Rust's standard library is how it handles file\npaths. In particular, it makes it very hard to write incorrect code while\nsimultaneously providing a correct cross platform abstraction for manipulating\nfile paths. The key challenge that one faces with file paths across platforms\nis derived from the following observations:\n\n* On most Unix-like systems, file paths are an arbitrary sequence of bytes.\n* On Windows, file paths are an arbitrary sequence of 16-bit integers.\n\n(In both cases, certain sequences aren't allowed. For example a `NUL` byte is\nnot allowed in either case. But we can ignore this for the purposes of this\nsection.)\n\nByte strings, like the ones provided in this crate, line up really well with\nfile paths on Unix like systems, which are themselves just arbitrary sequences\nof bytes. It turns out that if you treat them as \"mostly UTF-8,\" then things\nwork out pretty well. On the contrary, byte strings _don't_ really work\nthat well on Windows because it's not possible to correctly roundtrip file\npaths between 16-bit integers and something that looks like UTF-8 _without_\nexplicitly defining an encoding to do this for you, which is anathema to byte\nstrings, which are just bytes.\n\nRust's standard library elegantly solves this problem by specifying an\ninternal encoding for file paths that's only used on Windows called\n[WTF-8](https://simonsapin.github.io/wtf-8/). Its key properties are that they\npermit losslessly roundtripping file paths on Windows by extending UTF-8 to\nsupport an encoding of surrogate codepoints, while simultaneously supporting\nzero-cost conversion from Rust's Unicode strings to file paths. (Since UTF-8 is\na proper subset of WTF-8.)\n\nThe fundamental point at which the above strategy fails is when you want to\ntreat file paths as things that look like strings in a zero cost way. In most\ncases, this is actually the wrong thing to do, but some cases call for it,\nfor example, glob or regex matching on file paths. This is because WTF-8 is\ntreated as an internal implementation detail, and there is no way to access\nthose bytes via a public API. Therefore, such consumers are limited in what\nthey can do:\n\n1. One could re-implement WTF-8 and re-encode file paths on Windows to WTF-8\n   by accessing their underlying 16-bit integer representation. Unfortunately,\n   this isn't zero cost (it introduces a second WTF-8 decoding step) and it's\n   not clear this is a good thing to do, since WTF-8 should ideally remain an\n   internal implementation detail.\n2. One could instead declare that they will not handle paths on Windows that\n   are not valid UTF-16, and return an error when one is encountered.\n3. Like (2), but instead of returning an error, lossily decode the file path\n   on Windows that isn't valid UTF-16 into UTF-16 by replacing invalid bytes\n   with the Unicode replacement codepoint.\n\nWhile this library may provide facilities for (1) in the future, currently,\nthis library only provides facilities for (2) and (3). In particular, a suite\nof conversion functions are provided that permit converting between byte\nstrings, OS strings and file paths. For owned byte strings, they are:\n\n* [`ByteVec::from_os_string`](trait.ByteVec.html#method.from_os_string)\n* [`ByteVec::from_os_str_lossy`](trait.ByteVec.html#method.from_os_str_lossy)\n* [`ByteVec::from_path_buf`](trait.ByteVec.html#method.from_path_buf)\n* [`ByteVec::from_path_lossy`](trait.ByteVec.html#method.from_path_lossy)\n* [`ByteVec::into_os_string`](trait.ByteVec.html#method.into_os_string)\n* [`ByteVec::into_os_string_lossy`](trait.ByteVec.html#method.into_os_string_lossy)\n* [`ByteVec::into_path_buf`](trait.ByteVec.html#method.into_path_buf)\n* [`ByteVec::into_path_buf_lossy`](trait.ByteVec.html#method.into_path_buf_lossy)\n\nFor byte string slices, they are:\n\n* [`ByteSlice::from_os_str`](trait.ByteSlice.html#method.from_os_str)\n* [`ByteSlice::from_path`](trait.ByteSlice.html#method.from_path)\n* [`ByteSlice::to_os_str`](trait.ByteSlice.html#method.to_os_str)\n* [`ByteSlice::to_os_str_lossy`](trait.ByteSlice.html#method.to_os_str_lossy)\n* [`ByteSlice::to_path`](trait.ByteSlice.html#method.to_path)\n* [`ByteSlice::to_path_lossy`](trait.ByteSlice.html#method.to_path_lossy)\n\nOn Unix, all of these conversions are rigorously zero cost, which gives one\na way to ergonomically deal with raw file paths exactly as they are using\nnormal string-related functions. On Windows, these conversion routines perform\na UTF-8 check and either return an error or lossily decode the file path\ninto valid UTF-8, depending on which function you use. This means that you\ncannot roundtrip all file paths on Windows correctly using these conversion\nroutines. However, this may be an acceptable downside since such file paths\nare exceptionally rare. Moreover, roundtripping isn't always necessary, for\nexample, if all you're doing is filtering based on file paths.\n\nThe reason why using byte strings for this is potentially superior than the\nstandard library's approach is that a lot of Rust code is already lossily\nconverting file paths to Rust's Unicode strings, which are required to be valid\nUTF-8, and thus contain latent bugs on Unix where paths with invalid UTF-8 are\nnot terribly uncommon. If you instead use byte strings, then you're guaranteed\nto write correct code for Unix, at the cost of getting a corner case wrong on\nWindows.\n*/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":0,"byte_end":18148,"line_start":1,"line_end":367,"column_start":1,"column_end":3}},{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":18193,"byte_end":18213,"line_start":370,"line_end":370,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1032},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33513,"byte_end":33517,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"BStr","qualname":"::bstr::BStr","value":"BStr {  }","parent":null,"children":[{"krate":0,"index":1033}],"decl_id":null,"docs":" A wrapper for `&[u8]` that provides convenient string oriented trait impls.","sig":null,"attributes":[{"value":"/ A wrapper for `&[u8]` that provides convenient string oriented trait impls.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32361,"byte_end":32440,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32441,"byte_end":32444,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ If you need ownership or a growable byte string buffer, then use","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32445,"byte_end":32513,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ [`BString`](struct.BString.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32514,"byte_end":32551,"line_start":6,"line_end":6,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32552,"byte_end":32555,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Using a `&BStr` is just like using a `&[u8]`, since `BStr`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32556,"byte_end":32618,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ implements `Deref` to `[u8]`. So all methods available on `[u8]`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32619,"byte_end":32687,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ are also available on `BStr`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32688,"byte_end":32721,"line_start":10,"line_end":10,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32722,"byte_end":32725,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32726,"byte_end":32746,"line_start":12,"line_end":12,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32747,"byte_end":32750,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ A `&BStr` has the same representation as a `&str`. That is, a `&BStr` is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32751,"byte_end":32827,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ a fat pointer which consists of a pointer to some bytes and a length.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32828,"byte_end":32901,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32902,"byte_end":32905,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Trait implementations","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32906,"byte_end":32933,"line_start":17,"line_end":17,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32934,"byte_end":32937,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The `BStr` type has a number of trait implementations, and in particular,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":32938,"byte_end":33015,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ defines equality and ordinal comparisons between `&BStr`, `&str` and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33016,"byte_end":33088,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"/ `&[u8]` for convenience.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33089,"byte_end":33117,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33118,"byte_end":33121,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The `Debug` implementation for `BStr` shows its bytes as a normal string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33122,"byte_end":33199,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ For invalid UTF-8, hex escape sequences are used.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33200,"byte_end":33253,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33254,"byte_end":33257,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The `Display` implementation behaves as if `BStr` were first lossily","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33258,"byte_end":33330,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ converted to a `str`. Invalid UTF-8 bytes are substituted with the Unicode","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33331,"byte_end":33409,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ replacement codepoint, which looks like this: �.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33410,"byte_end":33464,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33481,"byte_end":33501,"line_start":30,"line_end":30,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1037},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35567,"byte_end":35574,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"BString","qualname":"::bstring::BString","value":"BString {  }","parent":null,"children":[{"krate":0,"index":1038}],"decl_id":null,"docs":" A wrapper for `Vec<u8>` that provides convenient string oriented trait\n impls.","sig":null,"attributes":[{"value":"/ A wrapper for `Vec<u8>` that provides convenient string oriented trait","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34205,"byte_end":34279,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ impls.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34280,"byte_end":34290,"line_start":4,"line_end":4,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34291,"byte_end":34294,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ A `BString` has ownership over its contents and corresponds to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34295,"byte_end":34361,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ a growable or shrinkable buffer. Its borrowed counterpart is a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34362,"byte_end":34428,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ [`BStr`](struct.BStr.html), called a byte string slice.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34429,"byte_end":34488,"line_start":8,"line_end":8,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34489,"byte_end":34492,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Using a `BString` is just like using a `Vec<u8>`, since `BString`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34493,"byte_end":34562,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ implements `Deref` to `Vec<u8>`. So all methods available on `Vec<u8>`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34563,"byte_end":34637,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ are also available on `BString`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34638,"byte_end":34674,"line_start":12,"line_end":12,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34675,"byte_end":34678,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34679,"byte_end":34693,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34694,"byte_end":34697,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ You can create a new `BString` from a `Vec<u8>` via a `From` impl:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34698,"byte_end":34768,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34769,"byte_end":34772,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34773,"byte_end":34780,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use bstr::BString;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34781,"byte_end":34803,"line_start":19,"line_end":19,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34804,"byte_end":34807,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let s = BString::from(\"Hello, world!\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34808,"byte_end":34851,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34852,"byte_end":34859,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34860,"byte_end":34863,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Deref","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34864,"byte_end":34875,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34876,"byte_end":34879,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The `BString` type implements `Deref` and `DerefMut`, where the target","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34880,"byte_end":34954,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ types are `&Vec<u8>` and `&mut Vec<u8>`, respectively. `Deref` permits all of the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":34955,"byte_end":35040,"line_start":27,"line_end":27,"column_start":1,"column_end":86}},{"value":"/ methods defined on `Vec<u8>` to be implicitly callable on any `BString`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35041,"byte_end":35117,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35118,"byte_end":35121,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ For more information about how deref works, see the documentation for the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35122,"byte_end":35199,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ [`std::ops::Deref`](https://doc.rust-lang.org/std/ops/trait.Deref.html)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35200,"byte_end":35275,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ trait.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35276,"byte_end":35286,"line_start":32,"line_end":32,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35287,"byte_end":35290,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35291,"byte_end":35311,"line_start":34,"line_end":34,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35312,"byte_end":35315,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ A `BString` has the same representation as a `Vec<u8>` and a `String`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35316,"byte_end":35390,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/ That is, it is made up of three word sized components: a pointer to a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35391,"byte_end":35464,"line_start":37,"line_end":37,"column_start":1,"column_end":74}},{"value":"/ region of memory containing the bytes, a length and a capacity.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35465,"byte_end":35532,"line_start":38,"line_end":38,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53466,"byte_end":53467,"line_start":76,"line_end":76,"column_start":8,"column_end":9},"name":"B","qualname":"::ext_slice::B","value":"fn <'a, B> (bytes: &'a B) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" A short-hand constructor for building a `&[u8]`.","sig":null,"attributes":[{"value":"/ A short-hand constructor for building a `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":51838,"byte_end":51890,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":51891,"byte_end":51894,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This idiosyncratic constructor is useful for concisely building byte string","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":51895,"byte_end":51974,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ slices. Its primary utility is in conveniently writing byte string literals","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":51975,"byte_end":52054,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ in a uniform way. For example, consider this code that does not compile:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52055,"byte_end":52131,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52132,"byte_end":52135,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52136,"byte_end":52149,"line_start":36,"line_end":36,"column_start":1,"column_end":14}},{"value":"/ let strs = vec![b\"a\", b\"xy\"];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52150,"byte_end":52183,"line_start":37,"line_end":37,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52184,"byte_end":52191,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52192,"byte_end":52195,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The above code doesn't compile because the type of the byte string literal","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52196,"byte_end":52274,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ `b\"a\"` is `&'static [u8; 1]`, and the type of `b\"xy\"` is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52275,"byte_end":52335,"line_start":41,"line_end":41,"column_start":1,"column_end":61}},{"value":"/ `&'static [u8; 2]`. Since their types aren't the same, they can't be stored","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52336,"byte_end":52415,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/ in the same `Vec`. (This is dissimilar from normal Unicode string slices,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52416,"byte_end":52493,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ where both `\"a\"` and `\"xy\"` have the same type of `&'static str`.)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52494,"byte_end":52564,"line_start":44,"line_end":44,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52565,"byte_end":52568,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ One way of getting the above code to compile is to convert byte strings to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52569,"byte_end":52647,"line_start":46,"line_end":46,"column_start":1,"column_end":79}},{"value":"/ slices. You might try this:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52648,"byte_end":52679,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52680,"byte_end":52683,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52684,"byte_end":52697,"line_start":49,"line_end":49,"column_start":1,"column_end":14}},{"value":"/ let strs = vec![&b\"a\", &b\"xy\"];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52698,"byte_end":52733,"line_start":50,"line_end":50,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52734,"byte_end":52741,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52742,"byte_end":52745,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ But this just creates values with type `& &'static [u8; 1]` and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52746,"byte_end":52813,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/ `& &'static [u8; 2]`. Instead, you need to force the issue like so:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52814,"byte_end":52885,"line_start":54,"line_end":54,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52886,"byte_end":52889,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52890,"byte_end":52897,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ let strs = vec![&b\"a\"[..], &b\"xy\"[..]];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52898,"byte_end":52941,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/ // or","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52942,"byte_end":52951,"line_start":58,"line_end":58,"column_start":1,"column_end":10}},{"value":"/ let strs = vec![b\"a\".as_ref(), b\"xy\".as_ref()];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":52952,"byte_end":53003,"line_start":59,"line_end":59,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53004,"byte_end":53011,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53012,"byte_end":53015,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ But neither of these are particularly convenient to type, especially when","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53016,"byte_end":53093,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ it's something as common as a string literal. Thus, this constructor","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53094,"byte_end":53166,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/ permits writing the following instead:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53167,"byte_end":53209,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53210,"byte_end":53213,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53214,"byte_end":53221,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ use bstr::B;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53222,"byte_end":53238,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53239,"byte_end":53242,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let strs = vec![B(\"a\"), B(b\"xy\")];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53243,"byte_end":53281,"line_start":69,"line_end":69,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53282,"byte_end":53289,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53290,"byte_end":53293,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Notice that this also lets you mix and match both string literals and byte","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53294,"byte_end":53372,"line_start":72,"line_end":72,"column_start":1,"column_end":79}},{"value":"/ string literals. This can be quite convenient!","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53373,"byte_end":53423,"line_start":73,"line_end":73,"column_start":1,"column_end":51}},{"value":"allow(non_snake_case)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53424,"byte_end":53448,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53449,"byte_end":53458,"line_start":75,"line_end":75,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53840,"byte_end":53846,"line_start":94,"line_end":94,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::ext_slice::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Ensure that callers cannot implement `ByteSlice` by making an\n umplementable trait its super trait.\n","sig":null,"attributes":[{"value":"/ Ensure that callers cannot implement `ByteSlice` by making an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53723,"byte_end":53788,"line_start":92,"line_end":92,"column_start":1,"column_end":66}},{"value":"/ umplementable trait its super trait.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53789,"byte_end":53829,"line_start":93,"line_end":93,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53948,"byte_end":53957,"line_start":98,"line_end":98,"column_start":11,"column_end":20},"name":"ByteSlice","qualname":"::ext_slice::ByteSlice","value":"ByteSlice: Sealed","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":302}],"decl_id":null,"docs":" A trait that extends `&[u8]` with string oriented methods.\n","sig":null,"attributes":[{"value":"/ A trait that extends `&[u8]` with string oriented methods.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53875,"byte_end":53937,"line_start":97,"line_end":97,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54183,"byte_end":54191,"line_start":103,"line_end":103,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::ext_slice::ByteSlice::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" A method for accessing the raw bytes of this type. This is always a\n no-op and callers shouldn't care about it. This only exists for making\n the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw bytes of this type. This is always a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53972,"byte_end":54043,"line_start":99,"line_end":99,"column_start":5,"column_end":76}},{"value":"/ no-op and callers shouldn't care about it. This only exists for making","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54048,"byte_end":54122,"line_start":100,"line_end":100,"column_start":5,"column_end":79}},{"value":"/ the extension trait work.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54127,"byte_end":54156,"line_start":101,"line_end":101,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54434,"byte_end":54446,"line_start":109,"line_end":109,"column_start":8,"column_end":20},"name":"as_bytes_mut","qualname":"::ext_slice::ByteSlice::as_bytes_mut","value":"fn (&mut self) -> &mut [u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" A method for accessing the raw bytes of this type, mutably. This is\n always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw bytes of this type, mutably. This is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54214,"byte_end":54285,"line_start":105,"line_end":105,"column_start":5,"column_end":76}},{"value":"/ always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54290,"byte_end":54362,"line_start":106,"line_end":106,"column_start":5,"column_end":77}},{"value":"/ for making the extension trait work.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54367,"byte_end":54407,"line_start":107,"line_end":107,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55047,"byte_end":55054,"line_start":129,"line_end":129,"column_start":8,"column_end":15},"name":"as_bstr","qualname":"::ext_slice::ByteSlice::as_bstr","value":"fn (&self) -> &BStr","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return this byte slice as a `&BStr`.","sig":null,"attributes":[{"value":"/ Return this byte slice as a `&BStr`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54477,"byte_end":54517,"line_start":111,"line_end":111,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54522,"byte_end":54525,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Use `&BStr` is useful because of its `fmt::Debug` representation","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54530,"byte_end":54598,"line_start":113,"line_end":113,"column_start":5,"column_end":73}},{"value":"/ and various other trait implementations (such as `PartialEq` and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54603,"byte_end":54671,"line_start":114,"line_end":114,"column_start":5,"column_end":73}},{"value":"/ `PartialOrd`). In particular, the `Debug` implementation for `BStr`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54676,"byte_end":54747,"line_start":115,"line_end":115,"column_start":5,"column_end":76}},{"value":"/ shows its bytes as a normal string. For invalid UTF-8, hex escape","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54752,"byte_end":54821,"line_start":116,"line_end":116,"column_start":5,"column_end":74}},{"value":"/ sequences are used.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54826,"byte_end":54849,"line_start":117,"line_end":117,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54854,"byte_end":54857,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54862,"byte_end":54876,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54881,"byte_end":54884,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54889,"byte_end":54905,"line_start":121,"line_end":121,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54910,"byte_end":54913,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54918,"byte_end":54925,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54930,"byte_end":54954,"line_start":124,"line_end":124,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54959,"byte_end":54962,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", b\"foo\\xFFbar\".as_bstr());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":54967,"byte_end":55013,"line_start":126,"line_end":126,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55018,"byte_end":55025,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55030,"byte_end":55039,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55738,"byte_end":55749,"line_start":152,"line_end":152,"column_start":8,"column_end":19},"name":"as_bstr_mut","qualname":"::ext_slice::ByteSlice::as_bstr_mut","value":"fn (&mut self) -> &mut BStr","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return this byte slice as a `&mut BStr`.","sig":null,"attributes":[{"value":"/ Return this byte slice as a `&mut BStr`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55119,"byte_end":55163,"line_start":133,"line_end":133,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55168,"byte_end":55171,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Use `&mut BStr` is useful because of its `fmt::Debug` representation","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55176,"byte_end":55248,"line_start":135,"line_end":135,"column_start":5,"column_end":77}},{"value":"/ and various other trait implementations (such as `PartialEq` and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55253,"byte_end":55321,"line_start":136,"line_end":136,"column_start":5,"column_end":73}},{"value":"/ `PartialOrd`). In particular, the `Debug` implementation for `BStr`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55326,"byte_end":55397,"line_start":137,"line_end":137,"column_start":5,"column_end":76}},{"value":"/ shows its bytes as a normal string. For invalid UTF-8, hex escape","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55402,"byte_end":55471,"line_start":138,"line_end":138,"column_start":5,"column_end":74}},{"value":"/ sequences are used.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55476,"byte_end":55499,"line_start":139,"line_end":139,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55504,"byte_end":55507,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55512,"byte_end":55526,"line_start":141,"line_end":141,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55531,"byte_end":55534,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55539,"byte_end":55555,"line_start":143,"line_end":143,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55560,"byte_end":55563,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55568,"byte_end":55575,"line_start":145,"line_end":145,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55580,"byte_end":55604,"line_start":146,"line_end":146,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55609,"byte_end":55612,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = *b\"foo\\xFFbar\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55617,"byte_end":55652,"line_start":148,"line_end":148,"column_start":5,"column_end":40}},{"value":"/ println!(\"{:?}\", &mut bytes.as_bstr_mut());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55657,"byte_end":55704,"line_start":149,"line_end":149,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55709,"byte_end":55716,"line_start":150,"line_end":150,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55721,"byte_end":55730,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56593,"byte_end":56604,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"from_os_str","qualname":"::ext_slice::ByteSlice::from_os_str","value":"fn (os_str: &OsStr) -> Option<&[u8]>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Create an immutable byte string from an OS string slice.","sig":null,"attributes":[{"value":"/ Create an immutable byte string from an OS string slice.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55830,"byte_end":55890,"line_start":156,"line_end":156,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55895,"byte_end":55898,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55903,"byte_end":55975,"line_start":158,"line_end":158,"column_start":5,"column_end":77}},{"value":"/ this returns `None` if the given OS string is not valid UTF-8. (For","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":55980,"byte_end":56051,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/ example, on Windows, file paths are allowed to be a sequence of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56056,"byte_end":56123,"line_start":160,"line_end":160,"column_start":5,"column_end":72}},{"value":"/ arbitrary 16-bit integers. Not all such sequences can be transcoded to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56128,"byte_end":56202,"line_start":161,"line_end":161,"column_start":5,"column_end":79}},{"value":"/ valid UTF-8.)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56207,"byte_end":56224,"line_start":162,"line_end":162,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56229,"byte_end":56232,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56237,"byte_end":56251,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56256,"byte_end":56259,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56264,"byte_end":56280,"line_start":166,"line_end":166,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56285,"byte_end":56288,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56293,"byte_end":56300,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56305,"byte_end":56329,"line_start":169,"line_end":169,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56334,"byte_end":56337,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56342,"byte_end":56371,"line_start":171,"line_end":171,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56376,"byte_end":56379,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsStr::new(\"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56384,"byte_end":56419,"line_start":173,"line_end":173,"column_start":5,"column_end":40}},{"value":"/ let bs = <[u8]>::from_os_str(os_str).expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56424,"byte_end":56497,"line_start":174,"line_end":174,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56502,"byte_end":56531,"line_start":175,"line_end":175,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56536,"byte_end":56543,"line_start":176,"line_end":176,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56548,"byte_end":56571,"line_start":177,"line_end":177,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":56576,"byte_end":56585,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57745,"byte_end":57754,"line_start":219,"line_end":219,"column_start":8,"column_end":17},"name":"from_path","qualname":"::ext_slice::ByteSlice::from_path","value":"fn (path: &Path) -> Option<&[u8]>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Create an immutable byte string from a file path.","sig":null,"attributes":[{"value":"/ Create an immutable byte string from a file path.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57009,"byte_end":57062,"line_start":197,"line_end":197,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57067,"byte_end":57070,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57075,"byte_end":57147,"line_start":199,"line_end":199,"column_start":5,"column_end":77}},{"value":"/ this returns `None` if the given path is not valid UTF-8. (For example,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57152,"byte_end":57227,"line_start":200,"line_end":200,"column_start":5,"column_end":80}},{"value":"/ on Windows, file paths are allowed to be a sequence of arbitrary 16-bit","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57232,"byte_end":57307,"line_start":201,"line_end":201,"column_start":5,"column_end":80}},{"value":"/ integers. Not all such sequences can be transcoded to valid UTF-8.)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57312,"byte_end":57383,"line_start":202,"line_end":202,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57388,"byte_end":57391,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57396,"byte_end":57410,"line_start":204,"line_end":204,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57415,"byte_end":57418,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57423,"byte_end":57439,"line_start":206,"line_end":206,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57444,"byte_end":57447,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57452,"byte_end":57459,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"/ use std::path::Path;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57464,"byte_end":57488,"line_start":209,"line_end":209,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57493,"byte_end":57496,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57501,"byte_end":57530,"line_start":211,"line_end":211,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57535,"byte_end":57538,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let path = Path::new(\"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57543,"byte_end":57575,"line_start":213,"line_end":213,"column_start":5,"column_end":37}},{"value":"/ let bs = <[u8]>::from_path(path).expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57580,"byte_end":57649,"line_start":214,"line_end":214,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57654,"byte_end":57683,"line_start":215,"line_end":215,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57688,"byte_end":57695,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57700,"byte_end":57723,"line_start":217,"line_end":217,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57728,"byte_end":57737,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58874,"byte_end":58880,"line_start":252,"line_end":252,"column_start":8,"column_end":14},"name":"to_str","qualname":"::ext_slice::ByteSlice::to_str","value":"fn (&self) -> Result<&str, Utf8Error>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Safely convert this byte string into a `&str` if it's valid UTF-8.","sig":null,"attributes":[{"value":"/ Safely convert this byte string into a `&str` if it's valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57842,"byte_end":57912,"line_start":223,"line_end":223,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57917,"byte_end":57920,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then an error is returned. The","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":57925,"byte_end":57999,"line_start":225,"line_end":225,"column_start":5,"column_end":79}},{"value":"/ error returned indicates the first invalid byte found and the length","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58004,"byte_end":58076,"line_start":226,"line_end":226,"column_start":5,"column_end":77}},{"value":"/ of the error.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58081,"byte_end":58098,"line_start":227,"line_end":227,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58103,"byte_end":58106,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ In cases where a lossy conversion to `&str` is acceptable, then use one","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58111,"byte_end":58186,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ of the [`to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy) or","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58191,"byte_end":58263,"line_start":230,"line_end":230,"column_start":5,"column_end":77}},{"value":"/ [`to_str_lossy_into`](trait.ByteSlice.html#method.to_str_lossy_into)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58268,"byte_end":58340,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ methods.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58345,"byte_end":58357,"line_start":232,"line_end":232,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58362,"byte_end":58365,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58370,"byte_end":58384,"line_start":234,"line_end":234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58389,"byte_end":58392,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58397,"byte_end":58413,"line_start":236,"line_end":236,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58418,"byte_end":58421,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58426,"byte_end":58433,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58438,"byte_end":58476,"line_start":239,"line_end":239,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58481,"byte_end":58484,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), bstr::Utf8Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58489,"byte_end":58540,"line_start":241,"line_end":241,"column_start":5,"column_end":56}},{"value":"/ let s = B(\"☃βツ\").to_str()?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58545,"byte_end":58581,"line_start":242,"line_end":242,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58586,"byte_end":58616,"line_start":243,"line_end":243,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58621,"byte_end":58624,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58629,"byte_end":58679,"line_start":245,"line_end":245,"column_start":5,"column_end":50}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58684,"byte_end":58710,"line_start":246,"line_end":246,"column_start":5,"column_end":31}},{"value":"/ let err = bstring.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58715,"byte_end":58759,"line_start":247,"line_end":247,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(8, err.valid_up_to());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58764,"byte_end":58801,"line_start":248,"line_end":248,"column_start":5,"column_end":42}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58806,"byte_end":58840,"line_start":249,"line_end":249,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58845,"byte_end":58852,"line_start":250,"line_end":250,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":58857,"byte_end":58866,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60169,"byte_end":60185,"line_start":287,"line_end":287,"column_start":15,"column_end":31},"name":"to_str_unchecked","qualname":"::ext_slice::ByteSlice::to_str_unchecked","value":"fn (&self) -> &str","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Unsafely convert this byte string into a `&str`, without checking for\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Unsafely convert this byte string into a `&str`, without checking for","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59159,"byte_end":59232,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59237,"byte_end":59253,"line_start":261,"line_end":261,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59258,"byte_end":59261,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59266,"byte_end":59278,"line_start":263,"line_end":263,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59283,"byte_end":59286,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Callers *must* ensure that this byte string is valid UTF-8 before","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59291,"byte_end":59360,"line_start":265,"line_end":265,"column_start":5,"column_end":74}},{"value":"/ calling this method. Converting a byte string into a `&str` that is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59365,"byte_end":59436,"line_start":266,"line_end":266,"column_start":5,"column_end":76}},{"value":"/ not valid UTF-8 is considered undefined behavior.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59441,"byte_end":59494,"line_start":267,"line_end":267,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59499,"byte_end":59502,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ This routine is useful in performance sensitive contexts where the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59507,"byte_end":59577,"line_start":269,"line_end":269,"column_start":5,"column_end":75}},{"value":"/ UTF-8 validity of the byte string is already known and it is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59582,"byte_end":59646,"line_start":270,"line_end":270,"column_start":5,"column_end":69}},{"value":"/ undesirable to pay the cost of an additional UTF-8 validation check","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59651,"byte_end":59722,"line_start":271,"line_end":271,"column_start":5,"column_end":76}},{"value":"/ that [`to_str`](trait.ByteSlice.html#method.to_str) performs.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59727,"byte_end":59792,"line_start":272,"line_end":272,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59797,"byte_end":59800,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59805,"byte_end":59819,"line_start":274,"line_end":274,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59824,"byte_end":59827,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59832,"byte_end":59848,"line_start":276,"line_end":276,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59853,"byte_end":59856,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59861,"byte_end":59868,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59873,"byte_end":59902,"line_start":279,"line_end":279,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59907,"byte_end":59910,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ // SAFETY: This is safe because string literals are guaranteed to be","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59915,"byte_end":59987,"line_start":281,"line_end":281,"column_start":5,"column_end":77}},{"value":"/ // valid UTF-8 by the Rust compiler.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":59992,"byte_end":60032,"line_start":282,"line_end":282,"column_start":5,"column_end":45}},{"value":"/ let s = unsafe { B(\"☃βツ\").to_str_unchecked() };","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60037,"byte_end":60093,"line_start":283,"line_end":283,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60098,"byte_end":60128,"line_start":284,"line_end":284,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60133,"byte_end":60140,"line_start":285,"line_end":285,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60145,"byte_end":60154,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":63071,"byte_end":63083,"line_start":352,"line_end":352,"column_start":8,"column_end":20},"name":"to_str_lossy","qualname":"::ext_slice::ByteSlice::to_str_lossy","value":"fn (&self) -> Cow<str>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Convert this byte string to a valid UTF-8 string by replacing invalid\n UTF-8 bytes with the Unicode replacement codepoint (`U+FFFD`).","sig":null,"attributes":[{"value":"/ Convert this byte string to a valid UTF-8 string by replacing invalid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60264,"byte_end":60337,"line_start":291,"line_end":291,"column_start":5,"column_end":78}},{"value":"/ UTF-8 bytes with the Unicode replacement codepoint (`U+FFFD`).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60342,"byte_end":60408,"line_start":292,"line_end":292,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60413,"byte_end":60416,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ If the byte string is already valid UTF-8, then no copying or","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60421,"byte_end":60486,"line_start":294,"line_end":294,"column_start":5,"column_end":70}},{"value":"/ allocation is performed and a borrrowed string slice is returned. If","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60491,"byte_end":60563,"line_start":295,"line_end":295,"column_start":5,"column_end":77}},{"value":"/ the byte string is not valid UTF-8, then an owned string buffer is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60568,"byte_end":60638,"line_start":296,"line_end":296,"column_start":5,"column_end":75}},{"value":"/ returned with invalid bytes replaced by the replacement codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60643,"byte_end":60713,"line_start":297,"line_end":297,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60718,"byte_end":60721,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ This method uses the \"substitution of maximal subparts\" (Unicode","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60726,"byte_end":60794,"line_start":299,"line_end":299,"column_start":5,"column_end":73}},{"value":"/ Standard, Chapter 3, Section 9) strategy for inserting the replacement","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60799,"byte_end":60873,"line_start":300,"line_end":300,"column_start":5,"column_end":79}},{"value":"/ codepoint. Specifically, a replacement codepoint is inserted whenever a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60878,"byte_end":60953,"line_start":301,"line_end":301,"column_start":5,"column_end":80}},{"value":"/ byte is found that cannot possibly lead to a valid code unit sequence.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":60958,"byte_end":61032,"line_start":302,"line_end":302,"column_start":5,"column_end":79}},{"value":"/ If there were previous bytes that represented a prefix of a well-formed","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61037,"byte_end":61112,"line_start":303,"line_end":303,"column_start":5,"column_end":80}},{"value":"/ code unit sequence, then all of those bytes are substituted with a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61117,"byte_end":61187,"line_start":304,"line_end":304,"column_start":5,"column_end":75}},{"value":"/ single replacement codepoint. The \"substitution of maximal subparts\"","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61192,"byte_end":61264,"line_start":305,"line_end":305,"column_start":5,"column_end":77}},{"value":"/ strategy is the same strategy used by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61269,"byte_end":61310,"line_start":306,"line_end":306,"column_start":5,"column_end":46}},{"value":"/ [W3C's Encoding standard](https://www.w3.org/TR/encoding/).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61315,"byte_end":61378,"line_start":307,"line_end":307,"column_start":5,"column_end":68}},{"value":"/ For a more precise description of the maximal subpart strategy, see","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61383,"byte_end":61454,"line_start":308,"line_end":308,"column_start":5,"column_end":76}},{"value":"/ the Unicode Standard, Chapter 3, Section 9. See also","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61459,"byte_end":61515,"line_start":309,"line_end":309,"column_start":5,"column_end":61}},{"value":"/ [Public Review Issue #121](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61520,"byte_end":61594,"line_start":310,"line_end":310,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61599,"byte_end":61602,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ N.B. Rust's standard library also appears to use the same strategy,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61607,"byte_end":61678,"line_start":312,"line_end":312,"column_start":5,"column_end":76}},{"value":"/ but it does not appear to be an API guarantee.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61683,"byte_end":61733,"line_start":313,"line_end":313,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61738,"byte_end":61741,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61746,"byte_end":61760,"line_start":315,"line_end":315,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61765,"byte_end":61768,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61773,"byte_end":61789,"line_start":317,"line_end":317,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61794,"byte_end":61797,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61802,"byte_end":61809,"line_start":319,"line_end":319,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61814,"byte_end":61839,"line_start":320,"line_end":320,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61844,"byte_end":61847,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61852,"byte_end":61876,"line_start":322,"line_end":322,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61881,"byte_end":61884,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61889,"byte_end":61939,"line_start":324,"line_end":324,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Cow::Borrowed(\"☃βツ\"), bstring.to_str_lossy());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":61944,"byte_end":62010,"line_start":325,"line_end":325,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62015,"byte_end":62018,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ // Add a byte that makes the sequence invalid.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62023,"byte_end":62073,"line_start":327,"line_end":327,"column_start":5,"column_end":55}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62078,"byte_end":62104,"line_start":328,"line_end":328,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(Cow::Borrowed(\"☃βツ\\u{FFFD}\"), bstring.to_str_lossy());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62109,"byte_end":62183,"line_start":329,"line_end":329,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62188,"byte_end":62195,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62200,"byte_end":62203,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ This demonstrates the \"maximal subpart\" substitution logic.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62208,"byte_end":62271,"line_start":332,"line_end":332,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62276,"byte_end":62279,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62284,"byte_end":62291,"line_start":334,"line_end":334,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62296,"byte_end":62325,"line_start":335,"line_end":335,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62330,"byte_end":62333,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ // \\x61 is the ASCII codepoint for 'a'.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62338,"byte_end":62381,"line_start":337,"line_end":337,"column_start":5,"column_end":48}},{"value":"/ // \\xF1\\x80\\x80 is a valid 3-byte code unit prefix.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62386,"byte_end":62441,"line_start":338,"line_end":338,"column_start":5,"column_end":60}},{"value":"/ // \\xE1\\x80 is a valid 2-byte code unit prefix.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62446,"byte_end":62497,"line_start":339,"line_end":339,"column_start":5,"column_end":56}},{"value":"/ // \\xC2 is a valid 1-byte code unit prefix.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62502,"byte_end":62549,"line_start":340,"line_end":340,"column_start":5,"column_end":52}},{"value":"/ // \\x62 is the ASCII codepoint for 'b'.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62554,"byte_end":62597,"line_start":341,"line_end":341,"column_start":5,"column_end":48}},{"value":"/ //","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62602,"byte_end":62608,"line_start":342,"line_end":342,"column_start":5,"column_end":11}},{"value":"/ // In sum, each of the prefixes is replaced by a single replacement","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62613,"byte_end":62684,"line_start":343,"line_end":343,"column_start":5,"column_end":76}},{"value":"/ // codepoint since none of the prefixes are properly completed. This","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62689,"byte_end":62761,"line_start":344,"line_end":344,"column_start":5,"column_end":77}},{"value":"/ // is in contrast to other strategies that might insert a replacement","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62766,"byte_end":62839,"line_start":345,"line_end":345,"column_start":5,"column_end":78}},{"value":"/ // codepoint for every single byte.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62844,"byte_end":62883,"line_start":346,"line_end":346,"column_start":5,"column_end":44}},{"value":"/ let bs = B(b\"\\x61\\xF1\\x80\\x80\\xE1\\x80\\xC2\\x62\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62888,"byte_end":62940,"line_start":347,"line_end":347,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(\"a\\u{FFFD}\\u{FFFD}\\u{FFFD}b\", bs.to_str_lossy());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":62945,"byte_end":63009,"line_start":348,"line_end":348,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":63014,"byte_end":63021,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":63026,"byte_end":63049,"line_start":350,"line_end":350,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":63054,"byte_end":63063,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":65242,"byte_end":65259,"line_start":409,"line_end":409,"column_start":8,"column_end":25},"name":"to_str_lossy_into","qualname":"::ext_slice::ByteSlice::to_str_lossy_into","value":"fn (&self, dest: &mut String) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Copy the contents of this byte string into the given owned string\n buffer, while replacing invalid UTF-8 code unit sequences with the\n Unicode replacement codepoint (`U+FFFD`).","sig":null,"attributes":[{"value":"/ Copy the contents of this byte string into the given owned string","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64083,"byte_end":64152,"line_start":377,"line_end":377,"column_start":5,"column_end":74}},{"value":"/ buffer, while replacing invalid UTF-8 code unit sequences with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64157,"byte_end":64227,"line_start":378,"line_end":378,"column_start":5,"column_end":75}},{"value":"/ Unicode replacement codepoint (`U+FFFD`).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64232,"byte_end":64277,"line_start":379,"line_end":379,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64282,"byte_end":64285,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This method uses the same \"substitution of maximal subparts\" strategy","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64290,"byte_end":64363,"line_start":381,"line_end":381,"column_start":5,"column_end":78}},{"value":"/ for inserting the replacement codepoint as the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64368,"byte_end":64418,"line_start":382,"line_end":382,"column_start":5,"column_end":55}},{"value":"/ [`to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy) method.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64423,"byte_end":64493,"line_start":383,"line_end":383,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64498,"byte_end":64501,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for amortizing allocation. However, unlike","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64506,"byte_end":64575,"line_start":385,"line_end":385,"column_start":5,"column_end":74}},{"value":"/ `to_str_lossy`, this routine will _always_ copy the contents of this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64580,"byte_end":64652,"line_start":386,"line_end":386,"column_start":5,"column_end":77}},{"value":"/ byte string into the destination buffer, even if this byte string is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64657,"byte_end":64729,"line_start":387,"line_end":387,"column_start":5,"column_end":77}},{"value":"/ valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64734,"byte_end":64750,"line_start":388,"line_end":388,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64755,"byte_end":64758,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64763,"byte_end":64777,"line_start":390,"line_end":390,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64782,"byte_end":64785,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64790,"byte_end":64806,"line_start":392,"line_end":392,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64811,"byte_end":64814,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64819,"byte_end":64826,"line_start":394,"line_end":394,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64831,"byte_end":64856,"line_start":395,"line_end":395,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64861,"byte_end":64864,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64869,"byte_end":64893,"line_start":397,"line_end":397,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64898,"byte_end":64901,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64906,"byte_end":64956,"line_start":399,"line_end":399,"column_start":5,"column_end":50}},{"value":"/ // Add a byte that makes the sequence invalid.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":64961,"byte_end":65011,"line_start":400,"line_end":400,"column_start":5,"column_end":55}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":65016,"byte_end":65042,"line_start":401,"line_end":401,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":65047,"byte_end":65050,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ let mut dest = String::new();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":65055,"byte_end":65088,"line_start":403,"line_end":403,"column_start":5,"column_end":38}},{"value":"/ bstring.to_str_lossy_into(&mut dest);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":65093,"byte_end":65134,"line_start":404,"line_end":404,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(\"☃βツ\\u{FFFD}\", dest);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":65139,"byte_end":65180,"line_start":405,"line_end":405,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":65185,"byte_end":65192,"line_start":406,"line_end":406,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":65197,"byte_end":65220,"line_start":407,"line_end":407,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":65225,"byte_end":65234,"line_start":408,"line_end":408,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67053,"byte_end":67062,"line_start":456,"line_end":456,"column_start":8,"column_end":17},"name":"to_os_str","qualname":"::ext_slice::ByteSlice::to_os_str","value":"fn (&self) -> Result<&OsStr, Utf8Error>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Create an OS string slice from this byte string.","sig":null,"attributes":[{"value":"/ Create an OS string slice from this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66297,"byte_end":66349,"line_start":435,"line_end":435,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66354,"byte_end":66357,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66362,"byte_end":66434,"line_start":437,"line_end":437,"column_start":5,"column_end":77}},{"value":"/ this returns a UTF-8 decoding error if this byte string is not valid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66439,"byte_end":66511,"line_start":438,"line_end":438,"column_start":5,"column_end":77}},{"value":"/ UTF-8. (For example, on Windows, file paths are allowed to be a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66516,"byte_end":66583,"line_start":439,"line_end":439,"column_start":5,"column_end":72}},{"value":"/ sequence of arbitrary 16-bit integers. There is no obvious mapping from","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66588,"byte_end":66663,"line_start":440,"line_end":440,"column_start":5,"column_end":80}},{"value":"/ an arbitrary sequence of 8-bit integers to an arbitrary sequence of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66668,"byte_end":66739,"line_start":441,"line_end":441,"column_start":5,"column_end":76}},{"value":"/ 16-bit integers.)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66744,"byte_end":66765,"line_start":442,"line_end":442,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66770,"byte_end":66773,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66778,"byte_end":66792,"line_start":444,"line_end":444,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66797,"byte_end":66800,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66805,"byte_end":66821,"line_start":446,"line_end":446,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66826,"byte_end":66829,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66834,"byte_end":66841,"line_start":448,"line_end":448,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66846,"byte_end":66875,"line_start":449,"line_end":449,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66880,"byte_end":66883,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ let os_str = b\"foo\".to_os_str().expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66888,"byte_end":66956,"line_start":451,"line_end":451,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(os_str, \"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66961,"byte_end":66991,"line_start":452,"line_end":452,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":66996,"byte_end":67003,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67008,"byte_end":67031,"line_start":454,"line_end":454,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67036,"byte_end":67045,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68277,"byte_end":68292,"line_start":496,"line_end":496,"column_start":8,"column_end":23},"name":"to_os_str_lossy","qualname":"::ext_slice::ByteSlice::to_os_str_lossy","value":"fn (&self) -> Cow<OsStr>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Lossily create an OS string slice from this byte string.","sig":null,"attributes":[{"value":"/ Lossily create an OS string slice from this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67497,"byte_end":67557,"line_start":474,"line_end":474,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67562,"byte_end":67565,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67570,"byte_end":67642,"line_start":476,"line_end":476,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67647,"byte_end":67719,"line_start":477,"line_end":477,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67724,"byte_end":67785,"line_start":478,"line_end":478,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67790,"byte_end":67793,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67798,"byte_end":67871,"line_start":480,"line_end":480,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67876,"byte_end":67947,"line_start":481,"line_end":481,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67952,"byte_end":67984,"line_start":482,"line_end":482,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67989,"byte_end":67992,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":67997,"byte_end":68011,"line_start":484,"line_end":484,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68016,"byte_end":68019,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68024,"byte_end":68040,"line_start":486,"line_end":486,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68045,"byte_end":68048,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68053,"byte_end":68060,"line_start":488,"line_end":488,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68065,"byte_end":68089,"line_start":489,"line_end":489,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68094,"byte_end":68097,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ let os_str = b\"foo\\xFFbar\".to_os_str_lossy();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68102,"byte_end":68151,"line_start":491,"line_end":491,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(os_str.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68156,"byte_end":68215,"line_start":492,"line_end":492,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68220,"byte_end":68227,"line_start":493,"line_end":493,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68232,"byte_end":68255,"line_start":494,"line_end":494,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68260,"byte_end":68269,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69623,"byte_end":69630,"line_start":540,"line_end":540,"column_start":8,"column_end":15},"name":"to_path","qualname":"::ext_slice::ByteSlice::to_path","value":"fn (&self) -> Result<&Path, Utf8Error>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Create a path slice from this byte string.","sig":null,"attributes":[{"value":"/ Create a path slice from this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68872,"byte_end":68918,"line_start":519,"line_end":519,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68923,"byte_end":68926,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":68931,"byte_end":69003,"line_start":521,"line_end":521,"column_start":5,"column_end":77}},{"value":"/ this returns a UTF-8 decoding error if this byte string is not valid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69008,"byte_end":69080,"line_start":522,"line_end":522,"column_start":5,"column_end":77}},{"value":"/ UTF-8. (For example, on Windows, file paths are allowed to be a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69085,"byte_end":69152,"line_start":523,"line_end":523,"column_start":5,"column_end":72}},{"value":"/ sequence of arbitrary 16-bit integers. There is no obvious mapping from","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69157,"byte_end":69232,"line_start":524,"line_end":524,"column_start":5,"column_end":80}},{"value":"/ an arbitrary sequence of 8-bit integers to an arbitrary sequence of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69237,"byte_end":69308,"line_start":525,"line_end":525,"column_start":5,"column_end":76}},{"value":"/ 16-bit integers.)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69313,"byte_end":69334,"line_start":526,"line_end":526,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69339,"byte_end":69342,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69347,"byte_end":69361,"line_start":528,"line_end":528,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69366,"byte_end":69369,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69374,"byte_end":69390,"line_start":530,"line_end":530,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69395,"byte_end":69398,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69403,"byte_end":69410,"line_start":532,"line_end":532,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69415,"byte_end":69439,"line_start":533,"line_end":533,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69444,"byte_end":69447,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ let path = b\"foo\".to_path().expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69452,"byte_end":69516,"line_start":535,"line_end":535,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(path.as_os_str(), \"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69521,"byte_end":69561,"line_start":536,"line_end":536,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69566,"byte_end":69573,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69578,"byte_end":69601,"line_start":538,"line_end":538,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69606,"byte_end":69615,"line_start":539,"line_end":539,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70508,"byte_end":70521,"line_start":567,"line_end":567,"column_start":8,"column_end":21},"name":"to_path_lossy","qualname":"::ext_slice::ByteSlice::to_path_lossy","value":"fn (&self) -> Cow<Path>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Lossily create a path slice from this byte string.","sig":null,"attributes":[{"value":"/ Lossily create a path slice from this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69719,"byte_end":69773,"line_start":544,"line_end":544,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69778,"byte_end":69781,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69786,"byte_end":69858,"line_start":546,"line_end":546,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69863,"byte_end":69935,"line_start":547,"line_end":547,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":69940,"byte_end":70001,"line_start":548,"line_end":548,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70006,"byte_end":70009,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70014,"byte_end":70087,"line_start":550,"line_end":550,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70092,"byte_end":70163,"line_start":551,"line_end":551,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70168,"byte_end":70200,"line_start":552,"line_end":552,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70205,"byte_end":70208,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70213,"byte_end":70227,"line_start":554,"line_end":554,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70232,"byte_end":70235,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70240,"byte_end":70256,"line_start":556,"line_end":556,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70261,"byte_end":70264,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70269,"byte_end":70276,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70281,"byte_end":70305,"line_start":559,"line_end":559,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70310,"byte_end":70313,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"foo\\xFFbar\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70318,"byte_end":70345,"line_start":561,"line_end":561,"column_start":5,"column_end":32}},{"value":"/ let path = bs.to_path_lossy();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70350,"byte_end":70384,"line_start":562,"line_end":562,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(path.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70389,"byte_end":70446,"line_start":563,"line_end":563,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70451,"byte_end":70458,"line_start":564,"line_end":564,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70463,"byte_end":70486,"line_start":565,"line_end":565,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70491,"byte_end":70500,"line_start":566,"line_end":566,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71235,"byte_end":71242,"line_start":595,"line_end":595,"column_start":8,"column_end":15},"name":"repeatn","qualname":"::ext_slice::ByteSlice::repeatn","value":"fn (&self, n: usize) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Create a new byte string by repeating this byte string `n` times.","sig":null,"attributes":[{"value":"/ Create a new byte string by repeating this byte string `n` times.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70757,"byte_end":70826,"line_start":576,"line_end":576,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70831,"byte_end":70834,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70839,"byte_end":70851,"line_start":578,"line_end":578,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70856,"byte_end":70859,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ This function panics if the capacity of the new byte string would","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70864,"byte_end":70933,"line_start":580,"line_end":580,"column_start":5,"column_end":74}},{"value":"/ overflow.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70938,"byte_end":70951,"line_start":581,"line_end":581,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70956,"byte_end":70959,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70964,"byte_end":70978,"line_start":583,"line_end":583,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70983,"byte_end":70986,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":70991,"byte_end":71007,"line_start":585,"line_end":585,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71012,"byte_end":71015,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71020,"byte_end":71027,"line_start":587,"line_end":587,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71032,"byte_end":71061,"line_start":588,"line_end":588,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71066,"byte_end":71069,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo\".repeatn(4), B(\"foofoofoofoo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71074,"byte_end":71127,"line_start":590,"line_end":590,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(b\"foo\".repeatn(0), B(\"\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71132,"byte_end":71173,"line_start":591,"line_end":591,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71178,"byte_end":71185,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71190,"byte_end":71213,"line_start":593,"line_end":593,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71218,"byte_end":71227,"line_start":594,"line_end":594,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71849,"byte_end":71861,"line_start":618,"line_end":618,"column_start":8,"column_end":20},"name":"contains_str","qualname":"::ext_slice::ByteSlice::contains_str","value":"fn <B> (&self, needle: B) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string contains the given needle.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string contains the given needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71480,"byte_end":71555,"line_start":604,"line_end":604,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71560,"byte_end":71563,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71568,"byte_end":71582,"line_start":606,"line_end":606,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71587,"byte_end":71590,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71595,"byte_end":71611,"line_start":608,"line_end":608,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71616,"byte_end":71619,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71624,"byte_end":71631,"line_start":610,"line_end":610,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71636,"byte_end":71660,"line_start":611,"line_end":611,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71665,"byte_end":71668,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".contains_str(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71673,"byte_end":71717,"line_start":613,"line_end":613,"column_start":5,"column_end":49}},{"value":"/ assert!(b\"foo bar\".contains_str(\"bar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71722,"byte_end":71766,"line_start":614,"line_end":614,"column_start":5,"column_end":49}},{"value":"/ assert!(!b\"foo\".contains_str(\"foobar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71771,"byte_end":71815,"line_start":615,"line_end":615,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71820,"byte_end":71827,"line_start":616,"line_end":616,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71832,"byte_end":71841,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72327,"byte_end":72342,"line_start":636,"line_end":636,"column_start":8,"column_end":23},"name":"starts_with_str","qualname":"::ext_slice::ByteSlice::starts_with_str","value":"fn <B> (&self, prefix: B) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string has the given prefix.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string has the given prefix.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":71953,"byte_end":72023,"line_start":622,"line_end":622,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72028,"byte_end":72031,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72036,"byte_end":72050,"line_start":624,"line_end":624,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72055,"byte_end":72058,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72063,"byte_end":72079,"line_start":626,"line_end":626,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72084,"byte_end":72087,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72092,"byte_end":72099,"line_start":628,"line_end":628,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72104,"byte_end":72128,"line_start":629,"line_end":629,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72133,"byte_end":72136,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".starts_with_str(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72141,"byte_end":72188,"line_start":631,"line_end":631,"column_start":5,"column_end":52}},{"value":"/ assert!(!b\"foo bar\".starts_with_str(\"bar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72193,"byte_end":72241,"line_start":632,"line_end":632,"column_start":5,"column_end":53}},{"value":"/ assert!(!b\"foo\".starts_with_str(\"foobar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72246,"byte_end":72293,"line_start":633,"line_end":633,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72298,"byte_end":72305,"line_start":634,"line_end":634,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72310,"byte_end":72319,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72819,"byte_end":72832,"line_start":654,"line_end":654,"column_start":8,"column_end":21},"name":"ends_with_str","qualname":"::ext_slice::ByteSlice::ends_with_str","value":"fn <B> (&self, suffix: B) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string has the given suffix.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string has the given suffix.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72451,"byte_end":72521,"line_start":640,"line_end":640,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72526,"byte_end":72529,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72534,"byte_end":72548,"line_start":642,"line_end":642,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72553,"byte_end":72556,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72561,"byte_end":72577,"line_start":644,"line_end":644,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72582,"byte_end":72585,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72590,"byte_end":72597,"line_start":646,"line_end":646,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72602,"byte_end":72626,"line_start":647,"line_end":647,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72631,"byte_end":72634,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".ends_with_str(\"bar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72639,"byte_end":72684,"line_start":649,"line_end":649,"column_start":5,"column_end":50}},{"value":"/ assert!(!b\"foo bar\".ends_with_str(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72689,"byte_end":72735,"line_start":650,"line_end":650,"column_start":5,"column_end":51}},{"value":"/ assert!(!b\"bar\".ends_with_str(\"foobar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72740,"byte_end":72785,"line_start":651,"line_end":651,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72790,"byte_end":72797,"line_start":652,"line_end":652,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72802,"byte_end":72811,"line_start":653,"line_end":653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74035,"byte_end":74039,"line_start":689,"line_end":689,"column_start":8,"column_end":12},"name":"find","qualname":"::ext_slice::ByteSlice::find","value":"fn <B> (&self, needle: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":72939,"byte_end":73005,"line_start":658,"line_end":658,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73010,"byte_end":73013,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73018,"byte_end":73085,"line_start":660,"line_end":660,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73090,"byte_end":73160,"line_start":661,"line_end":661,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73165,"byte_end":73168,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ Note that if you're are searching for the same needle in many","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73173,"byte_end":73238,"line_start":663,"line_end":663,"column_start":5,"column_end":70}},{"value":"/ different small haystacks, it may be faster to initialize a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73243,"byte_end":73306,"line_start":664,"line_end":664,"column_start":5,"column_end":68}},{"value":"/ [`Finder`](struct.Finder.html) once, and reuse it for each search.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73311,"byte_end":73381,"line_start":665,"line_end":665,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73386,"byte_end":73389,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73394,"byte_end":73410,"line_start":667,"line_end":667,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73415,"byte_end":73418,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73423,"byte_end":73495,"line_start":669,"line_end":669,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73500,"byte_end":73572,"line_start":670,"line_end":670,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73577,"byte_end":73624,"line_start":671,"line_end":671,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73629,"byte_end":73632,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73637,"byte_end":73706,"line_start":673,"line_end":673,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73711,"byte_end":73726,"line_start":674,"line_end":674,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73731,"byte_end":73734,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73739,"byte_end":73753,"line_start":676,"line_end":676,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73758,"byte_end":73761,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73766,"byte_end":73782,"line_start":678,"line_end":678,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73787,"byte_end":73790,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73795,"byte_end":73802,"line_start":680,"line_end":680,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73807,"byte_end":73831,"line_start":681,"line_end":681,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73836,"byte_end":73839,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar baz\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73844,"byte_end":73871,"line_start":683,"line_end":683,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(Some(0), s.find(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73876,"byte_end":73915,"line_start":684,"line_end":684,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(Some(4), s.find(\"bar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73920,"byte_end":73959,"line_start":685,"line_end":685,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(None, s.find(\"quux\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":73964,"byte_end":74001,"line_start":686,"line_end":686,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74006,"byte_end":74013,"line_start":687,"line_end":687,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74018,"byte_end":74027,"line_start":688,"line_end":688,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75327,"byte_end":75332,"line_start":726,"line_end":726,"column_start":8,"column_end":13},"name":"rfind","qualname":"::ext_slice::ByteSlice::rfind","value":"fn <B> (&self, needle: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74163,"byte_end":74228,"line_start":693,"line_end":693,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74233,"byte_end":74236,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74241,"byte_end":74308,"line_start":695,"line_end":695,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74313,"byte_end":74383,"line_start":696,"line_end":696,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74388,"byte_end":74391,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ Note that if you're are searching for the same needle in many","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74396,"byte_end":74461,"line_start":698,"line_end":698,"column_start":5,"column_end":70}},{"value":"/ different small haystacks, it may be faster to initialize a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74466,"byte_end":74529,"line_start":699,"line_end":699,"column_start":5,"column_end":68}},{"value":"/ [`FinderReverse`](struct.FinderReverse.html) once, and reuse it for","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74534,"byte_end":74605,"line_start":700,"line_end":700,"column_start":5,"column_end":76}},{"value":"/ each search.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74610,"byte_end":74626,"line_start":701,"line_end":701,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74631,"byte_end":74634,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74639,"byte_end":74655,"line_start":703,"line_end":703,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74660,"byte_end":74663,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74668,"byte_end":74740,"line_start":705,"line_end":705,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74745,"byte_end":74817,"line_start":706,"line_end":706,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74822,"byte_end":74869,"line_start":707,"line_end":707,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74874,"byte_end":74877,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74882,"byte_end":74951,"line_start":709,"line_end":709,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74956,"byte_end":74971,"line_start":710,"line_end":710,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74976,"byte_end":74979,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":74984,"byte_end":74998,"line_start":712,"line_end":712,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75003,"byte_end":75006,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75011,"byte_end":75027,"line_start":714,"line_end":714,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75032,"byte_end":75035,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75040,"byte_end":75047,"line_start":716,"line_end":716,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75052,"byte_end":75076,"line_start":717,"line_end":717,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75081,"byte_end":75084,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar baz\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75089,"byte_end":75116,"line_start":719,"line_end":719,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(Some(0), s.rfind(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75121,"byte_end":75161,"line_start":720,"line_end":720,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(4), s.rfind(\"bar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75166,"byte_end":75206,"line_start":721,"line_end":721,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(8), s.rfind(\"ba\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75211,"byte_end":75250,"line_start":722,"line_end":722,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(None, s.rfind(\"quux\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75255,"byte_end":75293,"line_start":723,"line_end":723,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75298,"byte_end":75305,"line_start":724,"line_end":724,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75310,"byte_end":75319,"line_start":725,"line_end":725,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76705,"byte_end":76714,"line_start":768,"line_end":768,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::ext_slice::ByteSlice::find_iter","value":"fn <'a, B> (&'a self, needle: &'a B) -> Find<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator of the non-overlapping occurrences of the given\n needle. The iterator yields byte offset positions indicating the start\n of each match.","sig":null,"attributes":[{"value":"/ Returns an iterator of the non-overlapping occurrences of the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75464,"byte_end":75535,"line_start":730,"line_end":730,"column_start":5,"column_end":76}},{"value":"/ needle. The iterator yields byte offset positions indicating the start","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75540,"byte_end":75614,"line_start":731,"line_end":731,"column_start":5,"column_end":79}},{"value":"/ of each match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75619,"byte_end":75637,"line_start":732,"line_end":732,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75642,"byte_end":75645,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75650,"byte_end":75666,"line_start":734,"line_end":734,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75671,"byte_end":75674,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75679,"byte_end":75751,"line_start":736,"line_end":736,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75756,"byte_end":75828,"line_start":737,"line_end":737,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75833,"byte_end":75880,"line_start":738,"line_end":738,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75885,"byte_end":75888,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75893,"byte_end":75962,"line_start":740,"line_end":740,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75967,"byte_end":75982,"line_start":741,"line_end":741,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75987,"byte_end":75990,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":75995,"byte_end":76009,"line_start":743,"line_end":743,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76014,"byte_end":76017,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76022,"byte_end":76038,"line_start":745,"line_end":745,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76043,"byte_end":76046,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76051,"byte_end":76058,"line_start":747,"line_end":747,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76063,"byte_end":76087,"line_start":748,"line_end":748,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76092,"byte_end":76095,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar foo foo quux foo\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76100,"byte_end":76140,"line_start":750,"line_end":750,"column_start":5,"column_end":45}},{"value":"/ let matches: Vec<usize> = s.find_iter(\"foo\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76145,"byte_end":76204,"line_start":751,"line_end":751,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(matches, vec![0, 8, 12, 21]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76209,"byte_end":76253,"line_start":752,"line_end":752,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76258,"byte_end":76265,"line_start":753,"line_end":753,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76270,"byte_end":76273,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ An empty string matches at every position, including the position","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76278,"byte_end":76347,"line_start":755,"line_end":755,"column_start":5,"column_end":74}},{"value":"/ immediately following the last byte:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76352,"byte_end":76392,"line_start":756,"line_end":756,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76397,"byte_end":76400,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76405,"byte_end":76412,"line_start":758,"line_end":758,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76417,"byte_end":76441,"line_start":759,"line_end":759,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76446,"byte_end":76449,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"foo\".find_iter(\"\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76454,"byte_end":76515,"line_start":761,"line_end":761,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(matches, vec![0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76520,"byte_end":76562,"line_start":762,"line_end":762,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76567,"byte_end":76570,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"\".find_iter(\"\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76575,"byte_end":76633,"line_start":764,"line_end":764,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(matches, vec![0]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76638,"byte_end":76671,"line_start":765,"line_end":765,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76676,"byte_end":76683,"line_start":766,"line_end":766,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76688,"byte_end":76697,"line_start":767,"line_end":767,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78124,"byte_end":78134,"line_start":813,"line_end":813,"column_start":8,"column_end":18},"name":"rfind_iter","qualname":"::ext_slice::ByteSlice::rfind_iter","value":"fn <'a, B> (&'a self, needle: &'a B) -> FindReverse<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator of the non-overlapping occurrences of the given\n needle in reverse. The iterator yields byte offset positions indicating\n the start of each match.","sig":null,"attributes":[{"value":"/ Returns an iterator of the non-overlapping occurrences of the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76869,"byte_end":76940,"line_start":775,"line_end":775,"column_start":5,"column_end":76}},{"value":"/ needle in reverse. The iterator yields byte offset positions indicating","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":76945,"byte_end":77020,"line_start":776,"line_end":776,"column_start":5,"column_end":80}},{"value":"/ the start of each match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77025,"byte_end":77053,"line_start":777,"line_end":777,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77058,"byte_end":77061,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77066,"byte_end":77082,"line_start":779,"line_end":779,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77087,"byte_end":77090,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77095,"byte_end":77167,"line_start":781,"line_end":781,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77172,"byte_end":77244,"line_start":782,"line_end":782,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77249,"byte_end":77296,"line_start":783,"line_end":783,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77301,"byte_end":77304,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77309,"byte_end":77378,"line_start":785,"line_end":785,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77383,"byte_end":77398,"line_start":786,"line_end":786,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77403,"byte_end":77406,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77411,"byte_end":77425,"line_start":788,"line_end":788,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77430,"byte_end":77433,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77438,"byte_end":77454,"line_start":790,"line_end":790,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77459,"byte_end":77462,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77467,"byte_end":77474,"line_start":792,"line_end":792,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77479,"byte_end":77503,"line_start":793,"line_end":793,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77508,"byte_end":77511,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar foo foo quux foo\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77516,"byte_end":77556,"line_start":795,"line_end":795,"column_start":5,"column_end":45}},{"value":"/ let matches: Vec<usize> = s.rfind_iter(\"foo\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77561,"byte_end":77621,"line_start":796,"line_end":796,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(matches, vec![21, 12, 8, 0]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77626,"byte_end":77670,"line_start":797,"line_end":797,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77675,"byte_end":77682,"line_start":798,"line_end":798,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77687,"byte_end":77690,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ An empty string matches at every position, including the position","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77695,"byte_end":77764,"line_start":800,"line_end":800,"column_start":5,"column_end":74}},{"value":"/ immediately following the last byte:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77769,"byte_end":77809,"line_start":801,"line_end":801,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77814,"byte_end":77817,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77822,"byte_end":77829,"line_start":803,"line_end":803,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77834,"byte_end":77858,"line_start":804,"line_end":804,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77863,"byte_end":77866,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"foo\".rfind_iter(\"\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77871,"byte_end":77933,"line_start":806,"line_end":806,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(matches, vec![3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77938,"byte_end":77980,"line_start":807,"line_end":807,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77985,"byte_end":77988,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"\".rfind_iter(\"\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":77993,"byte_end":78052,"line_start":809,"line_end":809,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(matches, vec![0]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78057,"byte_end":78090,"line_start":810,"line_end":810,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78095,"byte_end":78102,"line_start":811,"line_end":811,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78107,"byte_end":78116,"line_start":812,"line_end":812,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78715,"byte_end":78724,"line_start":834,"line_end":834,"column_start":8,"column_end":17},"name":"find_byte","qualname":"::ext_slice::ByteSlice::find_byte","value":"fn (&self, byte: u8) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given byte. If the\n byte does not occur in this byte string, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given byte. If the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78303,"byte_end":78374,"line_start":820,"line_end":820,"column_start":5,"column_end":76}},{"value":"/ byte does not occur in this byte string, then `None` is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78379,"byte_end":78448,"line_start":821,"line_end":821,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78453,"byte_end":78456,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78461,"byte_end":78475,"line_start":823,"line_end":823,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78480,"byte_end":78483,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78488,"byte_end":78504,"line_start":825,"line_end":825,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78509,"byte_end":78512,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78517,"byte_end":78524,"line_start":827,"line_end":827,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78529,"byte_end":78553,"line_start":828,"line_end":828,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78558,"byte_end":78561,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".find_byte(b'z'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78566,"byte_end":78623,"line_start":830,"line_end":830,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(None, b\"foo bar baz\".find_byte(b'y'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78628,"byte_end":78681,"line_start":831,"line_end":831,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78686,"byte_end":78693,"line_start":832,"line_end":832,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78698,"byte_end":78707,"line_start":833,"line_end":833,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79223,"byte_end":79233,"line_start":852,"line_end":852,"column_start":8,"column_end":18},"name":"rfind_byte","qualname":"::ext_slice::ByteSlice::rfind_byte","value":"fn (&self, byte: u8) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given byte. If the\n byte does not occur in this byte string, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given byte. If the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78810,"byte_end":78880,"line_start":838,"line_end":838,"column_start":5,"column_end":75}},{"value":"/ byte does not occur in this byte string, then `None` is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78885,"byte_end":78954,"line_start":839,"line_end":839,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78959,"byte_end":78962,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78967,"byte_end":78981,"line_start":841,"line_end":841,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78986,"byte_end":78989,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":78994,"byte_end":79010,"line_start":843,"line_end":843,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79015,"byte_end":79018,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79023,"byte_end":79030,"line_start":845,"line_end":845,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79035,"byte_end":79059,"line_start":846,"line_end":846,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79064,"byte_end":79067,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".rfind_byte(b'z'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79072,"byte_end":79130,"line_start":848,"line_end":848,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(None, b\"foo bar baz\".rfind_byte(b'y'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79135,"byte_end":79189,"line_start":849,"line_end":849,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79194,"byte_end":79201,"line_start":850,"line_end":850,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79206,"byte_end":79215,"line_start":851,"line_end":851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80024,"byte_end":80033,"line_start":876,"line_end":876,"column_start":8,"column_end":17},"name":"find_char","qualname":"::ext_slice::ByteSlice::find_char","value":"fn (&self, ch: char) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given codepoint.\n If the codepoint does not occur in this byte string, then `None` is\n returned.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79320,"byte_end":79389,"line_start":856,"line_end":856,"column_start":5,"column_end":74}},{"value":"/ If the codepoint does not occur in this byte string, then `None` is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79394,"byte_end":79465,"line_start":857,"line_end":857,"column_start":5,"column_end":76}},{"value":"/ returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79470,"byte_end":79483,"line_start":858,"line_end":858,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79488,"byte_end":79491,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ Note that if one searches for the replacement codepoint, `\\u{FFFD}`,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79496,"byte_end":79568,"line_start":860,"line_end":860,"column_start":5,"column_end":77}},{"value":"/ then only explicit occurrences of that encoding will be found. Invalid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79573,"byte_end":79647,"line_start":861,"line_end":861,"column_start":5,"column_end":79}},{"value":"/ UTF-8 sequences will not be matched.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79652,"byte_end":79692,"line_start":862,"line_end":862,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79697,"byte_end":79700,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79705,"byte_end":79719,"line_start":864,"line_end":864,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79724,"byte_end":79727,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79732,"byte_end":79748,"line_start":866,"line_end":866,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79753,"byte_end":79756,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79761,"byte_end":79768,"line_start":868,"line_end":868,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79773,"byte_end":79802,"line_start":869,"line_end":869,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79807,"byte_end":79810,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".find_char('z'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79815,"byte_end":79871,"line_start":871,"line_end":871,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(Some(4), B(\"αβγγδ\").find_char('γ'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79876,"byte_end":79933,"line_start":872,"line_end":872,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(None, b\"foo bar baz\".find_char('y'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79938,"byte_end":79990,"line_start":873,"line_end":873,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":79995,"byte_end":80002,"line_start":874,"line_end":874,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80007,"byte_end":80016,"line_start":875,"line_end":875,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80834,"byte_end":80844,"line_start":900,"line_end":900,"column_start":8,"column_end":18},"name":"rfind_char","qualname":"::ext_slice::ByteSlice::rfind_char","value":"fn (&self, ch: char) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given codepoint.\n If the codepoint does not occur in this byte string, then `None` is\n returned.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80128,"byte_end":80196,"line_start":880,"line_end":880,"column_start":5,"column_end":73}},{"value":"/ If the codepoint does not occur in this byte string, then `None` is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80201,"byte_end":80272,"line_start":881,"line_end":881,"column_start":5,"column_end":76}},{"value":"/ returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80277,"byte_end":80290,"line_start":882,"line_end":882,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80295,"byte_end":80298,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ Note that if one searches for the replacement codepoint, `\\u{FFFD}`,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80303,"byte_end":80375,"line_start":884,"line_end":884,"column_start":5,"column_end":77}},{"value":"/ then only explicit occurrences of that encoding will be found. Invalid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80380,"byte_end":80454,"line_start":885,"line_end":885,"column_start":5,"column_end":79}},{"value":"/ UTF-8 sequences will not be matched.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80459,"byte_end":80499,"line_start":886,"line_end":886,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80504,"byte_end":80507,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80512,"byte_end":80526,"line_start":888,"line_end":888,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80531,"byte_end":80534,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80539,"byte_end":80555,"line_start":890,"line_end":890,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80560,"byte_end":80563,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80568,"byte_end":80575,"line_start":892,"line_end":892,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80580,"byte_end":80609,"line_start":893,"line_end":893,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80614,"byte_end":80617,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".rfind_char('z'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80622,"byte_end":80679,"line_start":895,"line_end":895,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(Some(6), B(\"αβγγδ\").rfind_char('γ'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80684,"byte_end":80742,"line_start":896,"line_end":896,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(None, b\"foo bar baz\".rfind_char('y'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80747,"byte_end":80800,"line_start":897,"line_end":897,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80805,"byte_end":80812,"line_start":898,"line_end":898,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80817,"byte_end":80826,"line_start":899,"line_end":899,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82219,"byte_end":82231,"line_start":937,"line_end":937,"column_start":8,"column_end":20},"name":"find_byteset","qualname":"::ext_slice::ByteSlice::find_byteset","value":"fn <B> (&self, byteset: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of any of the bytes in the\n provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of any of the bytes in the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":80940,"byte_end":81012,"line_start":904,"line_end":904,"column_start":5,"column_end":77}},{"value":"/ provided set.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81017,"byte_end":81034,"line_start":905,"line_end":905,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81039,"byte_end":81042,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81047,"byte_end":81117,"line_start":907,"line_end":907,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81122,"byte_end":81196,"line_start":908,"line_end":908,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81201,"byte_end":81275,"line_start":909,"line_end":909,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81280,"byte_end":81346,"line_start":910,"line_end":910,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81351,"byte_end":81389,"line_start":911,"line_end":911,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81394,"byte_end":81397,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81402,"byte_end":81468,"line_start":913,"line_end":913,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81473,"byte_end":81525,"line_start":914,"line_end":914,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81530,"byte_end":81533,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81538,"byte_end":81554,"line_start":916,"line_end":916,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81559,"byte_end":81562,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81567,"byte_end":81639,"line_start":918,"line_end":918,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81644,"byte_end":81717,"line_start":919,"line_end":919,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81722,"byte_end":81775,"line_start":920,"line_end":920,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81780,"byte_end":81783,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81788,"byte_end":81857,"line_start":922,"line_end":922,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81862,"byte_end":81877,"line_start":923,"line_end":923,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81882,"byte_end":81885,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81890,"byte_end":81904,"line_start":925,"line_end":925,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81909,"byte_end":81912,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81917,"byte_end":81933,"line_start":927,"line_end":927,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81938,"byte_end":81941,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81946,"byte_end":81953,"line_start":929,"line_end":929,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81958,"byte_end":81982,"line_start":930,"line_end":930,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81987,"byte_end":81990,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".find_byteset(b\"zr\"), Some(6));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":81995,"byte_end":82055,"line_start":932,"line_end":932,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(b\"foo baz bar\".find_byteset(b\"bzr\"), Some(4));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82060,"byte_end":82121,"line_start":933,"line_end":933,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(None, b\"foo baz bar\".find_byteset(b\"\\t\\n\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82126,"byte_end":82185,"line_start":934,"line_end":934,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82190,"byte_end":82197,"line_start":935,"line_end":935,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82202,"byte_end":82211,"line_start":936,"line_end":936,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83666,"byte_end":83682,"line_start":974,"line_end":974,"column_start":8,"column_end":24},"name":"find_not_byteset","qualname":"::ext_slice::ByteSlice::find_not_byteset","value":"fn <B> (&self, byteset: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of a byte that is not a member\n of the provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of a byte that is not a member","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82354,"byte_end":82430,"line_start":941,"line_end":941,"column_start":5,"column_end":81}},{"value":"/ of the provided set.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82435,"byte_end":82459,"line_start":942,"line_end":942,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82464,"byte_end":82467,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82472,"byte_end":82542,"line_start":944,"line_end":944,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82547,"byte_end":82621,"line_start":945,"line_end":945,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82626,"byte_end":82700,"line_start":946,"line_end":946,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82705,"byte_end":82771,"line_start":947,"line_end":947,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82776,"byte_end":82814,"line_start":948,"line_end":948,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82819,"byte_end":82822,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82827,"byte_end":82893,"line_start":950,"line_end":950,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82898,"byte_end":82950,"line_start":951,"line_end":951,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82955,"byte_end":82958,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82963,"byte_end":82979,"line_start":953,"line_end":953,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82984,"byte_end":82987,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":82992,"byte_end":83064,"line_start":955,"line_end":955,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83069,"byte_end":83142,"line_start":956,"line_end":956,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83147,"byte_end":83200,"line_start":957,"line_end":957,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83205,"byte_end":83208,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83213,"byte_end":83282,"line_start":959,"line_end":959,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83287,"byte_end":83302,"line_start":960,"line_end":960,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83307,"byte_end":83310,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83315,"byte_end":83329,"line_start":962,"line_end":962,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83334,"byte_end":83337,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83342,"byte_end":83358,"line_start":964,"line_end":964,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83363,"byte_end":83366,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83371,"byte_end":83378,"line_start":966,"line_end":966,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83383,"byte_end":83407,"line_start":967,"line_end":967,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83412,"byte_end":83415,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".find_not_byteset(b\"fo \"), Some(4));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83420,"byte_end":83485,"line_start":969,"line_end":969,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(b\"\\t\\tbaz bar\".find_not_byteset(b\" \\t\\r\\n\"), Some(2));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83490,"byte_end":83559,"line_start":970,"line_end":970,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(b\"foo\\nbaz\\tbar\".find_not_byteset(b\"\\t\\n\"), Some(0));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83564,"byte_end":83632,"line_start":971,"line_end":971,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83637,"byte_end":83644,"line_start":972,"line_end":972,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83649,"byte_end":83658,"line_start":973,"line_end":973,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85095,"byte_end":85108,"line_start":1011,"line_end":1011,"column_start":8,"column_end":21},"name":"rfind_byteset","qualname":"::ext_slice::ByteSlice::rfind_byteset","value":"fn <B> (&self, byteset: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of any of the bytes in the\n provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of any of the bytes in the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83809,"byte_end":83880,"line_start":978,"line_end":978,"column_start":5,"column_end":76}},{"value":"/ provided set.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83885,"byte_end":83902,"line_start":979,"line_end":979,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83907,"byte_end":83910,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83915,"byte_end":83985,"line_start":981,"line_end":981,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":83990,"byte_end":84064,"line_start":982,"line_end":982,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84069,"byte_end":84143,"line_start":983,"line_end":983,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84148,"byte_end":84214,"line_start":984,"line_end":984,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84219,"byte_end":84257,"line_start":985,"line_end":985,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84262,"byte_end":84265,"line_start":986,"line_end":986,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and duplicate","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84270,"byte_end":84346,"line_start":987,"line_end":987,"column_start":5,"column_end":81}},{"value":"/ bytes present in its body are ignored.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84351,"byte_end":84393,"line_start":988,"line_end":988,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84398,"byte_end":84401,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84406,"byte_end":84422,"line_start":990,"line_end":990,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84427,"byte_end":84430,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84435,"byte_end":84507,"line_start":992,"line_end":992,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84512,"byte_end":84585,"line_start":993,"line_end":993,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84590,"byte_end":84643,"line_start":994,"line_end":994,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84648,"byte_end":84651,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84656,"byte_end":84725,"line_start":996,"line_end":996,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84730,"byte_end":84745,"line_start":997,"line_end":997,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84750,"byte_end":84753,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84758,"byte_end":84772,"line_start":999,"line_end":999,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84777,"byte_end":84780,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84785,"byte_end":84801,"line_start":1001,"line_end":1001,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84806,"byte_end":84809,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84814,"byte_end":84821,"line_start":1003,"line_end":1003,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84826,"byte_end":84850,"line_start":1004,"line_end":1004,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84855,"byte_end":84858,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".rfind_byteset(b\"agb\"), Some(9));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84863,"byte_end":84925,"line_start":1006,"line_end":1006,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_byteset(b\"rabz \"), Some(10));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":84930,"byte_end":84995,"line_start":1007,"line_end":1007,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_byteset(b\"\\n123\"), None);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85000,"byte_end":85061,"line_start":1008,"line_end":1008,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85066,"byte_end":85073,"line_start":1009,"line_end":1009,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85078,"byte_end":85087,"line_start":1010,"line_end":1010,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86546,"byte_end":86563,"line_start":1048,"line_end":1048,"column_start":8,"column_end":25},"name":"rfind_not_byteset","qualname":"::ext_slice::ByteSlice::rfind_not_byteset","value":"fn <B> (&self, byteset: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of a byte that is not a member\n of the provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of a byte that is not a member","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85232,"byte_end":85307,"line_start":1015,"line_end":1015,"column_start":5,"column_end":80}},{"value":"/ of the provided set.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85312,"byte_end":85336,"line_start":1016,"line_end":1016,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85341,"byte_end":85344,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85349,"byte_end":85419,"line_start":1018,"line_end":1018,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85424,"byte_end":85498,"line_start":1019,"line_end":1019,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85503,"byte_end":85577,"line_start":1020,"line_end":1020,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85582,"byte_end":85648,"line_start":1021,"line_end":1021,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85653,"byte_end":85691,"line_start":1022,"line_end":1022,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85696,"byte_end":85699,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85704,"byte_end":85770,"line_start":1024,"line_end":1024,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85775,"byte_end":85827,"line_start":1025,"line_end":1025,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85832,"byte_end":85835,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85840,"byte_end":85856,"line_start":1027,"line_end":1027,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85861,"byte_end":85864,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85869,"byte_end":85941,"line_start":1029,"line_end":1029,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":85946,"byte_end":86019,"line_start":1030,"line_end":1030,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86024,"byte_end":86077,"line_start":1031,"line_end":1031,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86082,"byte_end":86085,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86090,"byte_end":86159,"line_start":1033,"line_end":1033,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86164,"byte_end":86179,"line_start":1034,"line_end":1034,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86184,"byte_end":86187,"line_start":1035,"line_end":1035,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86192,"byte_end":86206,"line_start":1036,"line_end":1036,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86211,"byte_end":86214,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86219,"byte_end":86235,"line_start":1038,"line_end":1038,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86240,"byte_end":86243,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86248,"byte_end":86255,"line_start":1040,"line_end":1040,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86260,"byte_end":86284,"line_start":1041,"line_end":1041,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86289,"byte_end":86292,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz,\\t\".rfind_not_byteset(b\",\\t\"), Some(10));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86297,"byte_end":86367,"line_start":1043,"line_end":1043,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_not_byteset(b\"rabz \"), Some(2));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86372,"byte_end":86440,"line_start":1044,"line_end":1044,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(None, b\"foo baz bar\".rfind_not_byteset(b\"barfoz \"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86445,"byte_end":86512,"line_start":1045,"line_end":1045,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86517,"byte_end":86524,"line_start":1046,"line_end":1046,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86529,"byte_end":86538,"line_start":1047,"line_end":1047,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87338,"byte_end":87344,"line_start":1075,"line_end":1075,"column_start":8,"column_end":14},"name":"fields","qualname":"::ext_slice::ByteSlice::fields","value":"fn (&self) -> Fields","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the fields in a byte string, separated by\n contiguous whitespace.","sig":null,"attributes":[{"value":"/ Returns an iterator over the fields in a byte string, separated by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86691,"byte_end":86761,"line_start":1052,"line_end":1052,"column_start":5,"column_end":75}},{"value":"/ contiguous whitespace.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86766,"byte_end":86792,"line_start":1053,"line_end":1053,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86797,"byte_end":86800,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86805,"byte_end":86818,"line_start":1055,"line_end":1055,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86823,"byte_end":86826,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86831,"byte_end":86847,"line_start":1057,"line_end":1057,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86852,"byte_end":86855,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86860,"byte_end":86867,"line_start":1059,"line_end":1059,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86872,"byte_end":86901,"line_start":1060,"line_end":1060,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86906,"byte_end":86909,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"  foo\\tbar\\t\\u{2003}\\nquux   \\n\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86914,"byte_end":86963,"line_start":1062,"line_end":1062,"column_start":5,"column_end":54}},{"value":"/ let fields: Vec<&[u8]> = s.fields().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":86968,"byte_end":87018,"line_start":1063,"line_end":1063,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(fields, vec![B(\"foo\"), B(\"bar\"), B(\"quux\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87023,"byte_end":87083,"line_start":1064,"line_end":1064,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87088,"byte_end":87095,"line_start":1065,"line_end":1065,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87100,"byte_end":87103,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ A byte string consisting of just whitespace yields no elements:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87108,"byte_end":87175,"line_start":1067,"line_end":1067,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87180,"byte_end":87183,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87188,"byte_end":87195,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87200,"byte_end":87229,"line_start":1070,"line_end":1070,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87234,"byte_end":87237,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(0, B(\"  \\n\\t\\u{2003}\\n  \\t\").fields().count());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87242,"byte_end":87304,"line_start":1072,"line_end":1072,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87309,"byte_end":87316,"line_start":1073,"line_end":1073,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87321,"byte_end":87330,"line_start":1074,"line_end":1074,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88326,"byte_end":88337,"line_start":1107,"line_end":1107,"column_start":8,"column_end":19},"name":"fields_with","qualname":"::ext_slice::ByteSlice::fields_with","value":"fn <F> (&self, f: F) -> FieldsWith<F>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the fields in a byte string, separated by\n contiguous codepoints satisfying the given predicate.","sig":null,"attributes":[{"value":"/ Returns an iterator over the fields in a byte string, separated by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87412,"byte_end":87482,"line_start":1079,"line_end":1079,"column_start":5,"column_end":75}},{"value":"/ contiguous codepoints satisfying the given predicate.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87487,"byte_end":87544,"line_start":1080,"line_end":1080,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87549,"byte_end":87552,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then the given closure will","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87557,"byte_end":87628,"line_start":1082,"line_end":1082,"column_start":5,"column_end":76}},{"value":"/ be called with a Unicode replacement codepoint when invalid UTF-8","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87633,"byte_end":87702,"line_start":1083,"line_end":1083,"column_start":5,"column_end":74}},{"value":"/ bytes are seen.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87707,"byte_end":87726,"line_start":1084,"line_end":1084,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87731,"byte_end":87734,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87739,"byte_end":87752,"line_start":1086,"line_end":1086,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87757,"byte_end":87760,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87765,"byte_end":87781,"line_start":1088,"line_end":1088,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87786,"byte_end":87789,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87794,"byte_end":87801,"line_start":1090,"line_end":1090,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87806,"byte_end":87835,"line_start":1091,"line_end":1091,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87840,"byte_end":87843,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo999999bar1quux123456\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87848,"byte_end":87890,"line_start":1093,"line_end":1093,"column_start":5,"column_end":47}},{"value":"/ let fields: Vec<&[u8]> = s.fields_with(|c| c.is_numeric()).collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87895,"byte_end":87968,"line_start":1094,"line_end":1094,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(fields, vec![B(\"foo\"), B(\"bar\"), B(\"quux\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":87973,"byte_end":88033,"line_start":1095,"line_end":1095,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88038,"byte_end":88045,"line_start":1096,"line_end":1096,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88050,"byte_end":88053,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ A byte string consisting of all codepoints satisfying the predicate","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88058,"byte_end":88129,"line_start":1098,"line_end":1098,"column_start":5,"column_end":76}},{"value":"/ yields no elements:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88134,"byte_end":88157,"line_start":1099,"line_end":1099,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88162,"byte_end":88165,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88170,"byte_end":88177,"line_start":1101,"line_end":1101,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88182,"byte_end":88206,"line_start":1102,"line_end":1102,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88211,"byte_end":88214,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(0, b\"1911354563\".fields_with(|c| c.is_numeric()).count());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88219,"byte_end":88292,"line_start":1104,"line_end":1104,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88297,"byte_end":88304,"line_start":1105,"line_end":1105,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88309,"byte_end":88318,"line_start":1106,"line_end":1106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91564,"byte_end":91573,"line_start":1200,"line_end":1200,"column_start":8,"column_end":17},"name":"split_str","qualname":"::ext_slice::ByteSlice::split_str","value":"fn <'a, B> (&'a self, splitter: &'a B) -> Split<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over substrings of this byte string, separated\n by the given byte string. Each element yielded is guaranteed not to\n include the splitter substring.","sig":null,"attributes":[{"value":"/ Returns an iterator over substrings of this byte string, separated","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88449,"byte_end":88519,"line_start":1111,"line_end":1111,"column_start":5,"column_end":75}},{"value":"/ by the given byte string. Each element yielded is guaranteed not to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88524,"byte_end":88595,"line_start":1112,"line_end":1112,"column_start":5,"column_end":76}},{"value":"/ include the splitter substring.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88600,"byte_end":88635,"line_start":1113,"line_end":1113,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88640,"byte_end":88643,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ The splitter may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88648,"byte_end":88717,"line_start":1115,"line_end":1115,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88722,"byte_end":88792,"line_start":1116,"line_end":1116,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88797,"byte_end":88800,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88805,"byte_end":88819,"line_start":1118,"line_end":1118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88824,"byte_end":88827,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88832,"byte_end":88848,"line_start":1120,"line_end":1120,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88853,"byte_end":88856,"line_start":1121,"line_end":1121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88861,"byte_end":88868,"line_start":1122,"line_end":1122,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88873,"byte_end":88902,"line_start":1123,"line_end":1123,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88907,"byte_end":88910,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"Mary had a little lamb\".split_str(\" \").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88915,"byte_end":88990,"line_start":1125,"line_end":1125,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":88995,"byte_end":89018,"line_start":1126,"line_end":1126,"column_start":5,"column_end":28}},{"value":"/     B(\"Mary\"), B(\"had\"), B(\"a\"), B(\"little\"), B(\"lamb\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89023,"byte_end":89083,"line_start":1127,"line_end":1127,"column_start":5,"column_end":65}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89088,"byte_end":89095,"line_start":1128,"line_end":1128,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89100,"byte_end":89103,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"\".split_str(\"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89108,"byte_end":89161,"line_start":1130,"line_end":1130,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89166,"byte_end":89195,"line_start":1131,"line_end":1131,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89200,"byte_end":89203,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lionXXtigerXleopard\".split_str(\"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89208,"byte_end":89280,"line_start":1133,"line_end":1133,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"\"), B(\"tiger\"), B(\"leopard\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89285,"byte_end":89353,"line_start":1134,"line_end":1134,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89358,"byte_end":89361,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lion::tiger::leopard\".split_str(\"::\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89366,"byte_end":89440,"line_start":1136,"line_end":1136,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"tiger\"), B(\"leopard\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89445,"byte_end":89506,"line_start":1137,"line_end":1137,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89511,"byte_end":89518,"line_start":1138,"line_end":1138,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89523,"byte_end":89526,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ If a string contains multiple contiguous separators, you will end up","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89531,"byte_end":89603,"line_start":1140,"line_end":1140,"column_start":5,"column_end":77}},{"value":"/ with empty strings yielded by the iterator:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89608,"byte_end":89655,"line_start":1141,"line_end":1141,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89660,"byte_end":89663,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89668,"byte_end":89675,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89680,"byte_end":89709,"line_start":1144,"line_end":1144,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89714,"byte_end":89717,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"||||a||b|c\".split_str(\"|\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89722,"byte_end":89785,"line_start":1146,"line_end":1146,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89790,"byte_end":89813,"line_start":1147,"line_end":1147,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"\"), B(\"\"), B(\"\"), B(\"a\"), B(\"\"), B(\"b\"), B(\"c\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89818,"byte_end":89884,"line_start":1148,"line_end":1148,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89889,"byte_end":89896,"line_start":1149,"line_end":1149,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89901,"byte_end":89904,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"(///)\".split_str(\"/\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89909,"byte_end":89967,"line_start":1151,"line_end":1151,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(x, vec![B(\"(\"), B(\"\"), B(\"\"), B(\")\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":89972,"byte_end":90026,"line_start":1152,"line_end":1152,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90031,"byte_end":90038,"line_start":1153,"line_end":1153,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90043,"byte_end":90046,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ Separators at the start or end of a string are neighbored by empty","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90051,"byte_end":90121,"line_start":1155,"line_end":1155,"column_start":5,"column_end":75}},{"value":"/ strings.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90126,"byte_end":90138,"line_start":1156,"line_end":1156,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90143,"byte_end":90146,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90151,"byte_end":90158,"line_start":1158,"line_end":1158,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90163,"byte_end":90192,"line_start":1159,"line_end":1159,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90197,"byte_end":90200,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"010\".split_str(\"0\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90205,"byte_end":90261,"line_start":1161,"line_end":1161,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(\"1\"), B(\"\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90266,"byte_end":90312,"line_start":1162,"line_end":1162,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90317,"byte_end":90324,"line_start":1163,"line_end":1163,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90329,"byte_end":90332,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ When the empty string is used as a separator, it splits every **byte**","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90337,"byte_end":90411,"line_start":1165,"line_end":1165,"column_start":5,"column_end":79}},{"value":"/ in the byte string, along with the beginning and end of the byte","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90416,"byte_end":90484,"line_start":1166,"line_end":1166,"column_start":5,"column_end":73}},{"value":"/ string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90489,"byte_end":90500,"line_start":1167,"line_end":1167,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90505,"byte_end":90508,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90513,"byte_end":90520,"line_start":1169,"line_end":1169,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90525,"byte_end":90554,"line_start":1170,"line_end":1170,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90559,"byte_end":90562,"line_start":1171,"line_end":1171,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"rust\".split_str(\"\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90567,"byte_end":90623,"line_start":1172,"line_end":1172,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90628,"byte_end":90651,"line_start":1173,"line_end":1173,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"r\"), B(\"u\"), B(\"s\"), B(\"t\"), B(\"\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90656,"byte_end":90709,"line_start":1174,"line_end":1174,"column_start":5,"column_end":58}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90714,"byte_end":90721,"line_start":1175,"line_end":1175,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90726,"byte_end":90729,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ // Splitting by an empty string is not UTF-8 aware. Elements yielded","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90734,"byte_end":90806,"line_start":1177,"line_end":1177,"column_start":5,"column_end":77}},{"value":"/ // may not be valid UTF-8!","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90811,"byte_end":90841,"line_start":1178,"line_end":1178,"column_start":5,"column_end":35}},{"value":"/ let x: Vec<&[u8]> = B(\"☃\").split_str(\"\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90846,"byte_end":90903,"line_start":1179,"line_end":1179,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90908,"byte_end":90931,"line_start":1180,"line_end":1180,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(b\"\\xE2\"), B(b\"\\x98\"), B(b\"\\x83\"), B(\"\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90936,"byte_end":90993,"line_start":1181,"line_end":1181,"column_start":5,"column_end":62}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":90998,"byte_end":91005,"line_start":1182,"line_end":1182,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91010,"byte_end":91017,"line_start":1183,"line_end":1183,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91022,"byte_end":91025,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ Contiguous separators, especially whitespace, can lead to possibly","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91030,"byte_end":91100,"line_start":1185,"line_end":1185,"column_start":5,"column_end":75}},{"value":"/ surprising behavior. For example, this code is correct:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91105,"byte_end":91164,"line_start":1186,"line_end":1186,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91169,"byte_end":91172,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91177,"byte_end":91184,"line_start":1188,"line_end":1188,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91189,"byte_end":91218,"line_start":1189,"line_end":1189,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91223,"byte_end":91226,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"    a  b c\".split_str(\" \").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91231,"byte_end":91294,"line_start":1191,"line_end":1191,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91299,"byte_end":91322,"line_start":1192,"line_end":1192,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"\"), B(\"\"), B(\"\"), B(\"a\"), B(\"\"), B(\"b\"), B(\"c\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91327,"byte_end":91393,"line_start":1193,"line_end":1193,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91398,"byte_end":91405,"line_start":1194,"line_end":1194,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91410,"byte_end":91417,"line_start":1195,"line_end":1195,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91422,"byte_end":91425,"line_start":1196,"line_end":1196,"column_start":5,"column_end":8}},{"value":"/ It does *not* give you `[\"a\", \"b\", \"c\"]`. For that behavior, use","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91430,"byte_end":91498,"line_start":1197,"line_end":1197,"column_start":5,"column_end":73}},{"value":"/ [`fields`](#method.fields) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91503,"byte_end":91542,"line_start":1198,"line_end":1198,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91547,"byte_end":91556,"line_start":1199,"line_end":1199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94793,"byte_end":94803,"line_start":1294,"line_end":1294,"column_start":8,"column_end":18},"name":"rsplit_str","qualname":"::ext_slice::ByteSlice::rsplit_str","value":"fn <'a, B> (&'a self, splitter: &'a B) -> SplitReverse<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over substrings of this byte string, separated by\n the given byte string, in reverse. Each element yielded is guaranteed\n not to include the splitter substring.","sig":null,"attributes":[{"value":"/ Returns an iterator over substrings of this byte string, separated by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91734,"byte_end":91807,"line_start":1207,"line_end":1207,"column_start":5,"column_end":78}},{"value":"/ the given byte string, in reverse. Each element yielded is guaranteed","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91812,"byte_end":91885,"line_start":1208,"line_end":1208,"column_start":5,"column_end":78}},{"value":"/ not to include the splitter substring.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91890,"byte_end":91932,"line_start":1209,"line_end":1209,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91937,"byte_end":91940,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ The splitter may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":91945,"byte_end":92014,"line_start":1211,"line_end":1211,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92019,"byte_end":92089,"line_start":1212,"line_end":1212,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92094,"byte_end":92097,"line_start":1213,"line_end":1213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92102,"byte_end":92116,"line_start":1214,"line_end":1214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92121,"byte_end":92124,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92129,"byte_end":92145,"line_start":1216,"line_end":1216,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92150,"byte_end":92153,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92158,"byte_end":92165,"line_start":1218,"line_end":1218,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92170,"byte_end":92199,"line_start":1219,"line_end":1219,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92204,"byte_end":92207,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> =","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92212,"byte_end":92235,"line_start":1221,"line_end":1221,"column_start":5,"column_end":28}},{"value":"/     b\"Mary had a little lamb\".rsplit_str(\" \").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92240,"byte_end":92300,"line_start":1222,"line_end":1222,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92305,"byte_end":92328,"line_start":1223,"line_end":1223,"column_start":5,"column_end":28}},{"value":"/     B(\"lamb\"), B(\"little\"), B(\"a\"), B(\"had\"), B(\"Mary\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92333,"byte_end":92393,"line_start":1224,"line_end":1224,"column_start":5,"column_end":65}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92398,"byte_end":92405,"line_start":1225,"line_end":1225,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92410,"byte_end":92413,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"\".rsplit_str(\"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92418,"byte_end":92472,"line_start":1227,"line_end":1227,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92477,"byte_end":92506,"line_start":1228,"line_end":1228,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92511,"byte_end":92514,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lionXXtigerXleopard\".rsplit_str(\"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92519,"byte_end":92592,"line_start":1230,"line_end":1230,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"\"), B(\"lion\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92597,"byte_end":92665,"line_start":1231,"line_end":1231,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92670,"byte_end":92673,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lion::tiger::leopard\".rsplit_str(\"::\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92678,"byte_end":92753,"line_start":1233,"line_end":1233,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"lion\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92758,"byte_end":92819,"line_start":1234,"line_end":1234,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92824,"byte_end":92831,"line_start":1235,"line_end":1235,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92836,"byte_end":92839,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ If a string contains multiple contiguous separators, you will end up","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92844,"byte_end":92916,"line_start":1237,"line_end":1237,"column_start":5,"column_end":77}},{"value":"/ with empty strings yielded by the iterator:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92921,"byte_end":92968,"line_start":1238,"line_end":1238,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92973,"byte_end":92976,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92981,"byte_end":92988,"line_start":1240,"line_end":1240,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":92993,"byte_end":93022,"line_start":1241,"line_end":1241,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93027,"byte_end":93030,"line_start":1242,"line_end":1242,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"||||a||b|c\".rsplit_str(\"|\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93035,"byte_end":93099,"line_start":1243,"line_end":1243,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93104,"byte_end":93127,"line_start":1244,"line_end":1244,"column_start":5,"column_end":28}},{"value":"/     B(\"c\"), B(\"b\"), B(\"\"), B(\"a\"), B(\"\"), B(\"\"), B(\"\"), B(\"\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93132,"byte_end":93198,"line_start":1245,"line_end":1245,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93203,"byte_end":93210,"line_start":1246,"line_end":1246,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93215,"byte_end":93218,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"(///)\".rsplit_str(\"/\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93223,"byte_end":93282,"line_start":1248,"line_end":1248,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(x, vec![B(\")\"), B(\"\"), B(\"\"), B(\"(\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93287,"byte_end":93341,"line_start":1249,"line_end":1249,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93346,"byte_end":93353,"line_start":1250,"line_end":1250,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93358,"byte_end":93361,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ Separators at the start or end of a string are neighbored by empty","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93366,"byte_end":93436,"line_start":1252,"line_end":1252,"column_start":5,"column_end":75}},{"value":"/ strings.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93441,"byte_end":93453,"line_start":1253,"line_end":1253,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93458,"byte_end":93461,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93466,"byte_end":93473,"line_start":1255,"line_end":1255,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93478,"byte_end":93507,"line_start":1256,"line_end":1256,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93512,"byte_end":93515,"line_start":1257,"line_end":1257,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"010\".rsplit_str(\"0\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93520,"byte_end":93577,"line_start":1258,"line_end":1258,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(\"1\"), B(\"\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93582,"byte_end":93628,"line_start":1259,"line_end":1259,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93633,"byte_end":93640,"line_start":1260,"line_end":1260,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93645,"byte_end":93648,"line_start":1261,"line_end":1261,"column_start":5,"column_end":8}},{"value":"/ When the empty string is used as a separator, it splits every **byte**","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93653,"byte_end":93727,"line_start":1262,"line_end":1262,"column_start":5,"column_end":79}},{"value":"/ in the byte string, along with the beginning and end of the byte","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93732,"byte_end":93800,"line_start":1263,"line_end":1263,"column_start":5,"column_end":73}},{"value":"/ string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93805,"byte_end":93816,"line_start":1264,"line_end":1264,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93821,"byte_end":93824,"line_start":1265,"line_end":1265,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93829,"byte_end":93836,"line_start":1266,"line_end":1266,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93841,"byte_end":93870,"line_start":1267,"line_end":1267,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93875,"byte_end":93878,"line_start":1268,"line_end":1268,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"rust\".rsplit_str(\"\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93883,"byte_end":93940,"line_start":1269,"line_end":1269,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93945,"byte_end":93968,"line_start":1270,"line_end":1270,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"t\"), B(\"s\"), B(\"u\"), B(\"r\"), B(\"\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":93973,"byte_end":94026,"line_start":1271,"line_end":1271,"column_start":5,"column_end":58}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94031,"byte_end":94038,"line_start":1272,"line_end":1272,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94043,"byte_end":94046,"line_start":1273,"line_end":1273,"column_start":5,"column_end":8}},{"value":"/ // Splitting by an empty string is not UTF-8 aware. Elements yielded","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94051,"byte_end":94123,"line_start":1274,"line_end":1274,"column_start":5,"column_end":77}},{"value":"/ // may not be valid UTF-8!","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94128,"byte_end":94158,"line_start":1275,"line_end":1275,"column_start":5,"column_end":35}},{"value":"/ let x: Vec<&[u8]> = B(\"☃\").rsplit_str(\"\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94163,"byte_end":94221,"line_start":1276,"line_end":1276,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(b\"\\x83\"), B(b\"\\x98\"), B(b\"\\xE2\"), B(\"\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94226,"byte_end":94300,"line_start":1277,"line_end":1277,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94305,"byte_end":94312,"line_start":1278,"line_end":1278,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94317,"byte_end":94320,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ Contiguous separators, especially whitespace, can lead to possibly","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94325,"byte_end":94395,"line_start":1280,"line_end":1280,"column_start":5,"column_end":75}},{"value":"/ surprising behavior. For example, this code is correct:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94400,"byte_end":94459,"line_start":1281,"line_end":1281,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94464,"byte_end":94467,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94472,"byte_end":94479,"line_start":1283,"line_end":1283,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94484,"byte_end":94513,"line_start":1284,"line_end":1284,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94518,"byte_end":94521,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"    a  b c\".rsplit_str(\" \").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94526,"byte_end":94590,"line_start":1286,"line_end":1286,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94595,"byte_end":94618,"line_start":1287,"line_end":1287,"column_start":5,"column_end":28}},{"value":"/     B(\"c\"), B(\"b\"), B(\"\"), B(\"a\"), B(\"\"), B(\"\"), B(\"\"), B(\"\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94623,"byte_end":94689,"line_start":1288,"line_end":1288,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94694,"byte_end":94701,"line_start":1289,"line_end":1289,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94706,"byte_end":94713,"line_start":1290,"line_end":1290,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94718,"byte_end":94721,"line_start":1291,"line_end":1291,"column_start":5,"column_end":8}},{"value":"/ It does *not* give you `[\"a\", \"b\", \"c\"]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94726,"byte_end":94771,"line_start":1292,"line_end":1292,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94776,"byte_end":94785,"line_start":1293,"line_end":1293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96402,"byte_end":96412,"line_start":1337,"line_end":1337,"column_start":8,"column_end":18},"name":"splitn_str","qualname":"::ext_slice::ByteSlice::splitn_str","value":"fn <'a, B> (&'a self, limit: usize, splitter: &'a B) -> SplitN<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of this byte string,\n separated by the given byte string. If `limit` substrings are yielded,\n then the last substring will contain the remainder of this byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of this byte string,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":94978,"byte_end":95052,"line_start":1301,"line_end":1301,"column_start":5,"column_end":79}},{"value":"/ separated by the given byte string. If `limit` substrings are yielded,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95057,"byte_end":95131,"line_start":1302,"line_end":1302,"column_start":5,"column_end":79}},{"value":"/ then the last substring will contain the remainder of this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95136,"byte_end":95211,"line_start":1303,"line_end":1303,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95216,"byte_end":95219,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95224,"byte_end":95291,"line_start":1305,"line_end":1305,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95296,"byte_end":95366,"line_start":1306,"line_end":1306,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95371,"byte_end":95374,"line_start":1307,"line_end":1307,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95379,"byte_end":95393,"line_start":1308,"line_end":1308,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95398,"byte_end":95401,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95406,"byte_end":95422,"line_start":1310,"line_end":1310,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95427,"byte_end":95430,"line_start":1311,"line_end":1311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95435,"byte_end":95442,"line_start":1312,"line_end":1312,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95447,"byte_end":95476,"line_start":1313,"line_end":1313,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95481,"byte_end":95484,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"Mary had a little lamb\".splitn_str(3, \" \").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95489,"byte_end":95564,"line_start":1315,"line_end":1315,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"Mary\"), B(\"had\"), B(\"a little lamb\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95569,"byte_end":95634,"line_start":1316,"line_end":1316,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95639,"byte_end":95642,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"\".splitn_str(3, \"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95647,"byte_end":95700,"line_start":1318,"line_end":1318,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95705,"byte_end":95734,"line_start":1319,"line_end":1319,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95739,"byte_end":95742,"line_start":1320,"line_end":1320,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lionXXtigerXleopard\".splitn_str(3, \"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95747,"byte_end":95819,"line_start":1321,"line_end":1321,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"\"), B(\"tigerXleopard\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95824,"byte_end":95886,"line_start":1322,"line_end":1322,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95891,"byte_end":95894,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lion::tiger::leopard\".splitn_str(2, \"::\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95899,"byte_end":95973,"line_start":1324,"line_end":1324,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"tiger::leopard\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":95978,"byte_end":96034,"line_start":1325,"line_end":1325,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96039,"byte_end":96042,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".splitn_str(1, \"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96047,"byte_end":96107,"line_start":1327,"line_end":1327,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![B(\"abcXdef\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96112,"byte_end":96150,"line_start":1328,"line_end":1328,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96155,"byte_end":96158,"line_start":1329,"line_end":1329,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcdef\".splitn_str(2, \"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96163,"byte_end":96222,"line_start":1330,"line_end":1330,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(x, vec![B(\"abcdef\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96227,"byte_end":96264,"line_start":1331,"line_end":1331,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96269,"byte_end":96272,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".splitn_str(0, \"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96277,"byte_end":96337,"line_start":1333,"line_end":1333,"column_start":5,"column_end":65}},{"value":"/ assert!(x.is_empty());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96342,"byte_end":96368,"line_start":1334,"line_end":1334,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96373,"byte_end":96380,"line_start":1335,"line_end":1335,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96385,"byte_end":96394,"line_start":1336,"line_end":1336,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98067,"byte_end":98078,"line_start":1383,"line_end":1383,"column_start":8,"column_end":19},"name":"rsplitn_str","qualname":"::ext_slice::ByteSlice::rsplitn_str","value":"fn <'a, B> (&'a self, limit: usize, splitter: &'a B) -> SplitNReverse<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of this byte string,\n separated by the given byte string, in reverse. If `limit` substrings\n are yielded, then the last substring will contain the remainder of this\n byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of this byte string,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96604,"byte_end":96678,"line_start":1345,"line_end":1345,"column_start":5,"column_end":79}},{"value":"/ separated by the given byte string, in reverse. If `limit` substrings","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96683,"byte_end":96756,"line_start":1346,"line_end":1346,"column_start":5,"column_end":78}},{"value":"/ are yielded, then the last substring will contain the remainder of this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96761,"byte_end":96836,"line_start":1347,"line_end":1347,"column_start":5,"column_end":80}},{"value":"/ byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96841,"byte_end":96857,"line_start":1348,"line_end":1348,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96862,"byte_end":96865,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96870,"byte_end":96937,"line_start":1350,"line_end":1350,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":96942,"byte_end":97012,"line_start":1351,"line_end":1351,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97017,"byte_end":97020,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97025,"byte_end":97039,"line_start":1353,"line_end":1353,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97044,"byte_end":97047,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97052,"byte_end":97068,"line_start":1355,"line_end":1355,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97073,"byte_end":97076,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97081,"byte_end":97088,"line_start":1357,"line_end":1357,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97093,"byte_end":97122,"line_start":1358,"line_end":1358,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97127,"byte_end":97130,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> =","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97135,"byte_end":97154,"line_start":1360,"line_end":1360,"column_start":5,"column_end":24}},{"value":"/     b\"Mary had a little lamb\".rsplitn_str(3, \" \").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97159,"byte_end":97223,"line_start":1361,"line_end":1361,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![B(\"lamb\"), B(\"little\"), B(\"Mary had a\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97228,"byte_end":97293,"line_start":1362,"line_end":1362,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97298,"byte_end":97301,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"\".rsplitn_str(3, \"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97306,"byte_end":97360,"line_start":1364,"line_end":1364,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97365,"byte_end":97394,"line_start":1365,"line_end":1365,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97399,"byte_end":97402,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lionXXtigerXleopard\".rsplitn_str(3, \"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97407,"byte_end":97480,"line_start":1367,"line_end":1367,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"lionX\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97485,"byte_end":97547,"line_start":1368,"line_end":1368,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97552,"byte_end":97555,"line_start":1369,"line_end":1369,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lion::tiger::leopard\".rsplitn_str(2, \"::\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97560,"byte_end":97635,"line_start":1370,"line_end":1370,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"lion::tiger\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97640,"byte_end":97696,"line_start":1371,"line_end":1371,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97701,"byte_end":97704,"line_start":1372,"line_end":1372,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".rsplitn_str(1, \"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97709,"byte_end":97770,"line_start":1373,"line_end":1373,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(x, vec![B(\"abcXdef\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97775,"byte_end":97813,"line_start":1374,"line_end":1374,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97818,"byte_end":97821,"line_start":1375,"line_end":1375,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcdef\".rsplitn_str(2, \"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97826,"byte_end":97886,"line_start":1376,"line_end":1376,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![B(\"abcdef\")]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97891,"byte_end":97928,"line_start":1377,"line_end":1377,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97933,"byte_end":97936,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".rsplitn_str(0, \"X\").collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":97941,"byte_end":98002,"line_start":1379,"line_end":1379,"column_start":5,"column_end":66}},{"value":"/ assert!(x.is_empty());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98007,"byte_end":98033,"line_start":1380,"line_end":1380,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98038,"byte_end":98045,"line_start":1381,"line_end":1381,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98050,"byte_end":98059,"line_start":1382,"line_end":1382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99267,"byte_end":99274,"line_start":1427,"line_end":1427,"column_start":8,"column_end":15},"name":"replace","qualname":"::ext_slice::ByteSlice::replace","value":"fn <N, R> (&self, needle: N, replacement: R) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Replace all matches of the given needle with the given replacement, and\n the result as a new `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace all matches of the given needle with the given replacement, and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98284,"byte_end":98359,"line_start":1391,"line_end":1391,"column_start":5,"column_end":80}},{"value":"/ the result as a new `Vec<u8>`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98364,"byte_end":98398,"line_start":1392,"line_end":1392,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98403,"byte_end":98406,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ This routine is useful as a convenience. If you need to reuse an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98411,"byte_end":98479,"line_start":1394,"line_end":1394,"column_start":5,"column_end":73}},{"value":"/ allocation, use [`replace_into`](#method.replace_into) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98484,"byte_end":98551,"line_start":1395,"line_end":1395,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98556,"byte_end":98559,"line_start":1396,"line_end":1396,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98564,"byte_end":98578,"line_start":1397,"line_end":1397,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98583,"byte_end":98586,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98591,"byte_end":98607,"line_start":1399,"line_end":1399,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98612,"byte_end":98615,"line_start":1400,"line_end":1400,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98620,"byte_end":98627,"line_start":1401,"line_end":1401,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98632,"byte_end":98656,"line_start":1402,"line_end":1402,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98661,"byte_end":98664,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\".replace(\"old\", \"new\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98669,"byte_end":98718,"line_start":1404,"line_end":1404,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(s, \"this is new\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98723,"byte_end":98767,"line_start":1405,"line_end":1405,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98772,"byte_end":98779,"line_start":1406,"line_end":1406,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98784,"byte_end":98787,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98792,"byte_end":98827,"line_start":1408,"line_end":1408,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98832,"byte_end":98835,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98840,"byte_end":98847,"line_start":1410,"line_end":1410,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98852,"byte_end":98876,"line_start":1411,"line_end":1411,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98881,"byte_end":98884,"line_start":1412,"line_end":1412,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\".replace(\"nada nada\", \"limonada\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98889,"byte_end":98949,"line_start":1413,"line_end":1413,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(s, \"this is old\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":98954,"byte_end":98998,"line_start":1414,"line_end":1414,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99003,"byte_end":99010,"line_start":1415,"line_end":1415,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99015,"byte_end":99018,"line_start":1416,"line_end":1416,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99023,"byte_end":99062,"line_start":1417,"line_end":1417,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99067,"byte_end":99070,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99075,"byte_end":99082,"line_start":1419,"line_end":1419,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99087,"byte_end":99111,"line_start":1420,"line_end":1420,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99116,"byte_end":99119,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\".replace(\"\", \"Z\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99124,"byte_end":99160,"line_start":1422,"line_end":1422,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(s, \"ZfZoZoZ\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99165,"byte_end":99205,"line_start":1423,"line_end":1423,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99210,"byte_end":99217,"line_start":1424,"line_end":1424,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99222,"byte_end":99245,"line_start":1425,"line_end":1425,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99250,"byte_end":99259,"line_start":1426,"line_end":1426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100500,"byte_end":100508,"line_start":1473,"line_end":1473,"column_start":8,"column_end":16},"name":"replacen","qualname":"::ext_slice::ByteSlice::replacen","value":"fn <N, R> (&self, needle: N, replacement: R, limit: usize) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Replace up to `limit` matches of the given needle with the given\n replacement, and the result as a new `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace up to `limit` matches of the given needle with the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99534,"byte_end":99602,"line_start":1437,"line_end":1437,"column_start":5,"column_end":73}},{"value":"/ replacement, and the result as a new `Vec<u8>`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99607,"byte_end":99658,"line_start":1438,"line_end":1438,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99663,"byte_end":99666,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ This routine is useful as a convenience. If you need to reuse an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99671,"byte_end":99739,"line_start":1440,"line_end":1440,"column_start":5,"column_end":73}},{"value":"/ allocation, use [`replacen_into`](#method.replacen_into) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99744,"byte_end":99813,"line_start":1441,"line_end":1441,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99818,"byte_end":99821,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99826,"byte_end":99840,"line_start":1443,"line_end":1443,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99845,"byte_end":99848,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99853,"byte_end":99869,"line_start":1445,"line_end":1445,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99874,"byte_end":99877,"line_start":1446,"line_end":1446,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99882,"byte_end":99889,"line_start":1447,"line_end":1447,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99894,"byte_end":99918,"line_start":1448,"line_end":1448,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99923,"byte_end":99926,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\".replacen(\"o\", \"z\", 2);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99931,"byte_end":99975,"line_start":1450,"line_end":1450,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(s, \"fzzfoo\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":99980,"byte_end":100019,"line_start":1451,"line_end":1451,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100024,"byte_end":100031,"line_start":1452,"line_end":1452,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100036,"byte_end":100039,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100044,"byte_end":100079,"line_start":1454,"line_end":1454,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100084,"byte_end":100087,"line_start":1455,"line_end":1455,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100092,"byte_end":100099,"line_start":1456,"line_end":1456,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100104,"byte_end":100128,"line_start":1457,"line_end":1457,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100133,"byte_end":100136,"line_start":1458,"line_end":1458,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\".replacen(\"a\", \"z\", 2);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100141,"byte_end":100185,"line_start":1459,"line_end":1459,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(s, \"foofoo\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100190,"byte_end":100229,"line_start":1460,"line_end":1460,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100234,"byte_end":100241,"line_start":1461,"line_end":1461,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100246,"byte_end":100249,"line_start":1462,"line_end":1462,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100254,"byte_end":100293,"line_start":1463,"line_end":1463,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100298,"byte_end":100301,"line_start":1464,"line_end":1464,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100306,"byte_end":100313,"line_start":1465,"line_end":1465,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100318,"byte_end":100342,"line_start":1466,"line_end":1466,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100347,"byte_end":100350,"line_start":1467,"line_end":1467,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\".replacen(\"\", \"Z\", 2);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100355,"byte_end":100395,"line_start":1468,"line_end":1468,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s, \"ZfZoo\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100400,"byte_end":100438,"line_start":1469,"line_end":1469,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100443,"byte_end":100450,"line_start":1470,"line_end":1470,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100455,"byte_end":100478,"line_start":1471,"line_end":1471,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100483,"byte_end":100492,"line_start":1472,"line_end":1472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102059,"byte_end":102071,"line_start":1531,"line_end":1531,"column_start":8,"column_end":20},"name":"replace_into","qualname":"::ext_slice::ByteSlice::replace_into","value":"fn <N, R> (&self, needle: N, replacement: R, dest: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Replace all matches of the given needle with the given replacement,\n and write the result into the provided `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace all matches of the given needle with the given replacement,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100798,"byte_end":100869,"line_start":1484,"line_end":1484,"column_start":5,"column_end":76}},{"value":"/ and write the result into the provided `Vec<u8>`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100874,"byte_end":100927,"line_start":1485,"line_end":1485,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100932,"byte_end":100935,"line_start":1486,"line_end":1486,"column_start":5,"column_end":8}},{"value":"/ This does **not** clear `dest` before writing to it.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":100940,"byte_end":100996,"line_start":1487,"line_end":1487,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101001,"byte_end":101004,"line_start":1488,"line_end":1488,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for reusing allocation. For a more convenient","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101009,"byte_end":101081,"line_start":1489,"line_end":1489,"column_start":5,"column_end":77}},{"value":"/ API, use [`replace`](#method.replace) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101086,"byte_end":101136,"line_start":1490,"line_end":1490,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101141,"byte_end":101144,"line_start":1491,"line_end":1491,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101149,"byte_end":101163,"line_start":1492,"line_end":1492,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101168,"byte_end":101171,"line_start":1493,"line_end":1493,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101176,"byte_end":101192,"line_start":1494,"line_end":1494,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101197,"byte_end":101200,"line_start":1495,"line_end":1495,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101205,"byte_end":101212,"line_start":1496,"line_end":1496,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101217,"byte_end":101241,"line_start":1497,"line_end":1497,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101246,"byte_end":101249,"line_start":1498,"line_end":1498,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101254,"byte_end":101281,"line_start":1499,"line_end":1499,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101286,"byte_end":101289,"line_start":1500,"line_end":1500,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101294,"byte_end":101320,"line_start":1501,"line_end":1501,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"old\", \"new\", &mut dest);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101325,"byte_end":101369,"line_start":1502,"line_end":1502,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"this is new\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101374,"byte_end":101421,"line_start":1503,"line_end":1503,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101426,"byte_end":101433,"line_start":1504,"line_end":1504,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101438,"byte_end":101441,"line_start":1505,"line_end":1505,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101446,"byte_end":101481,"line_start":1506,"line_end":1506,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101486,"byte_end":101489,"line_start":1507,"line_end":1507,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101494,"byte_end":101501,"line_start":1508,"line_end":1508,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101506,"byte_end":101530,"line_start":1509,"line_end":1509,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101535,"byte_end":101538,"line_start":1510,"line_end":1510,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101543,"byte_end":101570,"line_start":1511,"line_end":1511,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101575,"byte_end":101578,"line_start":1512,"line_end":1512,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101583,"byte_end":101609,"line_start":1513,"line_end":1513,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"nada nada\", \"limonada\", &mut dest);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101614,"byte_end":101669,"line_start":1514,"line_end":1514,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(dest, \"this is old\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101674,"byte_end":101721,"line_start":1515,"line_end":1515,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101726,"byte_end":101733,"line_start":1516,"line_end":1516,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101738,"byte_end":101741,"line_start":1517,"line_end":1517,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101746,"byte_end":101785,"line_start":1518,"line_end":1518,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101790,"byte_end":101793,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101798,"byte_end":101805,"line_start":1520,"line_end":1520,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101810,"byte_end":101834,"line_start":1521,"line_end":1521,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101839,"byte_end":101842,"line_start":1522,"line_end":1522,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101847,"byte_end":101866,"line_start":1523,"line_end":1523,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101871,"byte_end":101874,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101879,"byte_end":101905,"line_start":1525,"line_end":1525,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"\", \"Z\", &mut dest);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101910,"byte_end":101949,"line_start":1526,"line_end":1526,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(dest, \"ZfZoZoZ\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":101954,"byte_end":101997,"line_start":1527,"line_end":1527,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102002,"byte_end":102009,"line_start":1528,"line_end":1528,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102014,"byte_end":102037,"line_start":1529,"line_end":1529,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102042,"byte_end":102051,"line_start":1530,"line_end":1530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103802,"byte_end":103815,"line_start":1595,"line_end":1595,"column_start":8,"column_end":21},"name":"replacen_into","qualname":"::ext_slice::ByteSlice::replacen_into","value":"fn <N, R> (&self, needle: N, replacement: R, limit: usize, dest: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Replace up to `limit` matches of the given needle with the given\n replacement, and write the result into the provided `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace up to `limit` matches of the given needle with the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102558,"byte_end":102626,"line_start":1548,"line_end":1548,"column_start":5,"column_end":73}},{"value":"/ replacement, and write the result into the provided `Vec<u8>`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102631,"byte_end":102697,"line_start":1549,"line_end":1549,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102702,"byte_end":102705,"line_start":1550,"line_end":1550,"column_start":5,"column_end":8}},{"value":"/ This does **not** clear `dest` before writing to it.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102710,"byte_end":102766,"line_start":1551,"line_end":1551,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102771,"byte_end":102774,"line_start":1552,"line_end":1552,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for reusing allocation. For a more convenient","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102779,"byte_end":102851,"line_start":1553,"line_end":1553,"column_start":5,"column_end":77}},{"value":"/ API, use [`replacen`](#method.replacen) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102856,"byte_end":102908,"line_start":1554,"line_end":1554,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102913,"byte_end":102916,"line_start":1555,"line_end":1555,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102921,"byte_end":102935,"line_start":1556,"line_end":1556,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102940,"byte_end":102943,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102948,"byte_end":102964,"line_start":1558,"line_end":1558,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102969,"byte_end":102972,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102977,"byte_end":102984,"line_start":1560,"line_end":1560,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":102989,"byte_end":103013,"line_start":1561,"line_end":1561,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103018,"byte_end":103021,"line_start":1562,"line_end":1562,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103026,"byte_end":103048,"line_start":1563,"line_end":1563,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103053,"byte_end":103056,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103061,"byte_end":103087,"line_start":1565,"line_end":1565,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"o\", \"z\", 2, &mut dest);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103092,"byte_end":103136,"line_start":1566,"line_end":1566,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"fzzfoo\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103141,"byte_end":103183,"line_start":1567,"line_end":1567,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103188,"byte_end":103195,"line_start":1568,"line_end":1568,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103200,"byte_end":103203,"line_start":1569,"line_end":1569,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103208,"byte_end":103243,"line_start":1570,"line_end":1570,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103248,"byte_end":103251,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103256,"byte_end":103263,"line_start":1572,"line_end":1572,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103268,"byte_end":103292,"line_start":1573,"line_end":1573,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103297,"byte_end":103300,"line_start":1574,"line_end":1574,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103305,"byte_end":103327,"line_start":1575,"line_end":1575,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103332,"byte_end":103335,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103340,"byte_end":103366,"line_start":1577,"line_end":1577,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"a\", \"z\", 2, &mut dest);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103371,"byte_end":103415,"line_start":1578,"line_end":1578,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"foofoo\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103420,"byte_end":103462,"line_start":1579,"line_end":1579,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103467,"byte_end":103474,"line_start":1580,"line_end":1580,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103479,"byte_end":103482,"line_start":1581,"line_end":1581,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103487,"byte_end":103526,"line_start":1582,"line_end":1582,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103531,"byte_end":103534,"line_start":1583,"line_end":1583,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103539,"byte_end":103546,"line_start":1584,"line_end":1584,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103551,"byte_end":103575,"line_start":1585,"line_end":1585,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103580,"byte_end":103583,"line_start":1586,"line_end":1586,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103588,"byte_end":103607,"line_start":1587,"line_end":1587,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103612,"byte_end":103615,"line_start":1588,"line_end":1588,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103620,"byte_end":103646,"line_start":1589,"line_end":1589,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"\", \"Z\", 2, &mut dest);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103651,"byte_end":103694,"line_start":1590,"line_end":1590,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dest, \"ZfZoo\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103699,"byte_end":103740,"line_start":1591,"line_end":1591,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103745,"byte_end":103752,"line_start":1592,"line_end":1592,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103757,"byte_end":103780,"line_start":1593,"line_end":1593,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":103785,"byte_end":103794,"line_start":1594,"line_end":1594,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104652,"byte_end":104657,"line_start":1627,"line_end":1627,"column_start":8,"column_end":13},"name":"bytes","qualname":"::ext_slice::ByteSlice::bytes","value":"fn (&self) -> Bytes","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the bytes in this byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the bytes in this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104336,"byte_end":104395,"line_start":1613,"line_end":1613,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104400,"byte_end":104403,"line_start":1614,"line_end":1614,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104408,"byte_end":104422,"line_start":1615,"line_end":1615,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104427,"byte_end":104430,"line_start":1616,"line_end":1616,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104435,"byte_end":104451,"line_start":1617,"line_end":1617,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104456,"byte_end":104459,"line_start":1618,"line_end":1618,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104464,"byte_end":104471,"line_start":1619,"line_end":1619,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104476,"byte_end":104500,"line_start":1620,"line_end":1620,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104505,"byte_end":104508,"line_start":1621,"line_end":1621,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"foobar\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104513,"byte_end":104536,"line_start":1622,"line_end":1622,"column_start":5,"column_end":28}},{"value":"/ let bytes: Vec<u8> = bs.bytes().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104541,"byte_end":104587,"line_start":1623,"line_end":1623,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(bytes, bs);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104592,"byte_end":104618,"line_start":1624,"line_end":1624,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104623,"byte_end":104630,"line_start":1625,"line_end":1625,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104635,"byte_end":104644,"line_start":1626,"line_end":1626,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105594,"byte_end":105599,"line_start":1657,"line_end":1657,"column_start":8,"column_end":13},"name":"chars","qualname":"::ext_slice::ByteSlice::chars","value":"fn (&self) -> Chars","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the Unicode scalar values in this byte string.\n If invalid UTF-8 is encountered, then the Unicode replacement codepoint\n is yielded instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the Unicode scalar values in this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104732,"byte_end":104807,"line_start":1631,"line_end":1631,"column_start":5,"column_end":80}},{"value":"/ If invalid UTF-8 is encountered, then the Unicode replacement codepoint","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104812,"byte_end":104887,"line_start":1632,"line_end":1632,"column_start":5,"column_end":80}},{"value":"/ is yielded instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104892,"byte_end":104915,"line_start":1633,"line_end":1633,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104920,"byte_end":104923,"line_start":1634,"line_end":1634,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104928,"byte_end":104942,"line_start":1635,"line_end":1635,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104947,"byte_end":104950,"line_start":1636,"line_end":1636,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104955,"byte_end":104971,"line_start":1637,"line_end":1637,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104976,"byte_end":104979,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104984,"byte_end":104991,"line_start":1639,"line_end":1639,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":104996,"byte_end":105020,"line_start":1640,"line_end":1640,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105025,"byte_end":105028,"line_start":1641,"line_end":1641,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105033,"byte_end":105094,"line_start":1642,"line_end":1642,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<char> = bs.chars().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105099,"byte_end":105147,"line_start":1643,"line_end":1643,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(vec!['☃', '\\u{FFFD}', '𝞃', '\\u{FFFD}', 'a'], chars);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105152,"byte_end":105224,"line_start":1644,"line_end":1644,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105229,"byte_end":105236,"line_start":1645,"line_end":1645,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105241,"byte_end":105244,"line_start":1646,"line_end":1646,"column_start":5,"column_end":8}},{"value":"/ Codepoints can also be iterated over in reverse:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105249,"byte_end":105301,"line_start":1647,"line_end":1647,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105306,"byte_end":105309,"line_start":1648,"line_end":1648,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105314,"byte_end":105321,"line_start":1649,"line_end":1649,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105326,"byte_end":105350,"line_start":1650,"line_end":1650,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105355,"byte_end":105358,"line_start":1651,"line_end":1651,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105363,"byte_end":105424,"line_start":1652,"line_end":1652,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<char> = bs.chars().rev().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105429,"byte_end":105483,"line_start":1653,"line_end":1653,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(vec!['a', '\\u{FFFD}', '𝞃', '\\u{FFFD}', '☃'], chars);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105488,"byte_end":105560,"line_start":1654,"line_end":1654,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105565,"byte_end":105572,"line_start":1655,"line_end":1655,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105577,"byte_end":105586,"line_start":1656,"line_end":1656,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107477,"byte_end":107489,"line_start":1712,"line_end":1712,"column_start":8,"column_end":20},"name":"char_indices","qualname":"::ext_slice::ByteSlice::char_indices","value":"fn (&self) -> CharIndices","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the Unicode scalar values in this byte string\n along with their starting and ending byte index positions. If invalid\n UTF-8 is encountered, then the Unicode replacement codepoint is yielded\n instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the Unicode scalar values in this byte string","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105665,"byte_end":105739,"line_start":1661,"line_end":1661,"column_start":5,"column_end":79}},{"value":"/ along with their starting and ending byte index positions. If invalid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105744,"byte_end":105817,"line_start":1662,"line_end":1662,"column_start":5,"column_end":78}},{"value":"/ UTF-8 is encountered, then the Unicode replacement codepoint is yielded","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105822,"byte_end":105897,"line_start":1663,"line_end":1663,"column_start":5,"column_end":80}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105902,"byte_end":105914,"line_start":1664,"line_end":1664,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105919,"byte_end":105922,"line_start":1665,"line_end":1665,"column_start":5,"column_end":8}},{"value":"/ Note that this is slightly different from the `CharIndices` iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":105927,"byte_end":105999,"line_start":1666,"line_end":1666,"column_start":5,"column_end":77}},{"value":"/ provided by the standard library. Aside from working on possibly","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106004,"byte_end":106072,"line_start":1667,"line_end":1667,"column_start":5,"column_end":73}},{"value":"/ invalid UTF-8, this iterator provides both the corresponding starting","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106077,"byte_end":106150,"line_start":1668,"line_end":1668,"column_start":5,"column_end":78}},{"value":"/ and ending byte indices of each codepoint yielded. The ending position","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106155,"byte_end":106229,"line_start":1669,"line_end":1669,"column_start":5,"column_end":79}},{"value":"/ is necessary to slice the original byte string when invalid UTF-8 bytes","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106234,"byte_end":106309,"line_start":1670,"line_end":1670,"column_start":5,"column_end":80}},{"value":"/ are converted into a Unicode replacement codepoint, since a single","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106314,"byte_end":106384,"line_start":1671,"line_end":1671,"column_start":5,"column_end":75}},{"value":"/ replacement codepoint can substitute anywhere from 1 to 3 invalid bytes","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106389,"byte_end":106464,"line_start":1672,"line_end":1672,"column_start":5,"column_end":80}},{"value":"/ (inclusive).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106469,"byte_end":106485,"line_start":1673,"line_end":1673,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106490,"byte_end":106493,"line_start":1674,"line_end":1674,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106498,"byte_end":106512,"line_start":1675,"line_end":1675,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106517,"byte_end":106520,"line_start":1676,"line_end":1676,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106525,"byte_end":106541,"line_start":1677,"line_end":1677,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106546,"byte_end":106549,"line_start":1678,"line_end":1678,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106554,"byte_end":106561,"line_start":1679,"line_end":1679,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106566,"byte_end":106590,"line_start":1680,"line_end":1680,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106595,"byte_end":106598,"line_start":1681,"line_end":1681,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106603,"byte_end":106664,"line_start":1682,"line_end":1682,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<(usize, usize, char)> = bs.char_indices().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106669,"byte_end":106740,"line_start":1683,"line_end":1683,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(chars, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106745,"byte_end":106772,"line_start":1684,"line_end":1684,"column_start":5,"column_end":32}},{"value":"/     (0, 3, '☃'),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106777,"byte_end":106799,"line_start":1685,"line_end":1685,"column_start":5,"column_end":25}},{"value":"/     (3, 4, '\\u{FFFD}'),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106804,"byte_end":106831,"line_start":1686,"line_end":1686,"column_start":5,"column_end":32}},{"value":"/     (4, 8, '𝞃'),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106836,"byte_end":106859,"line_start":1687,"line_end":1687,"column_start":5,"column_end":25}},{"value":"/     (8, 10, '\\u{FFFD}'),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106864,"byte_end":106892,"line_start":1688,"line_end":1688,"column_start":5,"column_end":33}},{"value":"/     (10, 11, 'a'),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106897,"byte_end":106919,"line_start":1689,"line_end":1689,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106924,"byte_end":106931,"line_start":1690,"line_end":1690,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106936,"byte_end":106943,"line_start":1691,"line_end":1691,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106948,"byte_end":106951,"line_start":1692,"line_end":1692,"column_start":5,"column_end":8}},{"value":"/ Codepoints can also be iterated over in reverse:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":106956,"byte_end":107008,"line_start":1693,"line_end":1693,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107013,"byte_end":107016,"line_start":1694,"line_end":1694,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107021,"byte_end":107028,"line_start":1695,"line_end":1695,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107033,"byte_end":107057,"line_start":1696,"line_end":1696,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107062,"byte_end":107065,"line_start":1697,"line_end":1697,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107070,"byte_end":107131,"line_start":1698,"line_end":1698,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<(usize, usize, char)> = bs","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107136,"byte_end":107181,"line_start":1699,"line_end":1699,"column_start":5,"column_end":50}},{"value":"/     .char_indices()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107186,"byte_end":107209,"line_start":1700,"line_end":1700,"column_start":5,"column_end":28}},{"value":"/     .rev()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107214,"byte_end":107228,"line_start":1701,"line_end":1701,"column_start":5,"column_end":19}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107233,"byte_end":107252,"line_start":1702,"line_end":1702,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(chars, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107257,"byte_end":107284,"line_start":1703,"line_end":1703,"column_start":5,"column_end":32}},{"value":"/     (10, 11, 'a'),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107289,"byte_end":107311,"line_start":1704,"line_end":1704,"column_start":5,"column_end":27}},{"value":"/     (8, 10, '\\u{FFFD}'),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107316,"byte_end":107344,"line_start":1705,"line_end":1705,"column_start":5,"column_end":33}},{"value":"/     (4, 8, '𝞃'),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107349,"byte_end":107372,"line_start":1706,"line_end":1706,"column_start":5,"column_end":25}},{"value":"/     (3, 4, '\\u{FFFD}'),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107377,"byte_end":107404,"line_start":1707,"line_end":1707,"column_start":5,"column_end":32}},{"value":"/     (0, 3, '☃'),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107409,"byte_end":107431,"line_start":1708,"line_end":1708,"column_start":5,"column_end":25}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107436,"byte_end":107443,"line_start":1709,"line_end":1709,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107448,"byte_end":107455,"line_start":1710,"line_end":1710,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107460,"byte_end":107469,"line_start":1711,"line_end":1711,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108760,"byte_end":108771,"line_start":1749,"line_end":1749,"column_start":8,"column_end":19},"name":"utf8_chunks","qualname":"::ext_slice::ByteSlice::utf8_chunks","value":"fn (&self) -> Utf8Chunks","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Iterate over chunks of valid UTF-8.","sig":null,"attributes":[{"value":"/ Iterate over chunks of valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107567,"byte_end":107606,"line_start":1716,"line_end":1716,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107611,"byte_end":107614,"line_start":1717,"line_end":1717,"column_start":5,"column_end":8}},{"value":"/ The iterator returned yields chunks of valid UTF-8 separated by invalid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107619,"byte_end":107694,"line_start":1718,"line_end":1718,"column_start":5,"column_end":80}},{"value":"/ UTF-8 bytes, if they exist. Invalid UTF-8 bytes are always 1-3 bytes,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107699,"byte_end":107772,"line_start":1719,"line_end":1719,"column_start":5,"column_end":78}},{"value":"/ which are determined via the \"substitution of maximal subparts\"","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107777,"byte_end":107844,"line_start":1720,"line_end":1720,"column_start":5,"column_end":72}},{"value":"/ strategy described in the docs for the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107849,"byte_end":107891,"line_start":1721,"line_end":1721,"column_start":5,"column_end":47}},{"value":"/ [`ByteSlice::to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107896,"byte_end":107969,"line_start":1722,"line_end":1722,"column_start":5,"column_end":78}},{"value":"/ method.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107974,"byte_end":107985,"line_start":1723,"line_end":1723,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107990,"byte_end":107993,"line_start":1724,"line_end":1724,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":107998,"byte_end":108012,"line_start":1725,"line_end":1725,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108017,"byte_end":108020,"line_start":1726,"line_end":1726,"column_start":5,"column_end":8}},{"value":"/ This example shows how the `std::fmt::Display` implementation is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108025,"byte_end":108093,"line_start":1727,"line_end":1727,"column_start":5,"column_end":73}},{"value":"/ written for the `BStr` type:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108098,"byte_end":108130,"line_start":1728,"line_end":1728,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108135,"byte_end":108138,"line_start":1729,"line_end":1729,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108143,"byte_end":108150,"line_start":1730,"line_end":1730,"column_start":5,"column_end":12}},{"value":"/ use bstr::{ByteSlice, Utf8Chunk};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108155,"byte_end":108192,"line_start":1731,"line_end":1731,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108197,"byte_end":108200,"line_start":1732,"line_end":1732,"column_start":5,"column_end":8}},{"value":"/ let bytes = b\"foo\\xFD\\xFEbar\\xFF\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108205,"byte_end":108243,"line_start":1733,"line_end":1733,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108248,"byte_end":108251,"line_start":1734,"line_end":1734,"column_start":5,"column_end":8}},{"value":"/ let (mut valid_chunks, mut invalid_chunks) = (vec![], vec![]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108256,"byte_end":108322,"line_start":1735,"line_end":1735,"column_start":5,"column_end":71}},{"value":"/ for chunk in bytes.utf8_chunks() {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108327,"byte_end":108365,"line_start":1736,"line_end":1736,"column_start":5,"column_end":43}},{"value":"/     if !chunk.valid().is_empty() {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108370,"byte_end":108408,"line_start":1737,"line_end":1737,"column_start":5,"column_end":43}},{"value":"/         valid_chunks.push(chunk.valid());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108413,"byte_end":108458,"line_start":1738,"line_end":1738,"column_start":5,"column_end":50}},{"value":"/     }","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108463,"byte_end":108472,"line_start":1739,"line_end":1739,"column_start":5,"column_end":14}},{"value":"/     if !chunk.invalid().is_empty() {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108477,"byte_end":108517,"line_start":1740,"line_end":1740,"column_start":5,"column_end":45}},{"value":"/         invalid_chunks.push(chunk.invalid());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108522,"byte_end":108571,"line_start":1741,"line_end":1741,"column_start":5,"column_end":54}},{"value":"/     }","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108576,"byte_end":108585,"line_start":1742,"line_end":1742,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108590,"byte_end":108595,"line_start":1743,"line_end":1743,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108600,"byte_end":108603,"line_start":1744,"line_end":1744,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(valid_chunks, vec![\"foo\", \"bar\"]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108608,"byte_end":108657,"line_start":1745,"line_end":1745,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(invalid_chunks, vec![b\"\\xFD\", b\"\\xFE\", b\"\\xFF\"]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108662,"byte_end":108726,"line_start":1746,"line_end":1746,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108731,"byte_end":108738,"line_start":1747,"line_end":1747,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108743,"byte_end":108752,"line_start":1748,"line_end":1748,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109817,"byte_end":109826,"line_start":1781,"line_end":1781,"column_start":8,"column_end":17},"name":"graphemes","qualname":"::ext_slice::ByteSlice::graphemes","value":"fn (&self) -> Graphemes","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the grapheme clusters in this byte string.\n If invalid UTF-8 is encountered, then the Unicode replacement codepoint\n is yielded instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the grapheme clusters in this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108852,"byte_end":108923,"line_start":1753,"line_end":1753,"column_start":5,"column_end":76}},{"value":"/ If invalid UTF-8 is encountered, then the Unicode replacement codepoint","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":108928,"byte_end":109003,"line_start":1754,"line_end":1754,"column_start":5,"column_end":80}},{"value":"/ is yielded instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109008,"byte_end":109031,"line_start":1755,"line_end":1755,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109036,"byte_end":109039,"line_start":1756,"line_end":1756,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109044,"byte_end":109058,"line_start":1757,"line_end":1757,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109063,"byte_end":109066,"line_start":1758,"line_end":1758,"column_start":5,"column_end":8}},{"value":"/ This example shows how multiple codepoints can combine to form a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109071,"byte_end":109139,"line_start":1759,"line_end":1759,"column_start":5,"column_end":73}},{"value":"/ single grapheme cluster:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109144,"byte_end":109172,"line_start":1760,"line_end":1760,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109177,"byte_end":109180,"line_start":1761,"line_end":1761,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109185,"byte_end":109192,"line_start":1762,"line_end":1762,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109197,"byte_end":109221,"line_start":1763,"line_end":1763,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109226,"byte_end":109229,"line_start":1764,"line_end":1764,"column_start":5,"column_end":8}},{"value":"/ let bs = \"a\\u{0300}\\u{0316}\\u{1F1FA}\\u{1F1F8}\".as_bytes();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109234,"byte_end":109296,"line_start":1765,"line_end":1765,"column_start":5,"column_end":67}},{"value":"/ let graphemes: Vec<&str> = bs.graphemes().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109301,"byte_end":109357,"line_start":1766,"line_end":1766,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(vec![\"à̖\", \"🇺🇸\"], graphemes);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109362,"byte_end":109415,"line_start":1767,"line_end":1767,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109420,"byte_end":109427,"line_start":1768,"line_end":1768,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109432,"byte_end":109435,"line_start":1769,"line_end":1769,"column_start":5,"column_end":8}},{"value":"/ This shows that graphemes can be iterated over in reverse:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109440,"byte_end":109502,"line_start":1770,"line_end":1770,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109507,"byte_end":109510,"line_start":1771,"line_end":1771,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109515,"byte_end":109522,"line_start":1772,"line_end":1772,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109527,"byte_end":109551,"line_start":1773,"line_end":1773,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109556,"byte_end":109559,"line_start":1774,"line_end":1774,"column_start":5,"column_end":8}},{"value":"/ let bs = \"a\\u{0300}\\u{0316}\\u{1F1FA}\\u{1F1F8}\".as_bytes();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109564,"byte_end":109626,"line_start":1775,"line_end":1775,"column_start":5,"column_end":67}},{"value":"/ let graphemes: Vec<&str> = bs.graphemes().rev().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109631,"byte_end":109693,"line_start":1776,"line_end":1776,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(vec![\"🇺🇸\", \"à̖\"], graphemes);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109698,"byte_end":109751,"line_start":1777,"line_end":1777,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109756,"byte_end":109763,"line_start":1778,"line_end":1778,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109768,"byte_end":109795,"line_start":1779,"line_end":1779,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109800,"byte_end":109809,"line_start":1780,"line_end":1780,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111345,"byte_end":111361,"line_start":1825,"line_end":1825,"column_start":8,"column_end":24},"name":"grapheme_indices","qualname":"::ext_slice::ByteSlice::grapheme_indices","value":"fn (&self) -> GraphemeIndices","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the grapheme clusters in this byte string\n along with their starting and ending byte index positions. If invalid\n UTF-8 is encountered, then the Unicode replacement codepoint is yielded\n instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the grapheme clusters in this byte string","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109900,"byte_end":109970,"line_start":1785,"line_end":1785,"column_start":5,"column_end":75}},{"value":"/ along with their starting and ending byte index positions. If invalid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":109975,"byte_end":110048,"line_start":1786,"line_end":1786,"column_start":5,"column_end":78}},{"value":"/ UTF-8 is encountered, then the Unicode replacement codepoint is yielded","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110053,"byte_end":110128,"line_start":1787,"line_end":1787,"column_start":5,"column_end":80}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110133,"byte_end":110145,"line_start":1788,"line_end":1788,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110150,"byte_end":110153,"line_start":1789,"line_end":1789,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110158,"byte_end":110172,"line_start":1790,"line_end":1790,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110177,"byte_end":110180,"line_start":1791,"line_end":1791,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the byte offsets of each individual","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110185,"byte_end":110254,"line_start":1792,"line_end":1792,"column_start":5,"column_end":74}},{"value":"/ grapheme cluster:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110259,"byte_end":110280,"line_start":1793,"line_end":1793,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110285,"byte_end":110288,"line_start":1794,"line_end":1794,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110293,"byte_end":110300,"line_start":1795,"line_end":1795,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110305,"byte_end":110329,"line_start":1796,"line_end":1796,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110334,"byte_end":110337,"line_start":1797,"line_end":1797,"column_start":5,"column_end":8}},{"value":"/ let bs = \"a\\u{0300}\\u{0316}\\u{1F1FA}\\u{1F1F8}\".as_bytes();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110342,"byte_end":110404,"line_start":1798,"line_end":1798,"column_start":5,"column_end":67}},{"value":"/ let graphemes: Vec<(usize, usize, &str)> =","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110409,"byte_end":110455,"line_start":1799,"line_end":1799,"column_start":5,"column_end":51}},{"value":"/     bs.grapheme_indices().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110460,"byte_end":110500,"line_start":1800,"line_end":1800,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(vec![(0, 5, \"à̖\"), (5, 13, \"🇺🇸\")], graphemes);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110505,"byte_end":110575,"line_start":1801,"line_end":1801,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110580,"byte_end":110587,"line_start":1802,"line_end":1802,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110592,"byte_end":110595,"line_start":1803,"line_end":1803,"column_start":5,"column_end":8}},{"value":"/ This example shows what happens when invalid UTF-8 is enountered. Note","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110600,"byte_end":110674,"line_start":1804,"line_end":1804,"column_start":5,"column_end":79}},{"value":"/ that the offsets are valid indices into the original string, and do","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110679,"byte_end":110750,"line_start":1805,"line_end":1805,"column_start":5,"column_end":76}},{"value":"/ not necessarily correspond to the length of the `&str` returned!","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110755,"byte_end":110823,"line_start":1806,"line_end":1806,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110828,"byte_end":110831,"line_start":1807,"line_end":1807,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110836,"byte_end":110843,"line_start":1808,"line_end":1808,"column_start":5,"column_end":12}},{"value":"/ use bstr::{ByteSlice, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110848,"byte_end":110883,"line_start":1809,"line_end":1809,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110888,"byte_end":110891,"line_start":1810,"line_end":1810,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110896,"byte_end":110923,"line_start":1811,"line_end":1811,"column_start":5,"column_end":32}},{"value":"/ bytes.push_str(\"a\\u{0300}\\u{0316}\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110928,"byte_end":110968,"line_start":1812,"line_end":1812,"column_start":5,"column_end":45}},{"value":"/ bytes.push(b'\\xFF');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":110973,"byte_end":110997,"line_start":1813,"line_end":1813,"column_start":5,"column_end":29}},{"value":"/ bytes.push_str(\"\\u{1F1FA}\\u{1F1F8}\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111002,"byte_end":111043,"line_start":1814,"line_end":1814,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111048,"byte_end":111051,"line_start":1815,"line_end":1815,"column_start":5,"column_end":8}},{"value":"/ let graphemes: Vec<(usize, usize, &str)> =","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111056,"byte_end":111102,"line_start":1816,"line_end":1816,"column_start":5,"column_end":51}},{"value":"/     bytes.grapheme_indices().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111107,"byte_end":111150,"line_start":1817,"line_end":1817,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111155,"byte_end":111170,"line_start":1818,"line_end":1818,"column_start":5,"column_end":20}},{"value":"/     graphemes,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111175,"byte_end":111193,"line_start":1819,"line_end":1819,"column_start":5,"column_end":23}},{"value":"/     vec![(0, 5, \"à̖\"), (5, 6, \"\\u{FFFD}\"), (6, 14, \"🇺🇸\")]","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111198,"byte_end":111268,"line_start":1820,"line_end":1820,"column_start":5,"column_end":67}},{"value":"/ );","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111273,"byte_end":111279,"line_start":1821,"line_end":1821,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111284,"byte_end":111291,"line_start":1822,"line_end":1822,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111296,"byte_end":111323,"line_start":1823,"line_end":1823,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111328,"byte_end":111337,"line_start":1824,"line_end":1824,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112729,"byte_end":112734,"line_start":1861,"line_end":1861,"column_start":8,"column_end":13},"name":"words","qualname":"::ext_slice::ByteSlice::words","value":"fn (&self) -> Words","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the words in this byte string. If invalid\n UTF-8 is encountered, then the Unicode replacement codepoint is yielded\n instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the words in this byte string. If invalid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111447,"byte_end":111517,"line_start":1829,"line_end":1829,"column_start":5,"column_end":75}},{"value":"/ UTF-8 is encountered, then the Unicode replacement codepoint is yielded","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111522,"byte_end":111597,"line_start":1830,"line_end":1830,"column_start":5,"column_end":80}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111602,"byte_end":111614,"line_start":1831,"line_end":1831,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111619,"byte_end":111622,"line_start":1832,"line_end":1832,"column_start":5,"column_end":8}},{"value":"/ This is similar to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111627,"byte_end":111649,"line_start":1833,"line_end":1833,"column_start":5,"column_end":27}},{"value":"/ [`words_with_breaks`](trait.ByteSlice.html#method.words_with_breaks),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111654,"byte_end":111727,"line_start":1834,"line_end":1834,"column_start":5,"column_end":78}},{"value":"/ except it only returns elements that contain a \"word\" character. A word","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111732,"byte_end":111807,"line_start":1835,"line_end":1835,"column_start":5,"column_end":80}},{"value":"/ character is defined by UTS #18 (Annex C) to be the combination of the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111812,"byte_end":111886,"line_start":1836,"line_end":1836,"column_start":5,"column_end":79}},{"value":"/ `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111891,"byte_end":111953,"line_start":1837,"line_end":1837,"column_start":5,"column_end":67}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":111958,"byte_end":112022,"line_start":1838,"line_end":1838,"column_start":5,"column_end":69}},{"value":"/ categories.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112027,"byte_end":112042,"line_start":1839,"line_end":1839,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112047,"byte_end":112050,"line_start":1840,"line_end":1840,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112055,"byte_end":112123,"line_start":1841,"line_end":1841,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112128,"byte_end":112202,"line_start":1842,"line_end":1842,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112207,"byte_end":112278,"line_start":1843,"line_end":1843,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112283,"byte_end":112286,"line_start":1844,"line_end":1844,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112291,"byte_end":112305,"line_start":1845,"line_end":1845,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112310,"byte_end":112313,"line_start":1846,"line_end":1846,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112318,"byte_end":112334,"line_start":1847,"line_end":1847,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112339,"byte_end":112342,"line_start":1848,"line_end":1848,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112347,"byte_end":112354,"line_start":1849,"line_end":1849,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112359,"byte_end":112383,"line_start":1850,"line_end":1850,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112388,"byte_end":112391,"line_start":1851,"line_end":1851,"column_start":5,"column_end":8}},{"value":"/ let bs = br#\"The quick (\"brown\") fox can't jump 32.3 feet, right?\"#;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112396,"byte_end":112468,"line_start":1852,"line_end":1852,"column_start":5,"column_end":77}},{"value":"/ let words: Vec<&str> = bs.words().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112473,"byte_end":112521,"line_start":1853,"line_end":1853,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112526,"byte_end":112553,"line_start":1854,"line_end":1854,"column_start":5,"column_end":32}},{"value":"/     \"The\", \"quick\", \"brown\", \"fox\", \"can't\",","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112558,"byte_end":112606,"line_start":1855,"line_end":1855,"column_start":5,"column_end":53}},{"value":"/     \"jump\", \"32.3\", \"feet\", \"right\",","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112611,"byte_end":112651,"line_start":1856,"line_end":1856,"column_start":5,"column_end":45}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112656,"byte_end":112663,"line_start":1857,"line_end":1857,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112668,"byte_end":112675,"line_start":1858,"line_end":1858,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112680,"byte_end":112707,"line_start":1859,"line_end":1859,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112712,"byte_end":112721,"line_start":1860,"line_end":1860,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114129,"byte_end":114141,"line_start":1899,"line_end":1899,"column_start":8,"column_end":20},"name":"word_indices","qualname":"::ext_slice::ByteSlice::word_indices","value":"fn (&self) -> WordIndices","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the words in this byte string along with\n their starting and ending byte index positions.","sig":null,"attributes":[{"value":"/ Returns an iterator over the words in this byte string along with","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112800,"byte_end":112869,"line_start":1865,"line_end":1865,"column_start":5,"column_end":74}},{"value":"/ their starting and ending byte index positions.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112874,"byte_end":112925,"line_start":1866,"line_end":1866,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112930,"byte_end":112933,"line_start":1867,"line_end":1867,"column_start":5,"column_end":8}},{"value":"/ This is similar to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112938,"byte_end":112960,"line_start":1868,"line_end":1868,"column_start":5,"column_end":27}},{"value":"/ [`words_with_break_indices`](trait.ByteSlice.html#method.words_with_break_indices),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":112965,"byte_end":113052,"line_start":1869,"line_end":1869,"column_start":5,"column_end":92}},{"value":"/ except it only returns elements that contain a \"word\" character. A word","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113057,"byte_end":113132,"line_start":1870,"line_end":1870,"column_start":5,"column_end":80}},{"value":"/ character is defined by UTS #18 (Annex C) to be the combination of the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113137,"byte_end":113211,"line_start":1871,"line_end":1871,"column_start":5,"column_end":79}},{"value":"/ `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113216,"byte_end":113278,"line_start":1872,"line_end":1872,"column_start":5,"column_end":67}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113283,"byte_end":113347,"line_start":1873,"line_end":1873,"column_start":5,"column_end":69}},{"value":"/ categories.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113352,"byte_end":113367,"line_start":1874,"line_end":1874,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113372,"byte_end":113375,"line_start":1875,"line_end":1875,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113380,"byte_end":113448,"line_start":1876,"line_end":1876,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113453,"byte_end":113527,"line_start":1877,"line_end":1877,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113532,"byte_end":113603,"line_start":1878,"line_end":1878,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113608,"byte_end":113611,"line_start":1879,"line_end":1879,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113616,"byte_end":113630,"line_start":1880,"line_end":1880,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113635,"byte_end":113638,"line_start":1881,"line_end":1881,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the byte offsets of each individual","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113643,"byte_end":113712,"line_start":1882,"line_end":1882,"column_start":5,"column_end":74}},{"value":"/ word:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113717,"byte_end":113726,"line_start":1883,"line_end":1883,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113731,"byte_end":113734,"line_start":1884,"line_end":1884,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113739,"byte_end":113746,"line_start":1885,"line_end":1885,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113751,"byte_end":113775,"line_start":1886,"line_end":1886,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113780,"byte_end":113783,"line_start":1887,"line_end":1887,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"can't jump 32.3 feet\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113788,"byte_end":113825,"line_start":1888,"line_end":1888,"column_start":5,"column_end":42}},{"value":"/ let words: Vec<(usize, usize, &str)> = bs.word_indices().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113830,"byte_end":113901,"line_start":1889,"line_end":1889,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113906,"byte_end":113933,"line_start":1890,"line_end":1890,"column_start":5,"column_end":32}},{"value":"/     (0, 5, \"can't\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113938,"byte_end":113962,"line_start":1891,"line_end":1891,"column_start":5,"column_end":29}},{"value":"/     (6, 10, \"jump\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113967,"byte_end":113991,"line_start":1892,"line_end":1892,"column_start":5,"column_end":29}},{"value":"/     (11, 15, \"32.3\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":113996,"byte_end":114021,"line_start":1893,"line_end":1893,"column_start":5,"column_end":30}},{"value":"/     (16, 20, \"feet\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114026,"byte_end":114051,"line_start":1894,"line_end":1894,"column_start":5,"column_end":30}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114056,"byte_end":114063,"line_start":1895,"line_end":1895,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114068,"byte_end":114075,"line_start":1896,"line_end":1896,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114080,"byte_end":114107,"line_start":1897,"line_end":1897,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114112,"byte_end":114121,"line_start":1898,"line_end":1898,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115294,"byte_end":115311,"line_start":1929,"line_end":1929,"column_start":8,"column_end":25},"name":"words_with_breaks","qualname":"::ext_slice::ByteSlice::words_with_breaks","value":"fn (&self) -> WordsWithBreaks","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the words in this byte string, along with\n all breaks between the words. Concatenating all elements yielded by\n the iterator results in the original string (modulo Unicode replacement\n codepoint substitutions if invalid UTF-8 is encountered).","sig":null,"attributes":[{"value":"/ Returns an iterator over the words in this byte string, along with","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114219,"byte_end":114289,"line_start":1903,"line_end":1903,"column_start":5,"column_end":75}},{"value":"/ all breaks between the words. Concatenating all elements yielded by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114294,"byte_end":114365,"line_start":1904,"line_end":1904,"column_start":5,"column_end":76}},{"value":"/ the iterator results in the original string (modulo Unicode replacement","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114370,"byte_end":114445,"line_start":1905,"line_end":1905,"column_start":5,"column_end":80}},{"value":"/ codepoint substitutions if invalid UTF-8 is encountered).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114450,"byte_end":114511,"line_start":1906,"line_end":1906,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114516,"byte_end":114519,"line_start":1907,"line_end":1907,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114524,"byte_end":114592,"line_start":1908,"line_end":1908,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114597,"byte_end":114671,"line_start":1909,"line_end":1909,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114676,"byte_end":114747,"line_start":1910,"line_end":1910,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114752,"byte_end":114755,"line_start":1911,"line_end":1911,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114760,"byte_end":114774,"line_start":1912,"line_end":1912,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114779,"byte_end":114782,"line_start":1913,"line_end":1913,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114787,"byte_end":114803,"line_start":1914,"line_end":1914,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114808,"byte_end":114811,"line_start":1915,"line_end":1915,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114816,"byte_end":114823,"line_start":1916,"line_end":1916,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114828,"byte_end":114852,"line_start":1917,"line_end":1917,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114857,"byte_end":114860,"line_start":1918,"line_end":1918,"column_start":5,"column_end":8}},{"value":"/ let bs = br#\"The quick (\"brown\") fox can't jump 32.3 feet, right?\"#;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114865,"byte_end":114937,"line_start":1919,"line_end":1919,"column_start":5,"column_end":77}},{"value":"/ let words: Vec<&str> = bs.words_with_breaks().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":114942,"byte_end":115002,"line_start":1920,"line_end":1920,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115007,"byte_end":115034,"line_start":1921,"line_end":1921,"column_start":5,"column_end":32}},{"value":"/     \"The\", \" \", \"quick\", \" \", \"(\", \"\\\"\", \"brown\", \"\\\"\", \")\",","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115039,"byte_end":115103,"line_start":1922,"line_end":1922,"column_start":5,"column_end":69}},{"value":"/     \" \", \"fox\", \" \", \"can't\", \" \", \"jump\", \" \", \"32.3\", \" \", \"feet\",","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115108,"byte_end":115180,"line_start":1923,"line_end":1923,"column_start":5,"column_end":77}},{"value":"/     \",\", \" \", \"right\", \"?\",","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115185,"byte_end":115216,"line_start":1924,"line_end":1924,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115221,"byte_end":115228,"line_start":1925,"line_end":1925,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115233,"byte_end":115240,"line_start":1926,"line_end":1926,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115245,"byte_end":115272,"line_start":1927,"line_end":1927,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115277,"byte_end":115286,"line_start":1928,"line_end":1928,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116585,"byte_end":116609,"line_start":1966,"line_end":1966,"column_start":8,"column_end":32},"name":"words_with_break_indices","qualname":"::ext_slice::ByteSlice::words_with_break_indices","value":"fn (&self) -> WordsWithBreakIndices","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the words and their byte offsets in this\n byte string, along with all breaks between the words. Concatenating\n all elements yielded by the iterator results in the original string\n (modulo Unicode replacement codepoint substitutions if invalid UTF-8 is\n encountered).","sig":null,"attributes":[{"value":"/ Returns an iterator over the words and their byte offsets in this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115397,"byte_end":115466,"line_start":1933,"line_end":1933,"column_start":5,"column_end":74}},{"value":"/ byte string, along with all breaks between the words. Concatenating","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115471,"byte_end":115542,"line_start":1934,"line_end":1934,"column_start":5,"column_end":76}},{"value":"/ all elements yielded by the iterator results in the original string","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115547,"byte_end":115618,"line_start":1935,"line_end":1935,"column_start":5,"column_end":76}},{"value":"/ (modulo Unicode replacement codepoint substitutions if invalid UTF-8 is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115623,"byte_end":115698,"line_start":1936,"line_end":1936,"column_start":5,"column_end":80}},{"value":"/ encountered).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115703,"byte_end":115720,"line_start":1937,"line_end":1937,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115725,"byte_end":115728,"line_start":1938,"line_end":1938,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115733,"byte_end":115801,"line_start":1939,"line_end":1939,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115806,"byte_end":115880,"line_start":1940,"line_end":1940,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115885,"byte_end":115956,"line_start":1941,"line_end":1941,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115961,"byte_end":115964,"line_start":1942,"line_end":1942,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115969,"byte_end":115983,"line_start":1943,"line_end":1943,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115988,"byte_end":115991,"line_start":1944,"line_end":1944,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the byte offsets of each individual","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":115996,"byte_end":116065,"line_start":1945,"line_end":1945,"column_start":5,"column_end":74}},{"value":"/ word:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116070,"byte_end":116079,"line_start":1946,"line_end":1946,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116084,"byte_end":116087,"line_start":1947,"line_end":1947,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116092,"byte_end":116099,"line_start":1948,"line_end":1948,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116104,"byte_end":116128,"line_start":1949,"line_end":1949,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116133,"byte_end":116136,"line_start":1950,"line_end":1950,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"can't jump 32.3 feet\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116141,"byte_end":116178,"line_start":1951,"line_end":1951,"column_start":5,"column_end":42}},{"value":"/ let words: Vec<(usize, usize, &str)> =","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116183,"byte_end":116225,"line_start":1952,"line_end":1952,"column_start":5,"column_end":47}},{"value":"/     bs.words_with_break_indices().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116230,"byte_end":116278,"line_start":1953,"line_end":1953,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116283,"byte_end":116310,"line_start":1954,"line_end":1954,"column_start":5,"column_end":32}},{"value":"/     (0, 5, \"can't\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116315,"byte_end":116339,"line_start":1955,"line_end":1955,"column_start":5,"column_end":29}},{"value":"/     (5, 6, \" \"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116344,"byte_end":116364,"line_start":1956,"line_end":1956,"column_start":5,"column_end":25}},{"value":"/     (6, 10, \"jump\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116369,"byte_end":116393,"line_start":1957,"line_end":1957,"column_start":5,"column_end":29}},{"value":"/     (10, 11, \" \"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116398,"byte_end":116420,"line_start":1958,"line_end":1958,"column_start":5,"column_end":27}},{"value":"/     (11, 15, \"32.3\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116425,"byte_end":116450,"line_start":1959,"line_end":1959,"column_start":5,"column_end":30}},{"value":"/     (15, 16, \" \"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116455,"byte_end":116477,"line_start":1960,"line_end":1960,"column_start":5,"column_end":27}},{"value":"/     (16, 20, \"feet\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116482,"byte_end":116507,"line_start":1961,"line_end":1961,"column_start":5,"column_end":30}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116512,"byte_end":116519,"line_start":1962,"line_end":1962,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116524,"byte_end":116531,"line_start":1963,"line_end":1963,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116536,"byte_end":116563,"line_start":1964,"line_end":1964,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116568,"byte_end":116577,"line_start":1965,"line_end":1965,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117718,"byte_end":117727,"line_start":1998,"line_end":1998,"column_start":8,"column_end":17},"name":"sentences","qualname":"::ext_slice::ByteSlice::sentences","value":"fn (&self) -> Sentences","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the sentences in this byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the sentences in this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116707,"byte_end":116770,"line_start":1970,"line_end":1970,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116775,"byte_end":116778,"line_start":1971,"line_end":1971,"column_start":5,"column_end":8}},{"value":"/ Typically, a sentence will include its trailing punctuation and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116783,"byte_end":116850,"line_start":1972,"line_end":1972,"column_start":5,"column_end":72}},{"value":"/ whitespace. Concatenating all elements yielded by the iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116855,"byte_end":116921,"line_start":1973,"line_end":1973,"column_start":5,"column_end":71}},{"value":"/ results in the original string (modulo Unicode replacement codepoint","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":116926,"byte_end":116998,"line_start":1974,"line_end":1974,"column_start":5,"column_end":77}},{"value":"/ substitutions if invalid UTF-8 is encountered).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117003,"byte_end":117054,"line_start":1975,"line_end":1975,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117059,"byte_end":117062,"line_start":1976,"line_end":1976,"column_start":5,"column_end":8}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117067,"byte_end":117139,"line_start":1977,"line_end":1977,"column_start":5,"column_end":77}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117144,"byte_end":117218,"line_start":1978,"line_end":1978,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117223,"byte_end":117294,"line_start":1979,"line_end":1979,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117299,"byte_end":117302,"line_start":1980,"line_end":1980,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117307,"byte_end":117321,"line_start":1981,"line_end":1981,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117326,"byte_end":117329,"line_start":1982,"line_end":1982,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117334,"byte_end":117350,"line_start":1983,"line_end":1983,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117355,"byte_end":117358,"line_start":1984,"line_end":1984,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117363,"byte_end":117370,"line_start":1985,"line_end":1985,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117375,"byte_end":117399,"line_start":1986,"line_end":1986,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117404,"byte_end":117407,"line_start":1987,"line_end":1987,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"I want this. Not that. Right now.\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117412,"byte_end":117462,"line_start":1988,"line_end":1988,"column_start":5,"column_end":55}},{"value":"/ let sentences: Vec<&str> = bs.sentences().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117467,"byte_end":117523,"line_start":1989,"line_end":1989,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(sentences, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117528,"byte_end":117559,"line_start":1990,"line_end":1990,"column_start":5,"column_end":36}},{"value":"/     \"I want this. \",","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117564,"byte_end":117588,"line_start":1991,"line_end":1991,"column_start":5,"column_end":29}},{"value":"/     \"Not that. \",","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117593,"byte_end":117614,"line_start":1992,"line_end":1992,"column_start":5,"column_end":26}},{"value":"/     \"Right now.\",","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117619,"byte_end":117640,"line_start":1993,"line_end":1993,"column_start":5,"column_end":26}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117645,"byte_end":117652,"line_start":1994,"line_end":1994,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117657,"byte_end":117664,"line_start":1995,"line_end":1995,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117669,"byte_end":117696,"line_start":1996,"line_end":1996,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117701,"byte_end":117710,"line_start":1997,"line_end":1997,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118942,"byte_end":118958,"line_start":2032,"line_end":2032,"column_start":8,"column_end":24},"name":"sentence_indices","qualname":"::ext_slice::ByteSlice::sentence_indices","value":"fn (&self) -> SentenceIndices","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the sentences in this byte string along with\n their starting and ending byte index positions.","sig":null,"attributes":[{"value":"/ Returns an iterator over the sentences in this byte string along with","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117801,"byte_end":117874,"line_start":2002,"line_end":2002,"column_start":5,"column_end":78}},{"value":"/ their starting and ending byte index positions.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117879,"byte_end":117930,"line_start":2003,"line_end":2003,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117935,"byte_end":117938,"line_start":2004,"line_end":2004,"column_start":5,"column_end":8}},{"value":"/ Typically, a sentence will include its trailing punctuation and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":117943,"byte_end":118010,"line_start":2005,"line_end":2005,"column_start":5,"column_end":72}},{"value":"/ whitespace. Concatenating all elements yielded by the iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118015,"byte_end":118081,"line_start":2006,"line_end":2006,"column_start":5,"column_end":71}},{"value":"/ results in the original string (modulo Unicode replacement codepoint","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118086,"byte_end":118158,"line_start":2007,"line_end":2007,"column_start":5,"column_end":77}},{"value":"/ substitutions if invalid UTF-8 is encountered).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118163,"byte_end":118214,"line_start":2008,"line_end":2008,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118219,"byte_end":118222,"line_start":2009,"line_end":2009,"column_start":5,"column_end":8}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118227,"byte_end":118299,"line_start":2010,"line_end":2010,"column_start":5,"column_end":77}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118304,"byte_end":118378,"line_start":2011,"line_end":2011,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118383,"byte_end":118454,"line_start":2012,"line_end":2012,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118459,"byte_end":118462,"line_start":2013,"line_end":2013,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118467,"byte_end":118481,"line_start":2014,"line_end":2014,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118486,"byte_end":118489,"line_start":2015,"line_end":2015,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118494,"byte_end":118510,"line_start":2016,"line_end":2016,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118515,"byte_end":118518,"line_start":2017,"line_end":2017,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118523,"byte_end":118530,"line_start":2018,"line_end":2018,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118535,"byte_end":118559,"line_start":2019,"line_end":2019,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118564,"byte_end":118567,"line_start":2020,"line_end":2020,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"I want this. Not that. Right now.\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118572,"byte_end":118622,"line_start":2021,"line_end":2021,"column_start":5,"column_end":55}},{"value":"/ let sentences: Vec<(usize, usize, &str)> =","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118627,"byte_end":118673,"line_start":2022,"line_end":2022,"column_start":5,"column_end":51}},{"value":"/     bs.sentence_indices().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118678,"byte_end":118718,"line_start":2023,"line_end":2023,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(sentences, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118723,"byte_end":118754,"line_start":2024,"line_end":2024,"column_start":5,"column_end":36}},{"value":"/     (0, 13, \"I want this. \"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118759,"byte_end":118792,"line_start":2025,"line_end":2025,"column_start":5,"column_end":38}},{"value":"/     (13, 23, \"Not that. \"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118797,"byte_end":118828,"line_start":2026,"line_end":2026,"column_start":5,"column_end":36}},{"value":"/     (23, 33, \"Right now.\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118833,"byte_end":118864,"line_start":2027,"line_end":2027,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118869,"byte_end":118876,"line_start":2028,"line_end":2028,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118881,"byte_end":118888,"line_start":2029,"line_end":2029,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118893,"byte_end":118920,"line_start":2030,"line_end":2030,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":118925,"byte_end":118934,"line_start":2031,"line_end":2031,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119648,"byte_end":119653,"line_start":2063,"line_end":2063,"column_start":8,"column_end":13},"name":"lines","qualname":"::ext_slice::ByteSlice::lines","value":"fn (&self) -> Lines","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" An iterator over all lines in a byte string, without their\n terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, without their","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119044,"byte_end":119106,"line_start":2036,"line_end":2036,"column_start":5,"column_end":67}},{"value":"/ terminators.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119111,"byte_end":119127,"line_start":2037,"line_end":2037,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119132,"byte_end":119135,"line_start":2038,"line_end":2038,"column_start":5,"column_end":8}},{"value":"/ For this iterator, the only line terminators recognized are `\\r\\n` and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119140,"byte_end":119214,"line_start":2039,"line_end":2039,"column_start":5,"column_end":79}},{"value":"/ `\\n`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119219,"byte_end":119228,"line_start":2040,"line_end":2040,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119233,"byte_end":119236,"line_start":2041,"line_end":2041,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119241,"byte_end":119255,"line_start":2042,"line_end":2042,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119260,"byte_end":119263,"line_start":2043,"line_end":2043,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119268,"byte_end":119284,"line_start":2044,"line_end":2044,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119289,"byte_end":119292,"line_start":2045,"line_end":2045,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119297,"byte_end":119304,"line_start":2046,"line_end":2046,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119309,"byte_end":119338,"line_start":2047,"line_end":2047,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119343,"byte_end":119346,"line_start":2048,"line_end":2048,"column_start":5,"column_end":8}},{"value":"/ let s = b\"\\","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119351,"byte_end":119366,"line_start":2049,"line_end":2049,"column_start":5,"column_end":20}},{"value":"/ foo","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119371,"byte_end":119378,"line_start":2050,"line_end":2050,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119383,"byte_end":119386,"line_start":2051,"line_end":2051,"column_start":5,"column_end":8}},{"value":"/ bar\\r","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119391,"byte_end":119400,"line_start":2052,"line_end":2052,"column_start":5,"column_end":14}},{"value":"/ baz","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119405,"byte_end":119412,"line_start":2053,"line_end":2053,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119417,"byte_end":119420,"line_start":2054,"line_end":2054,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119425,"byte_end":119428,"line_start":2055,"line_end":2055,"column_start":5,"column_end":8}},{"value":"/ quux\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119433,"byte_end":119443,"line_start":2056,"line_end":2056,"column_start":5,"column_end":15}},{"value":"/ let lines: Vec<&[u8]> = s.lines().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119448,"byte_end":119496,"line_start":2057,"line_end":2057,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(lines, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119501,"byte_end":119528,"line_start":2058,"line_end":2058,"column_start":5,"column_end":32}},{"value":"/     B(\"foo\"), B(\"\"), B(\"bar\"), B(\"baz\"), B(\"\"), B(\"\"), B(\"quux\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119533,"byte_end":119602,"line_start":2059,"line_end":2059,"column_start":5,"column_end":74}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119607,"byte_end":119614,"line_start":2060,"line_end":2060,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119619,"byte_end":119626,"line_start":2061,"line_end":2061,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119631,"byte_end":119640,"line_start":2062,"line_end":2062,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120813,"byte_end":120834,"line_start":2107,"line_end":2107,"column_start":8,"column_end":29},"name":"lines_with_terminator","qualname":"::ext_slice::ByteSlice::lines_with_terminator","value":"fn (&self) -> LinesWithTerminator","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" An iterator over all lines in a byte string, including their\n terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, including their","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119719,"byte_end":119783,"line_start":2067,"line_end":2067,"column_start":5,"column_end":69}},{"value":"/ terminators.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119788,"byte_end":119804,"line_start":2068,"line_end":2068,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119809,"byte_end":119812,"line_start":2069,"line_end":2069,"column_start":5,"column_end":8}},{"value":"/ For this iterator, the only line terminator recognized is `\\n`. (Since","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119817,"byte_end":119891,"line_start":2070,"line_end":2070,"column_start":5,"column_end":79}},{"value":"/ line terminators are included, this also handles `\\r\\n` line endings.)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119896,"byte_end":119970,"line_start":2071,"line_end":2071,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119975,"byte_end":119978,"line_start":2072,"line_end":2072,"column_start":5,"column_end":8}},{"value":"/ Line terminators are only included if they are present in the original","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":119983,"byte_end":120057,"line_start":2073,"line_end":2073,"column_start":5,"column_end":79}},{"value":"/ byte string. For example, the last line in a byte string may not end","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120062,"byte_end":120134,"line_start":2074,"line_end":2074,"column_start":5,"column_end":77}},{"value":"/ with a line terminator.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120139,"byte_end":120166,"line_start":2075,"line_end":2075,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120171,"byte_end":120174,"line_start":2076,"line_end":2076,"column_start":5,"column_end":8}},{"value":"/ Concatenating all elements yielded by this iterator is guaranteed to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120179,"byte_end":120251,"line_start":2077,"line_end":2077,"column_start":5,"column_end":77}},{"value":"/ yield the original byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120256,"byte_end":120291,"line_start":2078,"line_end":2078,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120296,"byte_end":120299,"line_start":2079,"line_end":2079,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120304,"byte_end":120318,"line_start":2080,"line_end":2080,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120323,"byte_end":120326,"line_start":2081,"line_end":2081,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120331,"byte_end":120347,"line_start":2082,"line_end":2082,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120352,"byte_end":120355,"line_start":2083,"line_end":2083,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120360,"byte_end":120367,"line_start":2084,"line_end":2084,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120372,"byte_end":120401,"line_start":2085,"line_end":2085,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120406,"byte_end":120409,"line_start":2086,"line_end":2086,"column_start":5,"column_end":8}},{"value":"/ let s = b\"\\","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120414,"byte_end":120429,"line_start":2087,"line_end":2087,"column_start":5,"column_end":20}},{"value":"/ foo","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120434,"byte_end":120441,"line_start":2088,"line_end":2088,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120446,"byte_end":120449,"line_start":2089,"line_end":2089,"column_start":5,"column_end":8}},{"value":"/ bar\\r","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120454,"byte_end":120463,"line_start":2090,"line_end":2090,"column_start":5,"column_end":14}},{"value":"/ baz","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120468,"byte_end":120475,"line_start":2091,"line_end":2091,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120480,"byte_end":120483,"line_start":2092,"line_end":2092,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120488,"byte_end":120491,"line_start":2093,"line_end":2093,"column_start":5,"column_end":8}},{"value":"/ quux\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120496,"byte_end":120506,"line_start":2094,"line_end":2094,"column_start":5,"column_end":15}},{"value":"/ let lines: Vec<&[u8]> = s.lines_with_terminator().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120511,"byte_end":120575,"line_start":2095,"line_end":2095,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(lines, vec![","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120580,"byte_end":120607,"line_start":2096,"line_end":2096,"column_start":5,"column_end":32}},{"value":"/     B(\"foo\\n\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120612,"byte_end":120631,"line_start":2097,"line_end":2097,"column_start":5,"column_end":24}},{"value":"/     B(\"\\n\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120636,"byte_end":120652,"line_start":2098,"line_end":2098,"column_start":5,"column_end":21}},{"value":"/     B(\"bar\\r\\n\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120657,"byte_end":120678,"line_start":2099,"line_end":2099,"column_start":5,"column_end":26}},{"value":"/     B(\"baz\\n\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120683,"byte_end":120702,"line_start":2100,"line_end":2100,"column_start":5,"column_end":24}},{"value":"/     B(\"\\n\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120707,"byte_end":120723,"line_start":2101,"line_end":2101,"column_start":5,"column_end":21}},{"value":"/     B(\"\\n\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120728,"byte_end":120744,"line_start":2102,"line_end":2102,"column_start":5,"column_end":21}},{"value":"/     B(\"quux\"),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120749,"byte_end":120767,"line_start":2103,"line_end":2103,"column_start":5,"column_end":23}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120772,"byte_end":120779,"line_start":2104,"line_end":2104,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120784,"byte_end":120791,"line_start":2105,"line_end":2105,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120796,"byte_end":120805,"line_start":2106,"line_end":2106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121393,"byte_end":121397,"line_start":2129,"line_end":2129,"column_start":8,"column_end":12},"name":"trim","qualname":"::ext_slice::ByteSlice::trim","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading and trailing whitespace\n removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading and trailing whitespace","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":120928,"byte_end":120995,"line_start":2111,"line_end":2111,"column_start":5,"column_end":72}},{"value":"/ removed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121000,"byte_end":121012,"line_start":2112,"line_end":2112,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121017,"byte_end":121020,"line_start":2113,"line_end":2113,"column_start":5,"column_end":8}},{"value":"/ Whitespace is defined according to the terms of the `White_Space`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121025,"byte_end":121094,"line_start":2114,"line_end":2114,"column_start":5,"column_end":74}},{"value":"/ Unicode property.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121099,"byte_end":121120,"line_start":2115,"line_end":2115,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121125,"byte_end":121128,"line_start":2116,"line_end":2116,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121133,"byte_end":121147,"line_start":2117,"line_end":2117,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121152,"byte_end":121155,"line_start":2118,"line_end":2118,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121160,"byte_end":121176,"line_start":2119,"line_end":2119,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121181,"byte_end":121184,"line_start":2120,"line_end":2120,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121189,"byte_end":121196,"line_start":2121,"line_end":2121,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121201,"byte_end":121230,"line_start":2122,"line_end":2122,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121235,"byte_end":121238,"line_start":2123,"line_end":2123,"column_start":5,"column_end":8}},{"value":"/ let s = B(\" foo\\tbar\\t\\u{2003}\\n\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121243,"byte_end":121282,"line_start":2124,"line_end":2124,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(s.trim(), B(\"foo\\tbar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121287,"byte_end":121327,"line_start":2125,"line_end":2125,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121332,"byte_end":121339,"line_start":2126,"line_end":2126,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121344,"byte_end":121371,"line_start":2127,"line_end":2127,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121376,"byte_end":121385,"line_start":2128,"line_end":2128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121926,"byte_end":121936,"line_start":2150,"line_end":2150,"column_start":8,"column_end":18},"name":"trim_start","qualname":"::ext_slice::ByteSlice::trim_start","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading whitespace removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading whitespace removed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121464,"byte_end":121527,"line_start":2133,"line_end":2133,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121532,"byte_end":121535,"line_start":2134,"line_end":2134,"column_start":5,"column_end":8}},{"value":"/ Whitespace is defined according to the terms of the `White_Space`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121540,"byte_end":121609,"line_start":2135,"line_end":2135,"column_start":5,"column_end":74}},{"value":"/ Unicode property.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121614,"byte_end":121635,"line_start":2136,"line_end":2136,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121640,"byte_end":121643,"line_start":2137,"line_end":2137,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121648,"byte_end":121662,"line_start":2138,"line_end":2138,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121667,"byte_end":121670,"line_start":2139,"line_end":2139,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121675,"byte_end":121691,"line_start":2140,"line_end":2140,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121696,"byte_end":121699,"line_start":2141,"line_end":2141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121704,"byte_end":121711,"line_start":2142,"line_end":2142,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121716,"byte_end":121745,"line_start":2143,"line_end":2143,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121750,"byte_end":121753,"line_start":2144,"line_end":2144,"column_start":5,"column_end":8}},{"value":"/ let s = B(\" foo\\tbar\\t\\u{2003}\\n\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121758,"byte_end":121797,"line_start":2145,"line_end":2145,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(s.trim_start(), B(\"foo\\tbar\\t\\u{2003}\\n\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121802,"byte_end":121860,"line_start":2146,"line_end":2146,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121865,"byte_end":121872,"line_start":2147,"line_end":2147,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121877,"byte_end":121904,"line_start":2148,"line_end":2148,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":121909,"byte_end":121918,"line_start":2149,"line_end":2149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122507,"byte_end":122515,"line_start":2172,"line_end":2172,"column_start":8,"column_end":16},"name":"trim_end","qualname":"::ext_slice::ByteSlice::trim_end","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with trailing whitespace removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with trailing whitespace removed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122057,"byte_end":122121,"line_start":2155,"line_end":2155,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122126,"byte_end":122129,"line_start":2156,"line_end":2156,"column_start":5,"column_end":8}},{"value":"/ Whitespace is defined according to the terms of the `White_Space`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122134,"byte_end":122203,"line_start":2157,"line_end":2157,"column_start":5,"column_end":74}},{"value":"/ Unicode property.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122208,"byte_end":122229,"line_start":2158,"line_end":2158,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122234,"byte_end":122237,"line_start":2159,"line_end":2159,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122242,"byte_end":122256,"line_start":2160,"line_end":2160,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122261,"byte_end":122264,"line_start":2161,"line_end":2161,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122269,"byte_end":122285,"line_start":2162,"line_end":2162,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122290,"byte_end":122293,"line_start":2163,"line_end":2163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122298,"byte_end":122305,"line_start":2164,"line_end":2164,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122310,"byte_end":122339,"line_start":2165,"line_end":2165,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122344,"byte_end":122347,"line_start":2166,"line_end":2166,"column_start":5,"column_end":8}},{"value":"/ let s = B(\" foo\\tbar\\t\\u{2003}\\n\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122352,"byte_end":122391,"line_start":2167,"line_end":2167,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(s.trim_end(), B(\" foo\\tbar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122396,"byte_end":122441,"line_start":2168,"line_end":2168,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122446,"byte_end":122453,"line_start":2169,"line_end":2169,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122458,"byte_end":122485,"line_start":2170,"line_end":2170,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122490,"byte_end":122499,"line_start":2171,"line_end":2171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123000,"byte_end":123009,"line_start":2191,"line_end":2191,"column_start":8,"column_end":17},"name":"trim_with","qualname":"::ext_slice::ByteSlice::trim_with","value":"fn <F> (&self, mut trim: F) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading and trailing characters\n satisfying the given predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading and trailing characters","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122632,"byte_end":122699,"line_start":2177,"line_end":2177,"column_start":5,"column_end":72}},{"value":"/ satisfying the given predicate removed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122704,"byte_end":122747,"line_start":2178,"line_end":2178,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122752,"byte_end":122755,"line_start":2179,"line_end":2179,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122760,"byte_end":122774,"line_start":2180,"line_end":2180,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122779,"byte_end":122782,"line_start":2181,"line_end":2181,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122787,"byte_end":122803,"line_start":2182,"line_end":2182,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122808,"byte_end":122811,"line_start":2183,"line_end":2183,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122816,"byte_end":122823,"line_start":2184,"line_end":2184,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122828,"byte_end":122857,"line_start":2185,"line_end":2185,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122862,"byte_end":122865,"line_start":2186,"line_end":2186,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar789\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122870,"byte_end":122899,"line_start":2187,"line_end":2187,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s.trim_with(|c| c.is_numeric()), B(\"foo5bar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122904,"byte_end":122966,"line_start":2188,"line_end":2188,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122971,"byte_end":122978,"line_start":2189,"line_end":2189,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":122983,"byte_end":122992,"line_start":2190,"line_end":2190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123505,"byte_end":123520,"line_start":2209,"line_end":2209,"column_start":8,"column_end":23},"name":"trim_start_with","qualname":"::ext_slice::ByteSlice::trim_start_with","value":"fn <F> (&self, mut trim: F) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading characters satisfying the given\n predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading characters satisfying the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123141,"byte_end":123216,"line_start":2195,"line_end":2195,"column_start":5,"column_end":80}},{"value":"/ predicate removed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123221,"byte_end":123243,"line_start":2196,"line_end":2196,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123248,"byte_end":123251,"line_start":2197,"line_end":2197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123256,"byte_end":123270,"line_start":2198,"line_end":2198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123275,"byte_end":123278,"line_start":2199,"line_end":2199,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123283,"byte_end":123299,"line_start":2200,"line_end":2200,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123304,"byte_end":123307,"line_start":2201,"line_end":2201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123312,"byte_end":123319,"line_start":2202,"line_end":2202,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123324,"byte_end":123353,"line_start":2203,"line_end":2203,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123358,"byte_end":123361,"line_start":2204,"line_end":2204,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar789\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123366,"byte_end":123395,"line_start":2205,"line_end":2205,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s.trim_start_with(|c| c.is_numeric()), B(\"foo5bar789\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123400,"byte_end":123471,"line_start":2206,"line_end":2206,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123476,"byte_end":123483,"line_start":2207,"line_end":2207,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123488,"byte_end":123497,"line_start":2208,"line_end":2208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124104,"byte_end":124117,"line_start":2232,"line_end":2232,"column_start":8,"column_end":21},"name":"trim_end_with","qualname":"::ext_slice::ByteSlice::trim_end_with","value":"fn <F> (&self, mut trim: F) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with trailing characters satisfying the\n given predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with trailing characters satisfying the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123744,"byte_end":123814,"line_start":2218,"line_end":2218,"column_start":5,"column_end":75}},{"value":"/ given predicate removed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123819,"byte_end":123847,"line_start":2219,"line_end":2219,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123852,"byte_end":123855,"line_start":2220,"line_end":2220,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123860,"byte_end":123874,"line_start":2221,"line_end":2221,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123879,"byte_end":123882,"line_start":2222,"line_end":2222,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123887,"byte_end":123903,"line_start":2223,"line_end":2223,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123908,"byte_end":123911,"line_start":2224,"line_end":2224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123916,"byte_end":123923,"line_start":2225,"line_end":2225,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123928,"byte_end":123957,"line_start":2226,"line_end":2226,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123962,"byte_end":123965,"line_start":2227,"line_end":2227,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":123970,"byte_end":123996,"line_start":2228,"line_end":2228,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s.trim_end_with(|c| c.is_numeric()), B(\"123foo5bar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124001,"byte_end":124070,"line_start":2229,"line_end":2229,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124075,"byte_end":124082,"line_start":2230,"line_end":2230,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124087,"byte_end":124096,"line_start":2231,"line_end":2231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125900,"byte_end":125912,"line_start":2288,"line_end":2288,"column_start":8,"column_end":20},"name":"to_lowercase","qualname":"::ext_slice::ByteSlice::to_lowercase","value":"fn (&self) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the lowercase equivalent of this\n byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the lowercase equivalent of this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124347,"byte_end":124418,"line_start":2241,"line_end":2241,"column_start":5,"column_end":76}},{"value":"/ byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124423,"byte_end":124439,"line_start":2242,"line_end":2242,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124444,"byte_end":124447,"line_start":2243,"line_end":2243,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is defined according to the `Lowercase` Unicode","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124452,"byte_end":124527,"line_start":2244,"line_end":2244,"column_start":5,"column_end":80}},{"value":"/ property.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124532,"byte_end":124545,"line_start":2245,"line_end":2245,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124550,"byte_end":124553,"line_start":2246,"line_end":2246,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no lowercase variant,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124558,"byte_end":124631,"line_start":2247,"line_end":2247,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124636,"byte_end":124689,"line_start":2248,"line_end":2248,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124694,"byte_end":124697,"line_start":2249,"line_end":2249,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124702,"byte_end":124776,"line_start":2250,"line_end":2250,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124781,"byte_end":124853,"line_start":2251,"line_end":2251,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124858,"byte_end":124931,"line_start":2252,"line_end":2252,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124936,"byte_end":124957,"line_start":2253,"line_end":2253,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124962,"byte_end":124965,"line_start":2254,"line_end":2254,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":124970,"byte_end":125044,"line_start":2255,"line_end":2255,"column_start":5,"column_end":79}},{"value":"/ [`to_lowercase_into`](#method.to_lowercase_into) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125049,"byte_end":125110,"line_start":2256,"line_end":2256,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125115,"byte_end":125118,"line_start":2257,"line_end":2257,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125123,"byte_end":125137,"line_start":2258,"line_end":2258,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125142,"byte_end":125145,"line_start":2259,"line_end":2259,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125150,"byte_end":125166,"line_start":2260,"line_end":2260,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125171,"byte_end":125174,"line_start":2261,"line_end":2261,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125179,"byte_end":125186,"line_start":2262,"line_end":2262,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125191,"byte_end":125220,"line_start":2263,"line_end":2263,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125225,"byte_end":125228,"line_start":2264,"line_end":2264,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"HELLO Β\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125233,"byte_end":125259,"line_start":2265,"line_end":2265,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(\"hello β\".as_bytes(), s.to_lowercase().as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125264,"byte_end":125331,"line_start":2266,"line_end":2266,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125336,"byte_end":125343,"line_start":2267,"line_end":2267,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125348,"byte_end":125351,"line_start":2268,"line_end":2268,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125356,"byte_end":125397,"line_start":2269,"line_end":2269,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125402,"byte_end":125405,"line_start":2270,"line_end":2270,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125410,"byte_end":125417,"line_start":2271,"line_end":2271,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125422,"byte_end":125451,"line_start":2272,"line_end":2272,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125456,"byte_end":125459,"line_start":2273,"line_end":2273,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125464,"byte_end":125494,"line_start":2274,"line_end":2274,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(\"农历新年\".as_bytes(), s.to_lowercase().as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125499,"byte_end":125570,"line_start":2275,"line_end":2275,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125575,"byte_end":125582,"line_start":2276,"line_end":2276,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125587,"byte_end":125590,"line_start":2277,"line_end":2277,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125595,"byte_end":125627,"line_start":2278,"line_end":2278,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125632,"byte_end":125635,"line_start":2279,"line_end":2279,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125640,"byte_end":125647,"line_start":2280,"line_end":2280,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125652,"byte_end":125681,"line_start":2281,"line_end":2281,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125686,"byte_end":125689,"line_start":2282,"line_end":2282,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125694,"byte_end":125734,"line_start":2283,"line_end":2283,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(B(b\"foo\\xFFbar\\xE2\\x98baz\"), s.to_lowercase().as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125739,"byte_end":125812,"line_start":2284,"line_end":2284,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125817,"byte_end":125824,"line_start":2285,"line_end":2285,"column_start":5,"column_end":12}},{"value":"cfg(all(feature = \"std\", feature = \"unicode\"))","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125829,"byte_end":125878,"line_start":2286,"line_end":2286,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":125883,"byte_end":125892,"line_start":2287,"line_end":2287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127813,"byte_end":127830,"line_start":2350,"line_end":2350,"column_start":8,"column_end":25},"name":"to_lowercase_into","qualname":"::ext_slice::ByteSlice::to_lowercase_into","value":"fn (&self, buf: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Writes the lowercase equivalent of this byte string into the given\n buffer. The buffer is not cleared before written to.","sig":null,"attributes":[{"value":"/ Writes the lowercase equivalent of this byte string into the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126028,"byte_end":126098,"line_start":2294,"line_end":2294,"column_start":5,"column_end":75}},{"value":"/ buffer. The buffer is not cleared before written to.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126103,"byte_end":126159,"line_start":2295,"line_end":2295,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126164,"byte_end":126167,"line_start":2296,"line_end":2296,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is defined according to the `Lowercase`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126172,"byte_end":126239,"line_start":2297,"line_end":2297,"column_start":5,"column_end":72}},{"value":"/ Unicode property.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126244,"byte_end":126265,"line_start":2298,"line_end":2298,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126270,"byte_end":126273,"line_start":2299,"line_end":2299,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no lowercase variant,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126278,"byte_end":126351,"line_start":2300,"line_end":2300,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126356,"byte_end":126409,"line_start":2301,"line_end":2301,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126414,"byte_end":126417,"line_start":2302,"line_end":2302,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126422,"byte_end":126496,"line_start":2303,"line_end":2303,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126501,"byte_end":126573,"line_start":2304,"line_end":2304,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126578,"byte_end":126651,"line_start":2305,"line_end":2305,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126656,"byte_end":126677,"line_start":2306,"line_end":2306,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126682,"byte_end":126685,"line_start":2307,"line_end":2307,"column_start":5,"column_end":8}},{"value":"/ If you don't need to amortize allocation and instead prefer","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126690,"byte_end":126753,"line_start":2308,"line_end":2308,"column_start":5,"column_end":68}},{"value":"/ convenience, then use [`to_lowercase`](#method.to_lowercase) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126758,"byte_end":126831,"line_start":2309,"line_end":2309,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126836,"byte_end":126839,"line_start":2310,"line_end":2310,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126844,"byte_end":126858,"line_start":2311,"line_end":2311,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126863,"byte_end":126866,"line_start":2312,"line_end":2312,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126871,"byte_end":126887,"line_start":2313,"line_end":2313,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126892,"byte_end":126895,"line_start":2314,"line_end":2314,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126900,"byte_end":126907,"line_start":2315,"line_end":2315,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126912,"byte_end":126941,"line_start":2316,"line_end":2316,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126946,"byte_end":126949,"line_start":2317,"line_end":2317,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"HELLO Β\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126954,"byte_end":126980,"line_start":2318,"line_end":2318,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126985,"byte_end":126988,"line_start":2319,"line_end":2319,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":126993,"byte_end":127018,"line_start":2320,"line_end":2320,"column_start":5,"column_end":30}},{"value":"/ s.to_lowercase_into(&mut buf);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127023,"byte_end":127057,"line_start":2321,"line_end":2321,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(\"hello β\".as_bytes(), buf.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127062,"byte_end":127116,"line_start":2322,"line_end":2322,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127121,"byte_end":127128,"line_start":2323,"line_end":2323,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127133,"byte_end":127136,"line_start":2324,"line_end":2324,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127141,"byte_end":127182,"line_start":2325,"line_end":2325,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127187,"byte_end":127190,"line_start":2326,"line_end":2326,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127195,"byte_end":127202,"line_start":2327,"line_end":2327,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127207,"byte_end":127236,"line_start":2328,"line_end":2328,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127241,"byte_end":127244,"line_start":2329,"line_end":2329,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127249,"byte_end":127279,"line_start":2330,"line_end":2330,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127284,"byte_end":127287,"line_start":2331,"line_end":2331,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127292,"byte_end":127317,"line_start":2332,"line_end":2332,"column_start":5,"column_end":30}},{"value":"/ s.to_lowercase_into(&mut buf);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127322,"byte_end":127356,"line_start":2333,"line_end":2333,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(\"农历新年\".as_bytes(), buf.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127361,"byte_end":127419,"line_start":2334,"line_end":2334,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127424,"byte_end":127431,"line_start":2335,"line_end":2335,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127436,"byte_end":127439,"line_start":2336,"line_end":2336,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127444,"byte_end":127476,"line_start":2337,"line_end":2337,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127481,"byte_end":127484,"line_start":2338,"line_end":2338,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127489,"byte_end":127496,"line_start":2339,"line_end":2339,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127501,"byte_end":127530,"line_start":2340,"line_end":2340,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127535,"byte_end":127538,"line_start":2341,"line_end":2341,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127543,"byte_end":127583,"line_start":2342,"line_end":2342,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127588,"byte_end":127591,"line_start":2343,"line_end":2343,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127596,"byte_end":127621,"line_start":2344,"line_end":2344,"column_start":5,"column_end":30}},{"value":"/ s.to_lowercase_into(&mut buf);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127626,"byte_end":127660,"line_start":2345,"line_end":2345,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(B(b\"foo\\xFFbar\\xE2\\x98baz\"), buf.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127665,"byte_end":127725,"line_start":2346,"line_end":2346,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127730,"byte_end":127737,"line_start":2347,"line_end":2347,"column_start":5,"column_end":12}},{"value":"cfg(all(feature = \"std\", feature = \"unicode\"))","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127742,"byte_end":127791,"line_start":2348,"line_end":2348,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":127796,"byte_end":127805,"line_start":2349,"line_end":2349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129778,"byte_end":129796,"line_start":2405,"line_end":2405,"column_start":8,"column_end":26},"name":"to_ascii_lowercase","qualname":"::ext_slice::ByteSlice::to_ascii_lowercase","value":"fn (&self) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the ASCII lowercase equivalent of\n this byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the ASCII lowercase equivalent of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":128668,"byte_end":128740,"line_start":2372,"line_end":2372,"column_start":5,"column_end":77}},{"value":"/ this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":128745,"byte_end":128766,"line_start":2373,"line_end":2373,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":128771,"byte_end":128774,"line_start":2374,"line_end":2374,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is only defined in ASCII letters. Namely, the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":128779,"byte_end":128852,"line_start":2375,"line_end":2375,"column_start":5,"column_end":78}},{"value":"/ letters `A-Z` are converted to `a-z`. All other bytes remain unchanged.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":128857,"byte_end":128932,"line_start":2376,"line_end":2376,"column_start":5,"column_end":80}},{"value":"/ In particular, the length of the byte string returned is always","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":128937,"byte_end":129004,"line_start":2377,"line_end":2377,"column_start":5,"column_end":72}},{"value":"/ equivalent to the length of this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129009,"byte_end":129058,"line_start":2378,"line_end":2378,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129063,"byte_end":129066,"line_start":2379,"line_end":2379,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129071,"byte_end":129145,"line_start":2380,"line_end":2380,"column_start":5,"column_end":79}},{"value":"/ [`make_ascii_lowercase`](#method.make_ascii_lowercase) to perform","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129150,"byte_end":129219,"line_start":2381,"line_end":2381,"column_start":5,"column_end":74}},{"value":"/ the conversion in place.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129224,"byte_end":129252,"line_start":2382,"line_end":2382,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129257,"byte_end":129260,"line_start":2383,"line_end":2383,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129265,"byte_end":129279,"line_start":2384,"line_end":2384,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129284,"byte_end":129287,"line_start":2385,"line_end":2385,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129292,"byte_end":129308,"line_start":2386,"line_end":2386,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129313,"byte_end":129316,"line_start":2387,"line_end":2387,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129321,"byte_end":129328,"line_start":2388,"line_end":2388,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129333,"byte_end":129362,"line_start":2389,"line_end":2389,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129367,"byte_end":129370,"line_start":2390,"line_end":2390,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"HELLO Β\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129375,"byte_end":129401,"line_start":2391,"line_end":2391,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(\"hello Β\".as_bytes(), s.to_ascii_lowercase().as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129406,"byte_end":129479,"line_start":2392,"line_end":2392,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129484,"byte_end":129491,"line_start":2393,"line_end":2393,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129496,"byte_end":129499,"line_start":2394,"line_end":2394,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129504,"byte_end":129536,"line_start":2395,"line_end":2395,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129541,"byte_end":129544,"line_start":2396,"line_end":2396,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129549,"byte_end":129556,"line_start":2397,"line_end":2397,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129561,"byte_end":129590,"line_start":2398,"line_end":2398,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129595,"byte_end":129598,"line_start":2399,"line_end":2399,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129603,"byte_end":129643,"line_start":2400,"line_end":2400,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.to_ascii_lowercase(), B(b\"foo\\xFFbar\\xE2\\x98baz\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129648,"byte_end":129716,"line_start":2401,"line_end":2401,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129721,"byte_end":129728,"line_start":2402,"line_end":2402,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129733,"byte_end":129756,"line_start":2403,"line_end":2403,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129761,"byte_end":129770,"line_start":2404,"line_end":2404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130851,"byte_end":130871,"line_start":2440,"line_end":2440,"column_start":8,"column_end":28},"name":"make_ascii_lowercase","qualname":"::ext_slice::ByteSlice::make_ascii_lowercase","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Convert this byte string to its lowercase ASCII equivalent in place.","sig":null,"attributes":[{"value":"/ Convert this byte string to its lowercase ASCII equivalent in place.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129873,"byte_end":129945,"line_start":2409,"line_end":2409,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129950,"byte_end":129953,"line_start":2410,"line_end":2410,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is only defined in ASCII letters. Namely, the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":129958,"byte_end":130031,"line_start":2411,"line_end":2411,"column_start":5,"column_end":78}},{"value":"/ letters `A-Z` are converted to `a-z`. All other bytes remain unchanged.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130036,"byte_end":130111,"line_start":2412,"line_end":2412,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130116,"byte_end":130119,"line_start":2413,"line_end":2413,"column_start":5,"column_end":8}},{"value":"/ If you don't need to do the conversion in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130124,"byte_end":130169,"line_start":2414,"line_end":2414,"column_start":5,"column_end":50}},{"value":"/ place and instead prefer convenience, then use","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130174,"byte_end":130224,"line_start":2415,"line_end":2415,"column_start":5,"column_end":55}},{"value":"/ [`to_ascii_lowercase`](#method.to_ascii_lowercase) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130229,"byte_end":130292,"line_start":2416,"line_end":2416,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130297,"byte_end":130300,"line_start":2417,"line_end":2417,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130305,"byte_end":130319,"line_start":2418,"line_end":2418,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130324,"byte_end":130327,"line_start":2419,"line_end":2419,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130332,"byte_end":130348,"line_start":2420,"line_end":2420,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130353,"byte_end":130356,"line_start":2421,"line_end":2421,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130361,"byte_end":130368,"line_start":2422,"line_end":2422,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130373,"byte_end":130397,"line_start":2423,"line_end":2423,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130402,"byte_end":130405,"line_start":2424,"line_end":2424,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"HELLO Β\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130410,"byte_end":130454,"line_start":2425,"line_end":2425,"column_start":5,"column_end":48}},{"value":"/ s.make_ascii_lowercase();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130459,"byte_end":130488,"line_start":2426,"line_end":2426,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, \"hello Β\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130493,"byte_end":130534,"line_start":2427,"line_end":2427,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130539,"byte_end":130546,"line_start":2428,"line_end":2428,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130551,"byte_end":130554,"line_start":2429,"line_end":2429,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130559,"byte_end":130591,"line_start":2430,"line_end":2430,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130596,"byte_end":130599,"line_start":2431,"line_end":2431,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130604,"byte_end":130611,"line_start":2432,"line_end":2432,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130616,"byte_end":130654,"line_start":2433,"line_end":2433,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130659,"byte_end":130662,"line_start":2434,"line_end":2434,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from_slice(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130667,"byte_end":130731,"line_start":2435,"line_end":2435,"column_start":5,"column_end":69}},{"value":"/ s.make_ascii_lowercase();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130736,"byte_end":130765,"line_start":2436,"line_end":2436,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(b\"foo\\xFFbar\\xE2\\x98baz\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130770,"byte_end":130817,"line_start":2437,"line_end":2437,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130822,"byte_end":130829,"line_start":2438,"line_end":2438,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130834,"byte_end":130843,"line_start":2439,"line_end":2439,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132452,"byte_end":132464,"line_start":2491,"line_end":2491,"column_start":8,"column_end":20},"name":"to_uppercase","qualname":"::ext_slice::ByteSlice::to_uppercase","value":"fn (&self) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the uppercase equivalent of this\n byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the uppercase equivalent of this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":130948,"byte_end":131019,"line_start":2444,"line_end":2444,"column_start":5,"column_end":76}},{"value":"/ byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131024,"byte_end":131040,"line_start":2445,"line_end":2445,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131045,"byte_end":131048,"line_start":2446,"line_end":2446,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is defined according to the `Uppercase`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131053,"byte_end":131120,"line_start":2447,"line_end":2447,"column_start":5,"column_end":72}},{"value":"/ Unicode property.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131125,"byte_end":131146,"line_start":2448,"line_end":2448,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131151,"byte_end":131154,"line_start":2449,"line_end":2449,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no uppercase variant,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131159,"byte_end":131232,"line_start":2450,"line_end":2450,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131237,"byte_end":131290,"line_start":2451,"line_end":2451,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131295,"byte_end":131298,"line_start":2452,"line_end":2452,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131303,"byte_end":131377,"line_start":2453,"line_end":2453,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131382,"byte_end":131454,"line_start":2454,"line_end":2454,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131459,"byte_end":131532,"line_start":2455,"line_end":2455,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131537,"byte_end":131558,"line_start":2456,"line_end":2456,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131563,"byte_end":131566,"line_start":2457,"line_end":2457,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131571,"byte_end":131645,"line_start":2458,"line_end":2458,"column_start":5,"column_end":79}},{"value":"/ [`to_uppercase_into`](#method.to_uppercase_into) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131650,"byte_end":131711,"line_start":2459,"line_end":2459,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131716,"byte_end":131719,"line_start":2460,"line_end":2460,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131724,"byte_end":131738,"line_start":2461,"line_end":2461,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131743,"byte_end":131746,"line_start":2462,"line_end":2462,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131751,"byte_end":131767,"line_start":2463,"line_end":2463,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131772,"byte_end":131775,"line_start":2464,"line_end":2464,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131780,"byte_end":131787,"line_start":2465,"line_end":2465,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131792,"byte_end":131821,"line_start":2466,"line_end":2466,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131826,"byte_end":131829,"line_start":2467,"line_end":2467,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"hello β\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131834,"byte_end":131860,"line_start":2468,"line_end":2468,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s.to_uppercase(), B(\"HELLO Β\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131865,"byte_end":131913,"line_start":2469,"line_end":2469,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131918,"byte_end":131925,"line_start":2470,"line_end":2470,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131930,"byte_end":131933,"line_start":2471,"line_end":2471,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131938,"byte_end":131979,"line_start":2472,"line_end":2472,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131984,"byte_end":131987,"line_start":2473,"line_end":2473,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":131992,"byte_end":131999,"line_start":2474,"line_end":2474,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132004,"byte_end":132033,"line_start":2475,"line_end":2475,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132038,"byte_end":132041,"line_start":2476,"line_end":2476,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132046,"byte_end":132076,"line_start":2477,"line_end":2477,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s.to_uppercase(), B(\"农历新年\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132081,"byte_end":132133,"line_start":2478,"line_end":2478,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132138,"byte_end":132145,"line_start":2479,"line_end":2479,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132150,"byte_end":132153,"line_start":2480,"line_end":2480,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132158,"byte_end":132190,"line_start":2481,"line_end":2481,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132195,"byte_end":132198,"line_start":2482,"line_end":2482,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132203,"byte_end":132210,"line_start":2483,"line_end":2483,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132215,"byte_end":132244,"line_start":2484,"line_end":2484,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132249,"byte_end":132252,"line_start":2485,"line_end":2485,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132257,"byte_end":132297,"line_start":2486,"line_end":2486,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.to_uppercase(), B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132302,"byte_end":132364,"line_start":2487,"line_end":2487,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132369,"byte_end":132376,"line_start":2488,"line_end":2488,"column_start":5,"column_end":12}},{"value":"cfg(all(feature = \"std\", feature = \"unicode\"))","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132381,"byte_end":132430,"line_start":2489,"line_end":2489,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132435,"byte_end":132444,"line_start":2490,"line_end":2490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134316,"byte_end":134333,"line_start":2553,"line_end":2553,"column_start":8,"column_end":25},"name":"to_uppercase_into","qualname":"::ext_slice::ByteSlice::to_uppercase_into","value":"fn (&self, buf: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Writes the uppercase equivalent of this byte string into the given\n buffer. The buffer is not cleared before written to.","sig":null,"attributes":[{"value":"/ Writes the uppercase equivalent of this byte string into the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132580,"byte_end":132650,"line_start":2497,"line_end":2497,"column_start":5,"column_end":75}},{"value":"/ buffer. The buffer is not cleared before written to.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132655,"byte_end":132711,"line_start":2498,"line_end":2498,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132716,"byte_end":132719,"line_start":2499,"line_end":2499,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is defined according to the `Uppercase`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132724,"byte_end":132791,"line_start":2500,"line_end":2500,"column_start":5,"column_end":72}},{"value":"/ Unicode property.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132796,"byte_end":132817,"line_start":2501,"line_end":2501,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132822,"byte_end":132825,"line_start":2502,"line_end":2502,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no uppercase variant,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132830,"byte_end":132903,"line_start":2503,"line_end":2503,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132908,"byte_end":132961,"line_start":2504,"line_end":2504,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132966,"byte_end":132969,"line_start":2505,"line_end":2505,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":132974,"byte_end":133048,"line_start":2506,"line_end":2506,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133053,"byte_end":133125,"line_start":2507,"line_end":2507,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133130,"byte_end":133203,"line_start":2508,"line_end":2508,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133208,"byte_end":133229,"line_start":2509,"line_end":2509,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133234,"byte_end":133237,"line_start":2510,"line_end":2510,"column_start":5,"column_end":8}},{"value":"/ If you don't need to amortize allocation and instead prefer","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133242,"byte_end":133305,"line_start":2511,"line_end":2511,"column_start":5,"column_end":68}},{"value":"/ convenience, then use [`to_uppercase`](#method.to_uppercase) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133310,"byte_end":133383,"line_start":2512,"line_end":2512,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133388,"byte_end":133391,"line_start":2513,"line_end":2513,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133396,"byte_end":133410,"line_start":2514,"line_end":2514,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133415,"byte_end":133418,"line_start":2515,"line_end":2515,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133423,"byte_end":133439,"line_start":2516,"line_end":2516,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133444,"byte_end":133447,"line_start":2517,"line_end":2517,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133452,"byte_end":133459,"line_start":2518,"line_end":2518,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133464,"byte_end":133493,"line_start":2519,"line_end":2519,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133498,"byte_end":133501,"line_start":2520,"line_end":2520,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"hello β\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133506,"byte_end":133532,"line_start":2521,"line_end":2521,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133537,"byte_end":133540,"line_start":2522,"line_end":2522,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133545,"byte_end":133570,"line_start":2523,"line_end":2523,"column_start":5,"column_end":30}},{"value":"/ s.to_uppercase_into(&mut buf);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133575,"byte_end":133609,"line_start":2524,"line_end":2524,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf, B(\"HELLO Β\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133614,"byte_end":133649,"line_start":2525,"line_end":2525,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133654,"byte_end":133661,"line_start":2526,"line_end":2526,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133666,"byte_end":133669,"line_start":2527,"line_end":2527,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133674,"byte_end":133715,"line_start":2528,"line_end":2528,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133720,"byte_end":133723,"line_start":2529,"line_end":2529,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133728,"byte_end":133735,"line_start":2530,"line_end":2530,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133740,"byte_end":133769,"line_start":2531,"line_end":2531,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133774,"byte_end":133777,"line_start":2532,"line_end":2532,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133782,"byte_end":133812,"line_start":2533,"line_end":2533,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133817,"byte_end":133820,"line_start":2534,"line_end":2534,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133825,"byte_end":133850,"line_start":2535,"line_end":2535,"column_start":5,"column_end":30}},{"value":"/ s.to_uppercase_into(&mut buf);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133855,"byte_end":133889,"line_start":2536,"line_end":2536,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf, B(\"农历新年\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133894,"byte_end":133933,"line_start":2537,"line_end":2537,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133938,"byte_end":133945,"line_start":2538,"line_end":2538,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133950,"byte_end":133953,"line_start":2539,"line_end":2539,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133958,"byte_end":133990,"line_start":2540,"line_end":2540,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":133995,"byte_end":133998,"line_start":2541,"line_end":2541,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134003,"byte_end":134010,"line_start":2542,"line_end":2542,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134015,"byte_end":134044,"line_start":2543,"line_end":2543,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134049,"byte_end":134052,"line_start":2544,"line_end":2544,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134057,"byte_end":134097,"line_start":2545,"line_end":2545,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134102,"byte_end":134105,"line_start":2546,"line_end":2546,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134110,"byte_end":134135,"line_start":2547,"line_end":2547,"column_start":5,"column_end":30}},{"value":"/ s.to_uppercase_into(&mut buf);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134140,"byte_end":134174,"line_start":2548,"line_end":2548,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf, B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134179,"byte_end":134228,"line_start":2549,"line_end":2549,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134233,"byte_end":134240,"line_start":2550,"line_end":2550,"column_start":5,"column_end":12}},{"value":"cfg(all(feature = \"std\", feature = \"unicode\"))","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134245,"byte_end":134294,"line_start":2551,"line_end":2551,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":134299,"byte_end":134308,"line_start":2552,"line_end":2552,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136192,"byte_end":136210,"line_start":2605,"line_end":2605,"column_start":8,"column_end":26},"name":"to_ascii_uppercase","qualname":"::ext_slice::ByteSlice::to_ascii_uppercase","value":"fn (&self) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the ASCII uppercase equivalent of\n this byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the ASCII uppercase equivalent of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135101,"byte_end":135173,"line_start":2572,"line_end":2572,"column_start":5,"column_end":77}},{"value":"/ this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135178,"byte_end":135199,"line_start":2573,"line_end":2573,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135204,"byte_end":135207,"line_start":2574,"line_end":2574,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is only defined in ASCII letters. Namely, the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135212,"byte_end":135285,"line_start":2575,"line_end":2575,"column_start":5,"column_end":78}},{"value":"/ letters `a-z` are converted to `A-Z`. All other bytes remain unchanged.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135290,"byte_end":135365,"line_start":2576,"line_end":2576,"column_start":5,"column_end":80}},{"value":"/ In particular, the length of the byte string returned is always","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135370,"byte_end":135437,"line_start":2577,"line_end":2577,"column_start":5,"column_end":72}},{"value":"/ equivalent to the length of this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135442,"byte_end":135491,"line_start":2578,"line_end":2578,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135496,"byte_end":135499,"line_start":2579,"line_end":2579,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135504,"byte_end":135578,"line_start":2580,"line_end":2580,"column_start":5,"column_end":79}},{"value":"/ [`make_ascii_uppercase`](#method.make_ascii_uppercase) to perform","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135583,"byte_end":135652,"line_start":2581,"line_end":2581,"column_start":5,"column_end":74}},{"value":"/ the conversion in place.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135657,"byte_end":135685,"line_start":2582,"line_end":2582,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135690,"byte_end":135693,"line_start":2583,"line_end":2583,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135698,"byte_end":135712,"line_start":2584,"line_end":2584,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135717,"byte_end":135720,"line_start":2585,"line_end":2585,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135725,"byte_end":135741,"line_start":2586,"line_end":2586,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135746,"byte_end":135749,"line_start":2587,"line_end":2587,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135754,"byte_end":135761,"line_start":2588,"line_end":2588,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135766,"byte_end":135795,"line_start":2589,"line_end":2589,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135800,"byte_end":135803,"line_start":2590,"line_end":2590,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"hello β\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135808,"byte_end":135834,"line_start":2591,"line_end":2591,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s.to_ascii_uppercase(), B(\"HELLO β\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135839,"byte_end":135893,"line_start":2592,"line_end":2592,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135898,"byte_end":135905,"line_start":2593,"line_end":2593,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135910,"byte_end":135913,"line_start":2594,"line_end":2594,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135918,"byte_end":135950,"line_start":2595,"line_end":2595,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135955,"byte_end":135958,"line_start":2596,"line_end":2596,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135963,"byte_end":135970,"line_start":2597,"line_end":2597,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":135975,"byte_end":136004,"line_start":2598,"line_end":2598,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136009,"byte_end":136012,"line_start":2599,"line_end":2599,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136017,"byte_end":136057,"line_start":2600,"line_end":2600,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.to_ascii_uppercase(), B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136062,"byte_end":136130,"line_start":2601,"line_end":2601,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136135,"byte_end":136142,"line_start":2602,"line_end":2602,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136147,"byte_end":136170,"line_start":2603,"line_end":2603,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136175,"byte_end":136184,"line_start":2604,"line_end":2604,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137262,"byte_end":137282,"line_start":2640,"line_end":2640,"column_start":8,"column_end":28},"name":"make_ascii_uppercase","qualname":"::ext_slice::ByteSlice::make_ascii_uppercase","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Convert this byte string to its uppercase ASCII equivalent in place.","sig":null,"attributes":[{"value":"/ Convert this byte string to its uppercase ASCII equivalent in place.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136287,"byte_end":136359,"line_start":2609,"line_end":2609,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136364,"byte_end":136367,"line_start":2610,"line_end":2610,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is only defined in ASCII letters. Namely, the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136372,"byte_end":136445,"line_start":2611,"line_end":2611,"column_start":5,"column_end":78}},{"value":"/ letters `a-z` are converted to `A-Z`. All other bytes remain unchanged.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136450,"byte_end":136525,"line_start":2612,"line_end":2612,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136530,"byte_end":136533,"line_start":2613,"line_end":2613,"column_start":5,"column_end":8}},{"value":"/ If you don't need to do the conversion in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136538,"byte_end":136583,"line_start":2614,"line_end":2614,"column_start":5,"column_end":50}},{"value":"/ place and instead prefer convenience, then use","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136588,"byte_end":136638,"line_start":2615,"line_end":2615,"column_start":5,"column_end":55}},{"value":"/ [`to_ascii_uppercase`](#method.to_ascii_uppercase) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136643,"byte_end":136706,"line_start":2616,"line_end":2616,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136711,"byte_end":136714,"line_start":2617,"line_end":2617,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136719,"byte_end":136733,"line_start":2618,"line_end":2618,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136738,"byte_end":136741,"line_start":2619,"line_end":2619,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136746,"byte_end":136762,"line_start":2620,"line_end":2620,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136767,"byte_end":136770,"line_start":2621,"line_end":2621,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136775,"byte_end":136782,"line_start":2622,"line_end":2622,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136787,"byte_end":136816,"line_start":2623,"line_end":2623,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136821,"byte_end":136824,"line_start":2624,"line_end":2624,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"hello β\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136829,"byte_end":136873,"line_start":2625,"line_end":2625,"column_start":5,"column_end":48}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136878,"byte_end":136907,"line_start":2626,"line_end":2626,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(\"HELLO β\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136912,"byte_end":136945,"line_start":2627,"line_end":2627,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136950,"byte_end":136957,"line_start":2628,"line_end":2628,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136962,"byte_end":136965,"line_start":2629,"line_end":2629,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":136970,"byte_end":137002,"line_start":2630,"line_end":2630,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137007,"byte_end":137010,"line_start":2631,"line_end":2631,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137015,"byte_end":137022,"line_start":2632,"line_end":2632,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137027,"byte_end":137065,"line_start":2633,"line_end":2633,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137070,"byte_end":137073,"line_start":2634,"line_end":2634,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from_slice(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137078,"byte_end":137142,"line_start":2635,"line_end":2635,"column_start":5,"column_end":69}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137147,"byte_end":137176,"line_start":2636,"line_end":2636,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137181,"byte_end":137228,"line_start":2637,"line_end":2637,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137233,"byte_end":137240,"line_start":2638,"line_end":2638,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137245,"byte_end":137254,"line_start":2639,"line_end":2639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138149,"byte_end":138162,"line_start":2667,"line_end":2667,"column_start":8,"column_end":21},"name":"reverse_bytes","qualname":"::ext_slice::ByteSlice::reverse_bytes","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Reverse the bytes in this string, in place.","sig":null,"attributes":[{"value":"/ Reverse the bytes in this string, in place.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137359,"byte_end":137406,"line_start":2644,"line_end":2644,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137411,"byte_end":137414,"line_start":2645,"line_end":2645,"column_start":5,"column_end":8}},{"value":"/ This is not necessarily a well formed operation! For example, if this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137419,"byte_end":137492,"line_start":2646,"line_end":2646,"column_start":5,"column_end":78}},{"value":"/ byte string contains valid UTF-8 that isn't ASCII, then reversing the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137497,"byte_end":137570,"line_start":2647,"line_end":2647,"column_start":5,"column_end":78}},{"value":"/ string will likely result in invalid UTF-8 and otherwise non-sensical","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137575,"byte_end":137648,"line_start":2648,"line_end":2648,"column_start":5,"column_end":78}},{"value":"/ content.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137653,"byte_end":137665,"line_start":2649,"line_end":2649,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137670,"byte_end":137673,"line_start":2650,"line_end":2650,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `[u8]::reverse` method.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137678,"byte_end":137749,"line_start":2651,"line_end":2651,"column_start":5,"column_end":76}},{"value":"/ This method is provided to permit callers to explicitly differentiate","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137754,"byte_end":137827,"line_start":2652,"line_end":2652,"column_start":5,"column_end":78}},{"value":"/ between reversing bytes, codepoints and graphemes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137832,"byte_end":137886,"line_start":2653,"line_end":2653,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137891,"byte_end":137894,"line_start":2654,"line_end":2654,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137899,"byte_end":137913,"line_start":2655,"line_end":2655,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137918,"byte_end":137921,"line_start":2656,"line_end":2656,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137926,"byte_end":137942,"line_start":2657,"line_end":2657,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137947,"byte_end":137950,"line_start":2658,"line_end":2658,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137955,"byte_end":137962,"line_start":2659,"line_end":2659,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137967,"byte_end":137991,"line_start":2660,"line_end":2660,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":137996,"byte_end":137999,"line_start":2661,"line_end":2661,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"hello\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138004,"byte_end":138045,"line_start":2662,"line_end":2662,"column_start":5,"column_end":46}},{"value":"/ s.reverse_bytes();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138050,"byte_end":138072,"line_start":2663,"line_end":2663,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, \"olleh\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138077,"byte_end":138115,"line_start":2664,"line_end":2664,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138120,"byte_end":138127,"line_start":2665,"line_end":2665,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138132,"byte_end":138141,"line_start":2666,"line_end":2666,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140567,"byte_end":140580,"line_start":2738,"line_end":2738,"column_start":8,"column_end":21},"name":"reverse_chars","qualname":"::ext_slice::ByteSlice::reverse_chars","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Reverse the codepoints in this string, in place.","sig":null,"attributes":[{"value":"/ Reverse the codepoints in this string, in place.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138226,"byte_end":138278,"line_start":2671,"line_end":2671,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138283,"byte_end":138286,"line_start":2672,"line_end":2672,"column_start":5,"column_end":8}},{"value":"/ If this byte string is valid UTF-8, then its reversal by codepoint","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138291,"byte_end":138361,"line_start":2673,"line_end":2673,"column_start":5,"column_end":75}},{"value":"/ is also guaranteed to be valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138366,"byte_end":138407,"line_start":2674,"line_end":2674,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138412,"byte_end":138415,"line_start":2675,"line_end":2675,"column_start":5,"column_end":8}},{"value":"/ This operation is equivalent to the following, but without allocating:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138420,"byte_end":138494,"line_start":2676,"line_end":2676,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138499,"byte_end":138502,"line_start":2677,"line_end":2677,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138507,"byte_end":138514,"line_start":2678,"line_end":2678,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138519,"byte_end":138543,"line_start":2679,"line_end":2679,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138548,"byte_end":138551,"line_start":2680,"line_end":2680,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138556,"byte_end":138601,"line_start":2681,"line_end":2681,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138606,"byte_end":138609,"line_start":2682,"line_end":2682,"column_start":5,"column_end":8}},{"value":"/ let mut chars: Vec<char> = s.chars().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138614,"byte_end":138665,"line_start":2683,"line_end":2683,"column_start":5,"column_end":56}},{"value":"/ chars.reverse();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138670,"byte_end":138690,"line_start":2684,"line_end":2684,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138695,"byte_end":138698,"line_start":2685,"line_end":2685,"column_start":5,"column_end":8}},{"value":"/ let reversed: String = chars.into_iter().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138703,"byte_end":138758,"line_start":2686,"line_end":2686,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(reversed, \"rab☃oof\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138763,"byte_end":138801,"line_start":2687,"line_end":2687,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138806,"byte_end":138813,"line_start":2688,"line_end":2688,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138818,"byte_end":138821,"line_start":2689,"line_end":2689,"column_start":5,"column_end":8}},{"value":"/ Note that this is not necessarily a well formed operation. For example,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138826,"byte_end":138901,"line_start":2690,"line_end":2690,"column_start":5,"column_end":80}},{"value":"/ if this byte string contains grapheme clusters with more than one","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138906,"byte_end":138975,"line_start":2691,"line_end":2691,"column_start":5,"column_end":74}},{"value":"/ codepoint, then those grapheme clusters will not necessarily be","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":138980,"byte_end":139047,"line_start":2692,"line_end":2692,"column_start":5,"column_end":72}},{"value":"/ preserved. If you'd like to preserve grapheme clusters, then use","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139052,"byte_end":139120,"line_start":2693,"line_end":2693,"column_start":5,"column_end":73}},{"value":"/ [`reverse_graphemes`](#method.reverse_graphemes) instead.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139125,"byte_end":139186,"line_start":2694,"line_end":2694,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139191,"byte_end":139194,"line_start":2695,"line_end":2695,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139199,"byte_end":139213,"line_start":2696,"line_end":2696,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139218,"byte_end":139221,"line_start":2697,"line_end":2697,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139226,"byte_end":139242,"line_start":2698,"line_end":2698,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139247,"byte_end":139250,"line_start":2699,"line_end":2699,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139255,"byte_end":139262,"line_start":2700,"line_end":2700,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139267,"byte_end":139291,"line_start":2701,"line_end":2701,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139296,"byte_end":139299,"line_start":2702,"line_end":2702,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139304,"byte_end":139349,"line_start":2703,"line_end":2703,"column_start":5,"column_end":48}},{"value":"/ s.reverse_chars();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139354,"byte_end":139376,"line_start":2704,"line_end":2704,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, \"rab☃oof\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139381,"byte_end":139423,"line_start":2705,"line_end":2705,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139428,"byte_end":139435,"line_start":2706,"line_end":2706,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139440,"byte_end":139443,"line_start":2707,"line_end":2707,"column_start":5,"column_end":8}},{"value":"/ This example shows that not all reversals lead to a well formed string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139448,"byte_end":139523,"line_start":2708,"line_end":2708,"column_start":5,"column_end":80}},{"value":"/ For example, in this case, combining marks are used to put accents over","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139528,"byte_end":139603,"line_start":2709,"line_end":2709,"column_start":5,"column_end":80}},{"value":"/ some letters, and those accent marks must appear after the codepoints","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139608,"byte_end":139681,"line_start":2710,"line_end":2710,"column_start":5,"column_end":78}},{"value":"/ they modify.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139686,"byte_end":139702,"line_start":2711,"line_end":2711,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139707,"byte_end":139710,"line_start":2712,"line_end":2712,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139715,"byte_end":139722,"line_start":2713,"line_end":2713,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139727,"byte_end":139756,"line_start":2714,"line_end":2714,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139761,"byte_end":139764,"line_start":2715,"line_end":2715,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"résumé\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139769,"byte_end":139815,"line_start":2716,"line_end":2716,"column_start":5,"column_end":49}},{"value":"/ s.reverse_chars();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139820,"byte_end":139842,"line_start":2717,"line_end":2717,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, B(b\"\\xCC\\x81emus\\xCC\\x81er\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139847,"byte_end":139895,"line_start":2718,"line_end":2718,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139900,"byte_end":139907,"line_start":2719,"line_end":2719,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139912,"byte_end":139915,"line_start":2720,"line_end":2720,"column_start":5,"column_end":8}},{"value":"/ A word of warning: the above example relies on the fact that","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139920,"byte_end":139984,"line_start":2721,"line_end":2721,"column_start":5,"column_end":69}},{"value":"/ `résumé` is in decomposed normal form, which means there are separate","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":139989,"byte_end":140066,"line_start":2722,"line_end":2722,"column_start":5,"column_end":80}},{"value":"/ codepoints for the accents above `e`. If it is instead in composed","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140071,"byte_end":140141,"line_start":2723,"line_end":2723,"column_start":5,"column_end":75}},{"value":"/ normal form, then the example works:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140146,"byte_end":140186,"line_start":2724,"line_end":2724,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140191,"byte_end":140194,"line_start":2725,"line_end":2725,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140199,"byte_end":140206,"line_start":2726,"line_end":2726,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140211,"byte_end":140240,"line_start":2727,"line_end":2727,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140245,"byte_end":140248,"line_start":2728,"line_end":2728,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"résumé\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140253,"byte_end":140297,"line_start":2729,"line_end":2729,"column_start":5,"column_end":47}},{"value":"/ s.reverse_chars();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140302,"byte_end":140324,"line_start":2730,"line_end":2730,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, B(\"émusér\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140329,"byte_end":140362,"line_start":2731,"line_end":2731,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140367,"byte_end":140374,"line_start":2732,"line_end":2732,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140379,"byte_end":140382,"line_start":2733,"line_end":2733,"column_start":5,"column_end":8}},{"value":"/ The point here is to be cautious and not assume that just because","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140387,"byte_end":140456,"line_start":2734,"line_end":2734,"column_start":5,"column_end":74}},{"value":"/ `reverse_chars` works in one case, that it therefore works in all","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140461,"byte_end":140530,"line_start":2735,"line_end":2735,"column_start":5,"column_end":74}},{"value":"/ cases.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140535,"byte_end":140545,"line_start":2736,"line_end":2736,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140550,"byte_end":140559,"line_start":2737,"line_end":2737,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142136,"byte_end":142153,"line_start":2796,"line_end":2796,"column_start":8,"column_end":25},"name":"reverse_graphemes","qualname":"::ext_slice::ByteSlice::reverse_graphemes","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Reverse the graphemes in this string, in place.","sig":null,"attributes":[{"value":"/ Reverse the graphemes in this string, in place.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140941,"byte_end":140992,"line_start":2753,"line_end":2753,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":140997,"byte_end":141000,"line_start":2754,"line_end":2754,"column_start":5,"column_end":8}},{"value":"/ If this byte string is valid UTF-8, then its reversal by grapheme","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141005,"byte_end":141074,"line_start":2755,"line_end":2755,"column_start":5,"column_end":74}},{"value":"/ is also guaranteed to be valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141079,"byte_end":141120,"line_start":2756,"line_end":2756,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141125,"byte_end":141128,"line_start":2757,"line_end":2757,"column_start":5,"column_end":8}},{"value":"/ This operation is equivalent to the following, but without allocating:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141133,"byte_end":141207,"line_start":2758,"line_end":2758,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141212,"byte_end":141215,"line_start":2759,"line_end":2759,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141220,"byte_end":141227,"line_start":2760,"line_end":2760,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141232,"byte_end":141256,"line_start":2761,"line_end":2761,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141261,"byte_end":141264,"line_start":2762,"line_end":2762,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141269,"byte_end":141314,"line_start":2763,"line_end":2763,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141319,"byte_end":141322,"line_start":2764,"line_end":2764,"column_start":5,"column_end":8}},{"value":"/ let mut graphemes: Vec<&str> = s.graphemes().collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141327,"byte_end":141386,"line_start":2765,"line_end":2765,"column_start":5,"column_end":64}},{"value":"/ graphemes.reverse();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141391,"byte_end":141415,"line_start":2766,"line_end":2766,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141420,"byte_end":141423,"line_start":2767,"line_end":2767,"column_start":5,"column_end":8}},{"value":"/ let reversed = graphemes.concat();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141428,"byte_end":141466,"line_start":2768,"line_end":2768,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(reversed, \"rab☃oof\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141471,"byte_end":141509,"line_start":2769,"line_end":2769,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141514,"byte_end":141521,"line_start":2770,"line_end":2770,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141526,"byte_end":141529,"line_start":2771,"line_end":2771,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141534,"byte_end":141548,"line_start":2772,"line_end":2772,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141553,"byte_end":141556,"line_start":2773,"line_end":2773,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141561,"byte_end":141577,"line_start":2774,"line_end":2774,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141582,"byte_end":141585,"line_start":2775,"line_end":2775,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141590,"byte_end":141597,"line_start":2776,"line_end":2776,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141602,"byte_end":141626,"line_start":2777,"line_end":2777,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141631,"byte_end":141634,"line_start":2778,"line_end":2778,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141639,"byte_end":141684,"line_start":2779,"line_end":2779,"column_start":5,"column_end":48}},{"value":"/ s.reverse_graphemes();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141689,"byte_end":141715,"line_start":2780,"line_end":2780,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, \"rab☃oof\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141720,"byte_end":141762,"line_start":2781,"line_end":2781,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141767,"byte_end":141774,"line_start":2782,"line_end":2782,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141779,"byte_end":141782,"line_start":2783,"line_end":2783,"column_start":5,"column_end":8}},{"value":"/ This example shows how this correctly handles grapheme clusters,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141787,"byte_end":141855,"line_start":2784,"line_end":2784,"column_start":5,"column_end":73}},{"value":"/ unlike `reverse_chars`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141860,"byte_end":141887,"line_start":2785,"line_end":2785,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141892,"byte_end":141895,"line_start":2786,"line_end":2786,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141900,"byte_end":141907,"line_start":2787,"line_end":2787,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141912,"byte_end":141936,"line_start":2788,"line_end":2788,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141941,"byte_end":141944,"line_start":2789,"line_end":2789,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"résumé\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141949,"byte_end":141993,"line_start":2790,"line_end":2790,"column_start":5,"column_end":47}},{"value":"/ s.reverse_graphemes();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":141998,"byte_end":142024,"line_start":2791,"line_end":2791,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, \"émusér\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142029,"byte_end":142070,"line_start":2792,"line_end":2792,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142075,"byte_end":142082,"line_start":2793,"line_end":2793,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142087,"byte_end":142114,"line_start":2794,"line_end":2794,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142119,"byte_end":142128,"line_start":2795,"line_end":2795,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143082,"byte_end":143090,"line_start":2831,"line_end":2831,"column_start":8,"column_end":16},"name":"is_ascii","qualname":"::ext_slice::ByteSlice::is_ascii","value":"fn (&self) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns true if and only if every byte in this byte string is ASCII.","sig":null,"attributes":[{"value":"/ Returns true if and only if every byte in this byte string is ASCII.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142556,"byte_end":142628,"line_start":2813,"line_end":2813,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142633,"byte_end":142636,"line_start":2814,"line_end":2814,"column_start":5,"column_end":8}},{"value":"/ ASCII is an encoding that defines 128 codepoints. A byte corresponds to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142641,"byte_end":142716,"line_start":2815,"line_end":2815,"column_start":5,"column_end":80}},{"value":"/ an ASCII codepoint if and only if it is in the inclusive range","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142721,"byte_end":142787,"line_start":2816,"line_end":2816,"column_start":5,"column_end":71}},{"value":"/ `[0, 127]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142792,"byte_end":142807,"line_start":2817,"line_end":2817,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142812,"byte_end":142815,"line_start":2818,"line_end":2818,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142820,"byte_end":142834,"line_start":2819,"line_end":2819,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142839,"byte_end":142842,"line_start":2820,"line_end":2820,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142847,"byte_end":142863,"line_start":2821,"line_end":2821,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142868,"byte_end":142871,"line_start":2822,"line_end":2822,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142876,"byte_end":142883,"line_start":2823,"line_end":2823,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142888,"byte_end":142917,"line_start":2824,"line_end":2824,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142922,"byte_end":142925,"line_start":2825,"line_end":2825,"column_start":5,"column_end":8}},{"value":"/ assert!(B(\"abc\").is_ascii());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142930,"byte_end":142963,"line_start":2826,"line_end":2826,"column_start":5,"column_end":38}},{"value":"/ assert!(!B(\"☃βツ\").is_ascii());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":142968,"byte_end":143007,"line_start":2827,"line_end":2827,"column_start":5,"column_end":39}},{"value":"/ assert!(!B(b\"\\xFF\").is_ascii());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143012,"byte_end":143048,"line_start":2828,"line_end":2828,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143053,"byte_end":143060,"line_start":2829,"line_end":2829,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143065,"byte_end":143074,"line_start":2830,"line_end":2830,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143967,"byte_end":143974,"line_start":2859,"line_end":2859,"column_start":8,"column_end":15},"name":"is_utf8","qualname":"::ext_slice::ByteSlice::is_utf8","value":"fn (&self) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns true if and only if the entire byte string is valid UTF-8.","sig":null,"attributes":[{"value":"/ Returns true if and only if the entire byte string is valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143197,"byte_end":143267,"line_start":2835,"line_end":2835,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143272,"byte_end":143275,"line_start":2836,"line_end":2836,"column_start":5,"column_end":8}},{"value":"/ If you need location information about where a byte string's first","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143280,"byte_end":143350,"line_start":2837,"line_end":2837,"column_start":5,"column_end":75}},{"value":"/ invalid UTF-8 byte is, then use the [`to_str`](#method.to_str) method.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143355,"byte_end":143429,"line_start":2838,"line_end":2838,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143434,"byte_end":143437,"line_start":2839,"line_end":2839,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143442,"byte_end":143456,"line_start":2840,"line_end":2840,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143461,"byte_end":143464,"line_start":2841,"line_end":2841,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143469,"byte_end":143485,"line_start":2842,"line_end":2842,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143490,"byte_end":143493,"line_start":2843,"line_end":2843,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143498,"byte_end":143505,"line_start":2844,"line_end":2844,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143510,"byte_end":143539,"line_start":2845,"line_end":2845,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143544,"byte_end":143547,"line_start":2846,"line_end":2846,"column_start":5,"column_end":8}},{"value":"/ assert!(B(\"abc\").is_utf8());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143552,"byte_end":143584,"line_start":2847,"line_end":2847,"column_start":5,"column_end":37}},{"value":"/ assert!(B(\"☃βツ\").is_utf8());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143589,"byte_end":143626,"line_start":2848,"line_end":2848,"column_start":5,"column_end":37}},{"value":"/ // invalid bytes","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143631,"byte_end":143651,"line_start":2849,"line_end":2849,"column_start":5,"column_end":25}},{"value":"/ assert!(!B(b\"abc\\xFF\").is_utf8());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143656,"byte_end":143694,"line_start":2850,"line_end":2850,"column_start":5,"column_end":43}},{"value":"/ // surrogate encoding","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143699,"byte_end":143724,"line_start":2851,"line_end":2851,"column_start":5,"column_end":30}},{"value":"/ assert!(!B(b\"\\xED\\xA0\\x80\").is_utf8());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143729,"byte_end":143772,"line_start":2852,"line_end":2852,"column_start":5,"column_end":48}},{"value":"/ // incomplete sequence","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143777,"byte_end":143803,"line_start":2853,"line_end":2853,"column_start":5,"column_end":31}},{"value":"/ assert!(!B(b\"\\xF0\\x9D\\x9Ca\").is_utf8());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143808,"byte_end":143852,"line_start":2854,"line_end":2854,"column_start":5,"column_end":49}},{"value":"/ // overlong sequence","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143857,"byte_end":143881,"line_start":2855,"line_end":2855,"column_start":5,"column_end":29}},{"value":"/ assert!(!B(b\"\\xF0\\x82\\x82\\xAC\").is_utf8());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143886,"byte_end":143933,"line_start":2856,"line_end":2856,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143938,"byte_end":143945,"line_start":2857,"line_end":2857,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":143950,"byte_end":143959,"line_start":2858,"line_end":2858,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144564,"byte_end":144573,"line_start":2880,"line_end":2880,"column_start":8,"column_end":17},"name":"last_byte","qualname":"::ext_slice::ByteSlice::last_byte","value":"fn (&self) -> Option<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the last byte in this byte string, if it's non-empty. If this\n byte string is empty, this returns `None`.","sig":null,"attributes":[{"value":"/ Returns the last byte in this byte string, if it's non-empty. If this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144051,"byte_end":144124,"line_start":2863,"line_end":2863,"column_start":5,"column_end":78}},{"value":"/ byte string is empty, this returns `None`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144129,"byte_end":144175,"line_start":2864,"line_end":2864,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144180,"byte_end":144183,"line_start":2865,"line_end":2865,"column_start":5,"column_end":8}},{"value":"/ Note that this is like the generic `[u8]::last`, except this returns","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144188,"byte_end":144260,"line_start":2866,"line_end":2866,"column_start":5,"column_end":77}},{"value":"/ the byte by value instead of a reference to the byte.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144265,"byte_end":144322,"line_start":2867,"line_end":2867,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144327,"byte_end":144330,"line_start":2868,"line_end":2868,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144335,"byte_end":144349,"line_start":2869,"line_end":2869,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144354,"byte_end":144357,"line_start":2870,"line_end":2870,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144362,"byte_end":144378,"line_start":2871,"line_end":2871,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144383,"byte_end":144386,"line_start":2872,"line_end":2872,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144391,"byte_end":144398,"line_start":2873,"line_end":2873,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144403,"byte_end":144427,"line_start":2874,"line_end":2874,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144432,"byte_end":144435,"line_start":2875,"line_end":2875,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(b'z'), b\"baz\".last_byte());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144440,"byte_end":144487,"line_start":2876,"line_end":2876,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(None, b\"\".last_byte());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144492,"byte_end":144530,"line_start":2877,"line_end":2877,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144535,"byte_end":144542,"line_start":2878,"line_end":2878,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144547,"byte_end":144556,"line_start":2879,"line_end":2879,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145254,"byte_end":145273,"line_start":2901,"line_end":2901,"column_start":8,"column_end":27},"name":"find_non_ascii_byte","qualname":"::ext_slice::ByteSlice::find_non_ascii_byte","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first non-ASCII byte in this byte string (if\n any such indices exist). Specifically, it returns the index of the\n first byte with a value greater than or equal to `0x80`.","sig":null,"attributes":[{"value":"/ Returns the index of the first non-ASCII byte in this byte string (if","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144706,"byte_end":144779,"line_start":2885,"line_end":2885,"column_start":5,"column_end":78}},{"value":"/ any such indices exist). Specifically, it returns the index of the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144784,"byte_end":144854,"line_start":2886,"line_end":2886,"column_start":5,"column_end":75}},{"value":"/ first byte with a value greater than or equal to `0x80`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144859,"byte_end":144919,"line_start":2887,"line_end":2887,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144924,"byte_end":144927,"line_start":2888,"line_end":2888,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144932,"byte_end":144946,"line_start":2889,"line_end":2889,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144951,"byte_end":144954,"line_start":2890,"line_end":2890,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144959,"byte_end":144975,"line_start":2891,"line_end":2891,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144980,"byte_end":144983,"line_start":2892,"line_end":2892,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":144988,"byte_end":144995,"line_start":2893,"line_end":2893,"column_start":5,"column_end":12}},{"value":"/ use bstr::{ByteSlice, B};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145000,"byte_end":145029,"line_start":2894,"line_end":2894,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145034,"byte_end":145037,"line_start":2895,"line_end":2895,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(3), b\"abc\\xff\".find_non_ascii_byte());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145042,"byte_end":145100,"line_start":2896,"line_end":2896,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(None, b\"abcde\".find_non_ascii_byte());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145105,"byte_end":145158,"line_start":2897,"line_end":2897,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(Some(0), B(\"😀\").find_non_ascii_byte());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145163,"byte_end":145220,"line_start":2898,"line_end":2898,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145225,"byte_end":145232,"line_start":2899,"line_end":2899,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145237,"byte_end":145246,"line_start":2900,"line_end":2900,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146413,"byte_end":146428,"line_start":2936,"line_end":2936,"column_start":8,"column_end":23},"name":"copy_within_str","qualname":"::ext_slice::ByteSlice::copy_within_str","value":"fn <R> (&mut self, src: R, dest: usize) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Copies elements from one part of the slice to another part of itself,\n where the parts may be overlapping.","sig":null,"attributes":[{"value":"/ Copies elements from one part of the slice to another part of itself,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145489,"byte_end":145562,"line_start":2910,"line_end":2910,"column_start":5,"column_end":78}},{"value":"/ where the parts may be overlapping.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145567,"byte_end":145606,"line_start":2911,"line_end":2911,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145611,"byte_end":145614,"line_start":2912,"line_end":2912,"column_start":5,"column_end":8}},{"value":"/ `src` is the range within this byte string to copy from, while `dest`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145619,"byte_end":145692,"line_start":2913,"line_end":2913,"column_start":5,"column_end":78}},{"value":"/ is the starting index of the range within this byte string to copy to.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145697,"byte_end":145771,"line_start":2914,"line_end":2914,"column_start":5,"column_end":79}},{"value":"/ The length indicated by `src` must be less than or equal to the number","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145776,"byte_end":145850,"line_start":2915,"line_end":2915,"column_start":5,"column_end":79}},{"value":"/ of bytes from `dest` to the end of the byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145855,"byte_end":145910,"line_start":2916,"line_end":2916,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145915,"byte_end":145918,"line_start":2917,"line_end":2917,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145923,"byte_end":145935,"line_start":2918,"line_end":2918,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145940,"byte_end":145943,"line_start":2919,"line_end":2919,"column_start":5,"column_end":8}},{"value":"/ Panics if either range is out of bounds, or if `src` is too big to fit","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":145948,"byte_end":146022,"line_start":2920,"line_end":2920,"column_start":5,"column_end":79}},{"value":"/ into `dest`, or if the end of `src` is before the start.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146027,"byte_end":146087,"line_start":2921,"line_end":2921,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146092,"byte_end":146095,"line_start":2922,"line_end":2922,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146100,"byte_end":146114,"line_start":2923,"line_end":2923,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146119,"byte_end":146122,"line_start":2924,"line_end":2924,"column_start":5,"column_end":8}},{"value":"/ Copying four bytes within a byte string:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146127,"byte_end":146171,"line_start":2925,"line_end":2925,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146176,"byte_end":146179,"line_start":2926,"line_end":2926,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146184,"byte_end":146191,"line_start":2927,"line_end":2927,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146196,"byte_end":146225,"line_start":2928,"line_end":2928,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146230,"byte_end":146233,"line_start":2929,"line_end":2929,"column_start":5,"column_end":8}},{"value":"/ let mut buf = *b\"Hello, World!\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146238,"byte_end":146274,"line_start":2930,"line_end":2930,"column_start":5,"column_end":41}},{"value":"/ let s = &mut buf;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146279,"byte_end":146300,"line_start":2931,"line_end":2931,"column_start":5,"column_end":26}},{"value":"/ s.copy_within_str(1..5, 8);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146305,"byte_end":146336,"line_start":2932,"line_end":2932,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(s, B(\"Hello, Wello!\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146341,"byte_end":146379,"line_start":2933,"line_end":2933,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146384,"byte_end":146391,"line_start":2934,"line_end":2934,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":146396,"byte_end":146405,"line_start":2935,"line_end":2935,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1064},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148903,"byte_end":148909,"line_start":2994,"line_end":2994,"column_start":12,"column_end":18},"name":"Finder","qualname":"::ext_slice::Finder","value":"Finder {  }","parent":null,"children":[{"krate":0,"index":1066}],"decl_id":null,"docs":" A single substring searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring searcher fixed to a particular needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":147986,"byte_end":148047,"line_start":2977,"line_end":2977,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148048,"byte_end":148051,"line_start":2978,"line_end":2978,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148052,"byte_end":148126,"line_start":2979,"line_end":2979,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148127,"byte_end":148200,"line_start":2980,"line_end":2980,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148201,"byte_end":148275,"line_start":2981,"line_end":2981,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148276,"byte_end":148352,"line_start":2982,"line_end":2982,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general, using","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148353,"byte_end":148431,"line_start":2983,"line_end":2983,"column_start":1,"column_end":79}},{"value":"/ [`ByteSlice::find`](trait.ByteSlice.html#method.find)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148432,"byte_end":148489,"line_start":2984,"line_end":2984,"column_start":1,"column_end":58}},{"value":"/ or","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148490,"byte_end":148496,"line_start":2985,"line_end":2985,"column_start":1,"column_end":7}},{"value":"/ [`ByteSlice::find_iter`](trait.ByteSlice.html#method.find_iter)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148497,"byte_end":148564,"line_start":2986,"line_end":2986,"column_start":1,"column_end":68}},{"value":"/ is good enough, but `Finder` is useful when you can meaningfully observe","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148565,"byte_end":148641,"line_start":2987,"line_end":2987,"column_start":1,"column_end":77}},{"value":"/ searcher construction time in a profile.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148642,"byte_end":148686,"line_start":2988,"line_end":2988,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148687,"byte_end":148690,"line_start":2989,"line_end":2989,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148691,"byte_end":148764,"line_start":2990,"line_end":2990,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `Finder` that is not connected to the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148765,"byte_end":148839,"line_start":2991,"line_end":2991,"column_start":1,"column_end":75}},{"value":"/ lifetime of its needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148840,"byte_end":148867,"line_start":2992,"line_end":2992,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149042,"byte_end":149045,"line_start":3001,"line_end":3001,"column_start":12,"column_end":15},"name":"new","qualname":"<Finder>::new","value":"fn <B> (needle: &'a B) -> Finder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Create a new finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new finder for the given needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148971,"byte_end":149016,"line_start":2999,"line_end":2999,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149021,"byte_end":149030,"line_start":3000,"line_end":3000,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149518,"byte_end":149528,"line_start":3014,"line_end":3014,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Finder>::into_owned","value":"fn (self) -> Finder<'static>","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149175,"byte_end":149245,"line_start":3005,"line_end":3005,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149250,"byte_end":149273,"line_start":3006,"line_end":3006,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149278,"byte_end":149281,"line_start":3007,"line_end":3007,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149286,"byte_end":149358,"line_start":3008,"line_end":3008,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149363,"byte_end":149390,"line_start":3009,"line_end":3009,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149395,"byte_end":149398,"line_start":3010,"line_end":3010,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149403,"byte_end":149464,"line_start":3011,"line_end":3011,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149469,"byte_end":149492,"line_start":3012,"line_end":3012,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149497,"byte_end":149506,"line_start":3013,"line_end":3013,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150012,"byte_end":150018,"line_start":3025,"line_end":3025,"column_start":12,"column_end":18},"name":"needle","qualname":"<Finder>::needle","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149623,"byte_end":149676,"line_start":3018,"line_end":3018,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149681,"byte_end":149684,"line_start":3019,"line_end":3019,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149689,"byte_end":149762,"line_start":3020,"line_end":3020,"column_start":5,"column_end":78}},{"value":"/ of the finder, and may be shorter than the `'a` lifetime. Namely, a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149767,"byte_end":149838,"line_start":3021,"line_end":3021,"column_start":5,"column_end":76}},{"value":"/ finder's needle can be either borrowed or owned, so the lifetime of the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149843,"byte_end":149918,"line_start":3022,"line_end":3022,"column_start":5,"column_end":80}},{"value":"/ needle returned must necessarily be the shorter of the two.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149923,"byte_end":149986,"line_start":3023,"line_end":3023,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":149991,"byte_end":150000,"line_start":3024,"line_end":3024,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151048,"byte_end":151052,"line_start":3057,"line_end":3057,"column_start":12,"column_end":16},"name":"find","qualname":"<Finder>::find","value":"fn <B> (&self, haystack: B) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of this needle in the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150079,"byte_end":150152,"line_start":3029,"line_end":3029,"column_start":5,"column_end":78}},{"value":"/ haystack.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150157,"byte_end":150170,"line_start":3030,"line_end":3030,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150175,"byte_end":150178,"line_start":3031,"line_end":3031,"column_start":5,"column_end":8}},{"value":"/ The haystack may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150183,"byte_end":150252,"line_start":3032,"line_end":3032,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150257,"byte_end":150327,"line_start":3033,"line_end":3033,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150332,"byte_end":150335,"line_start":3034,"line_end":3034,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150340,"byte_end":150356,"line_start":3035,"line_end":3035,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150361,"byte_end":150364,"line_start":3036,"line_end":3036,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150369,"byte_end":150441,"line_start":3037,"line_end":3037,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150446,"byte_end":150518,"line_start":3038,"line_end":3038,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150523,"byte_end":150570,"line_start":3039,"line_end":3039,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150575,"byte_end":150578,"line_start":3040,"line_end":3040,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150583,"byte_end":150652,"line_start":3041,"line_end":3041,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150657,"byte_end":150672,"line_start":3042,"line_end":3042,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150677,"byte_end":150680,"line_start":3043,"line_end":3043,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150685,"byte_end":150699,"line_start":3044,"line_end":3044,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150704,"byte_end":150707,"line_start":3045,"line_end":3045,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150712,"byte_end":150728,"line_start":3046,"line_end":3046,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150733,"byte_end":150736,"line_start":3047,"line_end":3047,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150741,"byte_end":150748,"line_start":3048,"line_end":3048,"column_start":5,"column_end":12}},{"value":"/ use bstr::Finder;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150753,"byte_end":150774,"line_start":3049,"line_end":3049,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150779,"byte_end":150782,"line_start":3050,"line_end":3050,"column_start":5,"column_end":8}},{"value":"/ let haystack = \"foo bar baz\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150787,"byte_end":150820,"line_start":3051,"line_end":3051,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some(0), Finder::new(\"foo\").find(haystack));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150825,"byte_end":150884,"line_start":3052,"line_end":3052,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Some(4), Finder::new(\"bar\").find(haystack));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150889,"byte_end":150948,"line_start":3053,"line_end":3053,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(None, Finder::new(\"quux\").find(haystack));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":150953,"byte_end":151010,"line_start":3054,"line_end":3054,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151015,"byte_end":151022,"line_start":3055,"line_end":3055,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151027,"byte_end":151036,"line_start":3056,"line_end":3056,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1073},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152106,"byte_end":152119,"line_start":3079,"line_end":3079,"column_start":12,"column_end":25},"name":"FinderReverse","qualname":"::ext_slice::FinderReverse","value":"FinderReverse {  }","parent":null,"children":[{"krate":0,"index":1075}],"decl_id":null,"docs":" A single substring reverse searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring reverse searcher fixed to a particular needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151163,"byte_end":151232,"line_start":3062,"line_end":3062,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151233,"byte_end":151236,"line_start":3063,"line_end":3063,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151237,"byte_end":151311,"line_start":3064,"line_end":3064,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151312,"byte_end":151385,"line_start":3065,"line_end":3065,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151386,"byte_end":151460,"line_start":3066,"line_end":3066,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151461,"byte_end":151537,"line_start":3067,"line_end":3067,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general, using","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151538,"byte_end":151616,"line_start":3068,"line_end":3068,"column_start":1,"column_end":79}},{"value":"/ [`ByteSlice::rfind`](trait.ByteSlice.html#method.rfind)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151617,"byte_end":151676,"line_start":3069,"line_end":3069,"column_start":1,"column_end":60}},{"value":"/ or","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151677,"byte_end":151683,"line_start":3070,"line_end":3070,"column_start":1,"column_end":7}},{"value":"/ [`ByteSlice::rfind_iter`](trait.ByteSlice.html#method.rfind_iter)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151684,"byte_end":151753,"line_start":3071,"line_end":3071,"column_start":1,"column_end":70}},{"value":"/ is good enough, but `FinderReverse` is useful when you can meaningfully","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151754,"byte_end":151829,"line_start":3072,"line_end":3072,"column_start":1,"column_end":76}},{"value":"/ observe searcher construction time in a profile.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151830,"byte_end":151882,"line_start":3073,"line_end":3073,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151883,"byte_end":151886,"line_start":3074,"line_end":3074,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151887,"byte_end":151960,"line_start":3075,"line_end":3075,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `FinderReverse` that is not connected to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":151961,"byte_end":152038,"line_start":3076,"line_end":3076,"column_start":1,"column_end":78}},{"value":"/ the lifetime of its needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152039,"byte_end":152070,"line_start":3077,"line_end":3077,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152267,"byte_end":152270,"line_start":3086,"line_end":3086,"column_start":12,"column_end":15},"name":"new","qualname":"<FinderReverse>::new","value":"fn <B> (needle: &'a B) -> FinderReverse<'a>","parent":null,"children":[],"decl_id":null,"docs":" Create a new reverse finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new reverse finder for the given needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152188,"byte_end":152241,"line_start":3084,"line_end":3084,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152246,"byte_end":152255,"line_start":3085,"line_end":3085,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152757,"byte_end":152767,"line_start":3099,"line_end":3099,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<FinderReverse>::into_owned","value":"fn (self) -> FinderReverse<'static>","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152414,"byte_end":152484,"line_start":3090,"line_end":3090,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152489,"byte_end":152512,"line_start":3091,"line_end":3091,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152517,"byte_end":152520,"line_start":3092,"line_end":3092,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152525,"byte_end":152597,"line_start":3093,"line_end":3093,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152602,"byte_end":152629,"line_start":3094,"line_end":3094,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152634,"byte_end":152637,"line_start":3095,"line_end":3095,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152642,"byte_end":152703,"line_start":3096,"line_end":3096,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152708,"byte_end":152731,"line_start":3097,"line_end":3097,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152736,"byte_end":152745,"line_start":3098,"line_end":3098,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153266,"byte_end":153272,"line_start":3110,"line_end":3110,"column_start":12,"column_end":18},"name":"needle","qualname":"<FinderReverse>::needle","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152876,"byte_end":152929,"line_start":3103,"line_end":3103,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152934,"byte_end":152937,"line_start":3104,"line_end":3104,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152942,"byte_end":153015,"line_start":3105,"line_end":3105,"column_start":5,"column_end":78}},{"value":"/ of this finder, and may be shorter than the `'a` lifetime. Namely,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153020,"byte_end":153090,"line_start":3106,"line_end":3106,"column_start":5,"column_end":75}},{"value":"/ a finder's needle can be either borrowed or owned, so the lifetime of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153095,"byte_end":153168,"line_start":3107,"line_end":3107,"column_start":5,"column_end":78}},{"value":"/ the needle returned must necessarily be the shorter of the two.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153173,"byte_end":153240,"line_start":3108,"line_end":3108,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153245,"byte_end":153254,"line_start":3109,"line_end":3109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154332,"byte_end":154337,"line_start":3142,"line_end":3142,"column_start":12,"column_end":17},"name":"rfind","qualname":"<FinderReverse>::rfind","value":"fn <B> (&self, haystack: B) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of this needle in the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153333,"byte_end":153405,"line_start":3114,"line_end":3114,"column_start":5,"column_end":77}},{"value":"/ haystack.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153410,"byte_end":153423,"line_start":3115,"line_end":3115,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153428,"byte_end":153431,"line_start":3116,"line_end":3116,"column_start":5,"column_end":8}},{"value":"/ The haystack may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153436,"byte_end":153505,"line_start":3117,"line_end":3117,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153510,"byte_end":153580,"line_start":3118,"line_end":3118,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153585,"byte_end":153588,"line_start":3119,"line_end":3119,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153593,"byte_end":153609,"line_start":3120,"line_end":3120,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153614,"byte_end":153617,"line_start":3121,"line_end":3121,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153622,"byte_end":153694,"line_start":3122,"line_end":3122,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153699,"byte_end":153771,"line_start":3123,"line_end":3123,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153776,"byte_end":153823,"line_start":3124,"line_end":3124,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153828,"byte_end":153831,"line_start":3125,"line_end":3125,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153836,"byte_end":153905,"line_start":3126,"line_end":3126,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153910,"byte_end":153925,"line_start":3127,"line_end":3127,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153930,"byte_end":153933,"line_start":3128,"line_end":3128,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153938,"byte_end":153952,"line_start":3129,"line_end":3129,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153957,"byte_end":153960,"line_start":3130,"line_end":3130,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153965,"byte_end":153981,"line_start":3131,"line_end":3131,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153986,"byte_end":153989,"line_start":3132,"line_end":3132,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":153994,"byte_end":154001,"line_start":3133,"line_end":3133,"column_start":5,"column_end":12}},{"value":"/ use bstr::FinderReverse;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154006,"byte_end":154034,"line_start":3134,"line_end":3134,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154039,"byte_end":154042,"line_start":3135,"line_end":3135,"column_start":5,"column_end":8}},{"value":"/ let haystack = \"foo bar baz\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154047,"byte_end":154080,"line_start":3136,"line_end":3136,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some(0), FinderReverse::new(\"foo\").rfind(haystack));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154085,"byte_end":154152,"line_start":3137,"line_end":3137,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(Some(4), FinderReverse::new(\"bar\").rfind(haystack));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154157,"byte_end":154224,"line_start":3138,"line_end":3138,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(None, FinderReverse::new(\"quux\").rfind(haystack));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154229,"byte_end":154294,"line_start":3139,"line_end":3139,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154299,"byte_end":154306,"line_start":3140,"line_end":3140,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154311,"byte_end":154320,"line_start":3141,"line_end":3141,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1082},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154720,"byte_end":154724,"line_start":3154,"line_end":3154,"column_start":12,"column_end":16},"name":"Find","qualname":"::ext_slice::Find","value":"Find {  }","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154449,"byte_end":154504,"line_start":3147,"line_end":3147,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154505,"byte_end":154508,"line_start":3148,"line_end":3148,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154509,"byte_end":154573,"line_start":3149,"line_end":3149,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154574,"byte_end":154577,"line_start":3150,"line_end":3150,"column_start":1,"column_end":4}},{"value":"/ `'a` is the shorter of two lifetimes: the byte string being searched or the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154578,"byte_end":154657,"line_start":3151,"line_end":3151,"column_start":1,"column_end":80}},{"value":"/ byte string being looked for.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154658,"byte_end":154691,"line_start":3152,"line_end":3152,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1091},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":155918,"byte_end":155929,"line_start":3198,"line_end":3198,"column_start":12,"column_end":23},"name":"FindReverse","qualname":"::ext_slice::FindReverse","value":"FindReverse {  }","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches in reverse.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches in reverse.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":155636,"byte_end":155702,"line_start":3191,"line_end":3191,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":155703,"byte_end":155706,"line_start":3192,"line_end":3192,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":155707,"byte_end":155771,"line_start":3193,"line_end":3193,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":155772,"byte_end":155775,"line_start":3194,"line_end":3194,"column_start":1,"column_end":4}},{"value":"/ `'a` is the shorter of two lifetimes: the byte string being searched or the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":155776,"byte_end":155855,"line_start":3195,"line_end":3195,"column_start":1,"column_end":80}},{"value":"/ byte string being looked for.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":155856,"byte_end":155889,"line_start":3196,"line_end":3196,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157393,"byte_end":157398,"line_start":3254,"line_end":3254,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::ext_slice::Bytes","value":"Bytes {  }","parent":null,"children":[{"krate":0,"index":1102}],"decl_id":null,"docs":" An iterator over the bytes in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over the bytes in a byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157244,"byte_end":157292,"line_start":3250,"line_end":3250,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157293,"byte_end":157296,"line_start":3251,"line_end":3251,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being traversed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157297,"byte_end":157357,"line_start":3252,"line_end":3252,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1109},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158153,"byte_end":158159,"line_start":3288,"line_end":3288,"column_start":12,"column_end":18},"name":"Fields","qualname":"::ext_slice::Fields","value":"Fields {  }","parent":null,"children":[{"krate":0,"index":1111}],"decl_id":null,"docs":" An iterator over the fields in a byte string, separated by whitespace.","sig":null,"attributes":[{"value":"/ An iterator over the fields in a byte string, separated by whitespace.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157858,"byte_end":157932,"line_start":3281,"line_end":3281,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157933,"byte_end":157936,"line_start":3282,"line_end":3282,"column_start":1,"column_end":4}},{"value":"/ This iterator splits on contiguous runs of whitespace, such that the fields","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157937,"byte_end":158016,"line_start":3283,"line_end":3283,"column_start":1,"column_end":80}},{"value":"/ in `foo\\t\\t\\n  \\nbar` are `foo` and `bar`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158017,"byte_end":158063,"line_start":3284,"line_end":3284,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158064,"byte_end":158067,"line_start":3285,"line_end":3285,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158068,"byte_end":158124,"line_start":3286,"line_end":3286,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1115},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158961,"byte_end":158971,"line_start":3317,"line_end":3317,"column_start":12,"column_end":22},"name":"FieldsWith","qualname":"::ext_slice::FieldsWith","value":"FieldsWith {  }","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120}],"decl_id":null,"docs":" An iterator over fields in the byte string, separated by a predicate over\n codepoints.","sig":null,"attributes":[{"value":"/ An iterator over fields in the byte string, separated by a predicate over","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158505,"byte_end":158582,"line_start":3307,"line_end":3307,"column_start":1,"column_end":78}},{"value":"/ codepoints.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158583,"byte_end":158598,"line_start":3308,"line_end":3308,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158599,"byte_end":158602,"line_start":3309,"line_end":3309,"column_start":1,"column_end":4}},{"value":"/ This iterator splits a byte string based on its predicate function such","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158603,"byte_end":158678,"line_start":3310,"line_end":3310,"column_start":1,"column_end":76}},{"value":"/ that the elements returned are separated by contiguous runs of codepoints","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158679,"byte_end":158756,"line_start":3311,"line_end":3311,"column_start":1,"column_end":78}},{"value":"/ for which the predicate returns true.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158757,"byte_end":158798,"line_start":3312,"line_end":3312,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158799,"byte_end":158802,"line_start":3313,"line_end":3313,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158803,"byte_end":158881,"line_start":3314,"line_end":3314,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158882,"byte_end":158932,"line_start":3315,"line_end":3315,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":160098,"byte_end":160103,"line_start":3361,"line_end":3361,"column_start":12,"column_end":17},"name":"Split","qualname":"::ext_slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129}],"decl_id":null,"docs":" An iterator over substrings in a byte string, split by a separator.","sig":null,"attributes":[{"value":"/ An iterator over substrings in a byte string, split by a separator.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":159937,"byte_end":160008,"line_start":3357,"line_end":3357,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":160009,"byte_end":160012,"line_start":3358,"line_end":3358,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":160013,"byte_end":160069,"line_start":3359,"line_end":3359,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":161926,"byte_end":161938,"line_start":3417,"line_end":3417,"column_start":12,"column_end":24},"name":"SplitReverse","qualname":"::ext_slice::SplitReverse","value":"SplitReverse {  }","parent":null,"children":[{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137}],"decl_id":null,"docs":" An iterator over substrings in a byte string, split by a separator, in\n reverse.","sig":null,"attributes":[{"value":"/ An iterator over substrings in a byte string, split by a separator, in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":161676,"byte_end":161750,"line_start":3411,"line_end":3411,"column_start":1,"column_end":75}},{"value":"/ reverse.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":161751,"byte_end":161763,"line_start":3412,"line_end":3412,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":161764,"byte_end":161767,"line_start":3413,"line_end":3413,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":161768,"byte_end":161846,"line_start":3414,"line_end":3414,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":161847,"byte_end":161897,"line_start":3415,"line_end":3415,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1141},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":163810,"byte_end":163816,"line_start":3474,"line_end":3474,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::ext_slice::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145}],"decl_id":null,"docs":" An iterator over at most `n` substrings in a byte string, split by a\n separator.","sig":null,"attributes":[{"value":"/ An iterator over at most `n` substrings in a byte string, split by a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":163560,"byte_end":163632,"line_start":3468,"line_end":3468,"column_start":1,"column_end":73}},{"value":"/ separator.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":163633,"byte_end":163647,"line_start":3469,"line_end":3469,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":163648,"byte_end":163651,"line_start":3470,"line_end":3470,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":163652,"byte_end":163730,"line_start":3471,"line_end":3471,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":163731,"byte_end":163781,"line_start":3472,"line_end":3472,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1149},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":164776,"byte_end":164789,"line_start":3513,"line_end":3513,"column_start":12,"column_end":25},"name":"SplitNReverse","qualname":"::ext_slice::SplitNReverse","value":"SplitNReverse {  }","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153}],"decl_id":null,"docs":" An iterator over at most `n` substrings in a byte string, split by a\n separator, in reverse.","sig":null,"attributes":[{"value":"/ An iterator over at most `n` substrings in a byte string, split by a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":164514,"byte_end":164586,"line_start":3507,"line_end":3507,"column_start":1,"column_end":73}},{"value":"/ separator, in reverse.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":164587,"byte_end":164613,"line_start":3508,"line_end":3508,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":164614,"byte_end":164617,"line_start":3509,"line_end":3509,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":164618,"byte_end":164696,"line_start":3510,"line_end":3510,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":164697,"byte_end":164747,"line_start":3511,"line_end":3511,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165770,"byte_end":165775,"line_start":3552,"line_end":3552,"column_start":12,"column_end":17},"name":"Lines","qualname":"::ext_slice::Lines","value":"Lines {  }","parent":null,"children":[{"krate":0,"index":395}],"decl_id":null,"docs":" An iterator over all lines in a byte string, without their terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, without their terminators.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165525,"byte_end":165600,"line_start":3546,"line_end":3546,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165601,"byte_end":165604,"line_start":3547,"line_end":3547,"column_start":1,"column_end":4}},{"value":"/ For this iterator, the only line terminators recognized are `\\r\\n` and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165605,"byte_end":165679,"line_start":3548,"line_end":3548,"column_start":1,"column_end":75}},{"value":"/ `\\n`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165680,"byte_end":165689,"line_start":3549,"line_end":3549,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165690,"byte_end":165693,"line_start":3550,"line_end":3550,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being iterated over.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165694,"byte_end":165758,"line_start":3551,"line_end":3551,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166948,"byte_end":166967,"line_start":3591,"line_end":3591,"column_start":12,"column_end":31},"name":"LinesWithTerminator","qualname":"::ext_slice::LinesWithTerminator","value":"LinesWithTerminator {  }","parent":null,"children":[{"krate":0,"index":405}],"decl_id":null,"docs":" An iterator over all lines in a byte string, including their terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, including their terminators.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166343,"byte_end":166420,"line_start":3578,"line_end":3578,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166421,"byte_end":166424,"line_start":3579,"line_end":3579,"column_start":1,"column_end":4}},{"value":"/ For this iterator, the only line terminator recognized is `\\n`. (Since","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166425,"byte_end":166499,"line_start":3580,"line_end":3580,"column_start":1,"column_end":75}},{"value":"/ line terminators are included, this also handles `\\r\\n` line endings.)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166500,"byte_end":166574,"line_start":3581,"line_end":3581,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166575,"byte_end":166578,"line_start":3582,"line_end":3582,"column_start":1,"column_end":4}},{"value":"/ Line terminators are only included if they are present in the original","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166579,"byte_end":166653,"line_start":3583,"line_end":3583,"column_start":1,"column_end":75}},{"value":"/ byte string. For example, the last line in a byte string may not end with","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166654,"byte_end":166731,"line_start":3584,"line_end":3584,"column_start":1,"column_end":78}},{"value":"/ a line terminator.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166732,"byte_end":166754,"line_start":3585,"line_end":3585,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166755,"byte_end":166758,"line_start":3586,"line_end":3586,"column_start":1,"column_end":4}},{"value":"/ Concatenating all elements yielded by this iterator is guaranteed to yield","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166759,"byte_end":166837,"line_start":3587,"line_end":3587,"column_start":1,"column_end":79}},{"value":"/ the original byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166838,"byte_end":166867,"line_start":3588,"line_end":3588,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166868,"byte_end":166871,"line_start":3589,"line_end":3589,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being iterated over.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":166872,"byte_end":166936,"line_start":3590,"line_end":3590,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169889,"byte_end":169895,"line_start":34,"line_end":34,"column_start":8,"column_end":14},"name":"concat","qualname":"::ext_vec::concat","value":"fn <T, I> (elements: I) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Concatenate the elements given by the iterator together into a single\n `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Concatenate the elements given by the iterator together into a single","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169450,"byte_end":169523,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ `Vec<u8>`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169524,"byte_end":169538,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169539,"byte_end":169542,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The elements may be any type that can be cheaply converted into an `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169543,"byte_end":169622,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ This includes, but is not limited to, `&str`, `&BStr` and `&[u8]` itself.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169623,"byte_end":169700,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169701,"byte_end":169704,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169705,"byte_end":169719,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169720,"byte_end":169723,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169724,"byte_end":169740,"line_start":25,"line_end":25,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169741,"byte_end":169744,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169745,"byte_end":169752,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use bstr;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169753,"byte_end":169766,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169767,"byte_end":169770,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let s = bstr::concat(&[\"foo\", \"bar\", \"baz\"]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169771,"byte_end":169820,"line_start":30,"line_end":30,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(s, \"foobarbaz\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169821,"byte_end":169863,"line_start":31,"line_end":31,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169864,"byte_end":169871,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":169872,"byte_end":169881,"line_start":33,"line_end":33,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170572,"byte_end":170576,"line_start":64,"line_end":64,"column_start":8,"column_end":12},"name":"join","qualname":"::ext_vec::join","value":"fn <B, T, I> (separator: B, elements: I) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Join the elements given by the iterator with the given separator into a\n single `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Join the elements given by the iterator with the given separator into a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170092,"byte_end":170167,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ single `Vec<u8>`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170168,"byte_end":170189,"line_start":47,"line_end":47,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170190,"byte_end":170193,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Both the separator and the elements may be any type that can be cheaply","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170194,"byte_end":170269,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ converted into an `&[u8]`. This includes, but is not limited to,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170270,"byte_end":170338,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ `&str`, `&BStr` and `&[u8]` itself.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170339,"byte_end":170378,"line_start":51,"line_end":51,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170379,"byte_end":170382,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170383,"byte_end":170397,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170398,"byte_end":170401,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170402,"byte_end":170418,"line_start":55,"line_end":55,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170419,"byte_end":170422,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170423,"byte_end":170430,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ use bstr;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170431,"byte_end":170444,"line_start":58,"line_end":58,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170445,"byte_end":170448,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let s = bstr::join(\",\", &[\"foo\", \"bar\", \"baz\"]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170449,"byte_end":170501,"line_start":60,"line_end":60,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(s, \"foo,bar,baz\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170502,"byte_end":170546,"line_start":61,"line_end":61,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170547,"byte_end":170554,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":170555,"byte_end":170564,"line_start":63,"line_end":63,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171369,"byte_end":171375,"line_start":104,"line_end":104,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::ext_vec::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Ensure that callers cannot implement `ByteSlice` by making an\n umplementable trait its super trait.\n","sig":null,"attributes":[{"value":"/ Ensure that callers cannot implement `ByteSlice` by making an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171252,"byte_end":171317,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"/ umplementable trait its super trait.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171318,"byte_end":171358,"line_start":103,"line_end":103,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171795,"byte_end":171802,"line_start":119,"line_end":119,"column_start":11,"column_end":18},"name":"ByteVec","qualname":"::ext_vec::ByteVec","value":"ByteVec: Sealed","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":479},{"krate":0,"index":481},{"krate":0,"index":484}],"decl_id":null,"docs":" A trait that extends `Vec<u8>` with string oriented methods.","sig":null,"attributes":[{"value":"/ A trait that extends `Vec<u8>` with string oriented methods.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171407,"byte_end":171471,"line_start":107,"line_end":107,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171472,"byte_end":171475,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ Note that when using the constructor methods, such as","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171476,"byte_end":171533,"line_start":109,"line_end":109,"column_start":1,"column_end":58}},{"value":"/ `ByteVec::from_slice`, one should actually call them using the concrete","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171534,"byte_end":171609,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/ type. For example:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171610,"byte_end":171632,"line_start":111,"line_end":111,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171633,"byte_end":171636,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171637,"byte_end":171644,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171645,"byte_end":171672,"line_start":114,"line_end":114,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171673,"byte_end":171676,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ let s = Vec::from_slice(b\"abc\"); // NOT ByteVec::from_slice(\"...\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171677,"byte_end":171747,"line_start":116,"line_end":116,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(s, B(\"abc\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171748,"byte_end":171776,"line_start":117,"line_end":117,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171777,"byte_end":171784,"line_start":118,"line_end":118,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172035,"byte_end":172041,"line_start":124,"line_end":124,"column_start":8,"column_end":14},"name":"as_vec","qualname":"::ext_vec::ByteVec::as_vec","value":"fn (&self) -> &Vec<u8>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" A method for accessing the raw vector bytes of this type. This is\n always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw vector bytes of this type. This is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171817,"byte_end":171886,"line_start":120,"line_end":120,"column_start":5,"column_end":74}},{"value":"/ always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171891,"byte_end":171963,"line_start":121,"line_end":121,"column_start":5,"column_end":77}},{"value":"/ for making the extension trait work.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171968,"byte_end":172008,"line_start":122,"line_end":122,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172294,"byte_end":172304,"line_start":130,"line_end":130,"column_start":8,"column_end":18},"name":"as_vec_mut","qualname":"::ext_vec::ByteVec::as_vec_mut","value":"fn (&mut self) -> &mut Vec<u8>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" A method for accessing the raw vector bytes of this type, mutably. This\n is always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw vector bytes of this type, mutably. This","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172067,"byte_end":172142,"line_start":126,"line_end":126,"column_start":5,"column_end":80}},{"value":"/ is always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172147,"byte_end":172222,"line_start":127,"line_end":127,"column_start":5,"column_end":80}},{"value":"/ for making the extension trait work.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172227,"byte_end":172267,"line_start":128,"line_end":128,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172547,"byte_end":172555,"line_start":136,"line_end":136,"column_start":8,"column_end":16},"name":"into_vec","qualname":"::ext_vec::ByteVec::into_vec","value":"fn (self) -> Vec<u8>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" A method for consuming ownership of this vector. This is always a no-op\n and callers shouldn't care about it. This only exists for making the\n extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for consuming ownership of this vector. This is always a no-op","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172338,"byte_end":172413,"line_start":132,"line_end":132,"column_start":5,"column_end":80}},{"value":"/ and callers shouldn't care about it. This only exists for making the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172418,"byte_end":172490,"line_start":133,"line_end":133,"column_start":5,"column_end":77}},{"value":"/ extension trait work.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172495,"byte_end":172520,"line_start":134,"line_end":134,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172894,"byte_end":172904,"line_start":153,"line_end":153,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::ext_vec::ByteVec::from_slice","value":"fn <B> (bytes: B) -> Vec<u8>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Create a new owned byte string from the given byte slice.","sig":null,"attributes":[{"value":"/ Create a new owned byte string from the given byte slice.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172609,"byte_end":172670,"line_start":140,"line_end":140,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172675,"byte_end":172678,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172683,"byte_end":172697,"line_start":142,"line_end":142,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172702,"byte_end":172705,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172710,"byte_end":172726,"line_start":144,"line_end":144,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172731,"byte_end":172734,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172739,"byte_end":172746,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172751,"byte_end":172778,"line_start":147,"line_end":147,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172783,"byte_end":172786,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let s = Vec::from_slice(b\"abc\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172791,"byte_end":172827,"line_start":149,"line_end":149,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(s, B(\"abc\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172832,"byte_end":172860,"line_start":150,"line_end":150,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172865,"byte_end":172872,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172877,"byte_end":172886,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173531,"byte_end":173545,"line_start":176,"line_end":176,"column_start":8,"column_end":22},"name":"from_os_string","qualname":"::ext_vec::ByteVec::from_os_string","value":"fn (os_str: OsString) -> Result<Vec<u8>, OsString>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Create a new byte string from an owned OS string.","sig":null,"attributes":[{"value":"/ Create a new byte string from an owned OS string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":172987,"byte_end":173040,"line_start":157,"line_end":157,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173045,"byte_end":173048,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173053,"byte_end":173125,"line_start":159,"line_end":159,"column_start":5,"column_end":77}},{"value":"/ this returns the original OS string if it is not valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173130,"byte_end":173195,"line_start":160,"line_end":160,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173200,"byte_end":173203,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173208,"byte_end":173222,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173227,"byte_end":173230,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173235,"byte_end":173251,"line_start":164,"line_end":164,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173256,"byte_end":173259,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173264,"byte_end":173271,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsString;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173276,"byte_end":173303,"line_start":167,"line_end":167,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173308,"byte_end":173311,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173316,"byte_end":173343,"line_start":169,"line_end":169,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173348,"byte_end":173351,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsString::from(\"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173356,"byte_end":173395,"line_start":171,"line_end":171,"column_start":5,"column_end":44}},{"value":"/ let bs = Vec::from_os_string(os_str).expect(\"valid UTF-8\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173400,"byte_end":173463,"line_start":172,"line_end":172,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173468,"byte_end":173497,"line_start":173,"line_end":173,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173502,"byte_end":173509,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":173514,"byte_end":173523,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174692,"byte_end":174709,"line_start":215,"line_end":215,"column_start":8,"column_end":25},"name":"from_os_str_lossy","qualname":"::ext_vec::ByteVec::from_os_str_lossy","value":"fn <'a> (os_str: &'a OsStr) -> Cow<'a, [u8]>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Lossily create a new byte string from an OS string slice.","sig":null,"attributes":[{"value":"/ Lossily create a new byte string from an OS string slice.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174002,"byte_end":174063,"line_start":194,"line_end":194,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174068,"byte_end":174071,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds, is zero cost and always returns a slice.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174076,"byte_end":174151,"line_start":196,"line_end":196,"column_start":5,"column_end":80}},{"value":"/ On non-Unix systems, this does a UTF-8 check. If the given OS string","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174156,"byte_end":174228,"line_start":197,"line_end":197,"column_start":5,"column_end":77}},{"value":"/ slice is not valid UTF-8, then it is lossily decoded into valid UTF-8","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174233,"byte_end":174306,"line_start":198,"line_end":198,"column_start":5,"column_end":78}},{"value":"/ (with invalid bytes replaced by the Unicode replacement codepoint).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174311,"byte_end":174382,"line_start":199,"line_end":199,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174387,"byte_end":174390,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174395,"byte_end":174409,"line_start":201,"line_end":201,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174414,"byte_end":174417,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174422,"byte_end":174438,"line_start":203,"line_end":203,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174443,"byte_end":174446,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174451,"byte_end":174458,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174463,"byte_end":174487,"line_start":206,"line_end":206,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174492,"byte_end":174495,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174500,"byte_end":174527,"line_start":208,"line_end":208,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174532,"byte_end":174535,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsStr::new(\"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174540,"byte_end":174575,"line_start":210,"line_end":210,"column_start":5,"column_end":40}},{"value":"/ let bs = Vec::from_os_str_lossy(os_str);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174580,"byte_end":174624,"line_start":211,"line_end":211,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174629,"byte_end":174658,"line_start":212,"line_end":212,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174663,"byte_end":174670,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":174675,"byte_end":174684,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175818,"byte_end":175831,"line_start":255,"line_end":255,"column_start":8,"column_end":21},"name":"from_path_buf","qualname":"::ext_vec::ByteVec::from_path_buf","value":"fn (path: PathBuf) -> Result<Vec<u8>, PathBuf>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Create a new byte string from an owned file path.","sig":null,"attributes":[{"value":"/ Create a new byte string from an owned file path.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175277,"byte_end":175330,"line_start":236,"line_end":236,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175335,"byte_end":175338,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175343,"byte_end":175415,"line_start":238,"line_end":238,"column_start":5,"column_end":77}},{"value":"/ this returns the original path if it is not valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175420,"byte_end":175480,"line_start":239,"line_end":239,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175485,"byte_end":175488,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175493,"byte_end":175507,"line_start":241,"line_end":241,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175512,"byte_end":175515,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175520,"byte_end":175536,"line_start":243,"line_end":243,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175541,"byte_end":175544,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175549,"byte_end":175556,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"/ use std::path::PathBuf;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175561,"byte_end":175588,"line_start":246,"line_end":246,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175593,"byte_end":175596,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175601,"byte_end":175628,"line_start":248,"line_end":248,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175633,"byte_end":175636,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ let path = PathBuf::from(\"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175641,"byte_end":175677,"line_start":250,"line_end":250,"column_start":5,"column_end":41}},{"value":"/ let bs = Vec::from_path_buf(path).expect(\"must be valid UTF-8\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175682,"byte_end":175750,"line_start":251,"line_end":251,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175755,"byte_end":175784,"line_start":252,"line_end":252,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175789,"byte_end":175796,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175801,"byte_end":175810,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176627,"byte_end":176642,"line_start":280,"line_end":280,"column_start":8,"column_end":23},"name":"from_path_lossy","qualname":"::ext_vec::ByteVec::from_path_lossy","value":"fn <'a> (path: &'a Path) -> Cow<'a, [u8]>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Lossily create a new byte string from a file path.","sig":null,"attributes":[{"value":"/ Lossily create a new byte string from a file path.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":175962,"byte_end":176016,"line_start":259,"line_end":259,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176021,"byte_end":176024,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds, is zero cost and always returns a slice.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176029,"byte_end":176104,"line_start":261,"line_end":261,"column_start":5,"column_end":80}},{"value":"/ On non-Unix systems, this does a UTF-8 check. If the given path is not","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176109,"byte_end":176183,"line_start":262,"line_end":262,"column_start":5,"column_end":79}},{"value":"/ valid UTF-8, then it is lossily decoded into valid UTF-8 (with invalid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176188,"byte_end":176262,"line_start":263,"line_end":263,"column_start":5,"column_end":79}},{"value":"/ bytes replaced by the Unicode replacement codepoint).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176267,"byte_end":176324,"line_start":264,"line_end":264,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176329,"byte_end":176332,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176337,"byte_end":176351,"line_start":266,"line_end":266,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176356,"byte_end":176359,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176364,"byte_end":176380,"line_start":268,"line_end":268,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176385,"byte_end":176388,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176393,"byte_end":176400,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"/ use std::path::Path;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176405,"byte_end":176429,"line_start":271,"line_end":271,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176434,"byte_end":176437,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176442,"byte_end":176469,"line_start":273,"line_end":273,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176474,"byte_end":176477,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ let path = Path::new(\"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176482,"byte_end":176514,"line_start":275,"line_end":275,"column_start":5,"column_end":37}},{"value":"/ let bs = Vec::from_path_lossy(path);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176519,"byte_end":176559,"line_start":276,"line_end":276,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176564,"byte_end":176593,"line_start":277,"line_end":277,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176598,"byte_end":176605,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176610,"byte_end":176619,"line_start":279,"line_end":279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177336,"byte_end":177345,"line_start":304,"line_end":304,"column_start":8,"column_end":17},"name":"push_byte","qualname":"::ext_vec::ByteVec::push_byte","value":"fn (&mut self, byte: u8) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Appends the given byte to the end of this byte string.","sig":null,"attributes":[{"value":"/ Appends the given byte to the end of this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176742,"byte_end":176800,"line_start":284,"line_end":284,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176805,"byte_end":176808,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `Vec::push` method. This","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176813,"byte_end":176885,"line_start":286,"line_end":286,"column_start":5,"column_end":77}},{"value":"/ method is provided to permit callers to explicitly differentiate","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176890,"byte_end":176958,"line_start":287,"line_end":287,"column_start":5,"column_end":73}},{"value":"/ between pushing bytes, codepoints and strings.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":176963,"byte_end":177013,"line_start":288,"line_end":288,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177018,"byte_end":177021,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177026,"byte_end":177040,"line_start":290,"line_end":290,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177045,"byte_end":177048,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177053,"byte_end":177069,"line_start":292,"line_end":292,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177074,"byte_end":177077,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177082,"byte_end":177089,"line_start":294,"line_end":294,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177094,"byte_end":177116,"line_start":295,"line_end":295,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177121,"byte_end":177124,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177129,"byte_end":177168,"line_start":297,"line_end":297,"column_start":5,"column_end":44}},{"value":"/ s.push_byte(b'\\xE2');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177173,"byte_end":177198,"line_start":298,"line_end":298,"column_start":5,"column_end":30}},{"value":"/ s.push_byte(b'\\x98');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177203,"byte_end":177228,"line_start":299,"line_end":299,"column_start":5,"column_end":30}},{"value":"/ s.push_byte(b'\\x83');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177233,"byte_end":177258,"line_start":300,"line_end":300,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s, \"abc☃\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177263,"byte_end":177302,"line_start":301,"line_end":301,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177307,"byte_end":177314,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177319,"byte_end":177328,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177789,"byte_end":177798,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"push_char","qualname":"::ext_vec::ByteVec::push_char","value":"fn (&mut self, ch: char) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Appends the given `char` to the end of this byte string.","sig":null,"attributes":[{"value":"/ Appends the given `char` to the end of this byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177418,"byte_end":177478,"line_start":308,"line_end":308,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177483,"byte_end":177486,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177491,"byte_end":177505,"line_start":310,"line_end":310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177510,"byte_end":177513,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177518,"byte_end":177534,"line_start":312,"line_end":312,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177539,"byte_end":177542,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177547,"byte_end":177554,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177559,"byte_end":177581,"line_start":315,"line_end":315,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177586,"byte_end":177589,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177594,"byte_end":177633,"line_start":317,"line_end":317,"column_start":5,"column_end":44}},{"value":"/ s.push_char('1');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177638,"byte_end":177659,"line_start":318,"line_end":318,"column_start":5,"column_end":26}},{"value":"/ s.push_char('2');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177664,"byte_end":177685,"line_start":319,"line_end":319,"column_start":5,"column_end":26}},{"value":"/ s.push_char('3');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177690,"byte_end":177711,"line_start":320,"line_end":320,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(s, \"abc123\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177716,"byte_end":177755,"line_start":321,"line_end":321,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177760,"byte_end":177767,"line_start":322,"line_end":322,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":177772,"byte_end":177781,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178507,"byte_end":178515,"line_start":349,"line_end":349,"column_start":8,"column_end":16},"name":"push_str","qualname":"::ext_vec::ByteVec::push_str","value":"fn <B> (&mut self, bytes: B) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Appends the given slice to the end of this byte string. This accepts\n any type that be converted to a `&[u8]`. This includes, but is not\n limited to, `&str`, `&BStr`, and of course, `&[u8]` itself.","sig":null,"attributes":[{"value":"/ Appends the given slice to the end of this byte string. This accepts","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178031,"byte_end":178103,"line_start":333,"line_end":333,"column_start":5,"column_end":77}},{"value":"/ any type that be converted to a `&[u8]`. This includes, but is not","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178108,"byte_end":178178,"line_start":334,"line_end":334,"column_start":5,"column_end":75}},{"value":"/ limited to, `&str`, `&BStr`, and of course, `&[u8]` itself.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178183,"byte_end":178246,"line_start":335,"line_end":335,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178251,"byte_end":178254,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178259,"byte_end":178273,"line_start":337,"line_end":337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178278,"byte_end":178281,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178286,"byte_end":178302,"line_start":339,"line_end":339,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178307,"byte_end":178310,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178315,"byte_end":178322,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178327,"byte_end":178349,"line_start":342,"line_end":342,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178354,"byte_end":178357,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178362,"byte_end":178401,"line_start":344,"line_end":344,"column_start":5,"column_end":44}},{"value":"/ s.push_str(b\"123\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178406,"byte_end":178429,"line_start":345,"line_end":345,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(s, \"abc123\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178434,"byte_end":178473,"line_start":346,"line_end":346,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178478,"byte_end":178485,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178490,"byte_end":178499,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180031,"byte_end":180042,"line_start":394,"line_end":394,"column_start":8,"column_end":19},"name":"into_string","qualname":"::ext_vec::ByteVec::into_string","value":"fn (self) -> Result<String, FromUtf8Error>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Converts a `Vec<u8>` into a `String` if and only if this byte string is\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Converts a `Vec<u8>` into a `String` if and only if this byte string is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178627,"byte_end":178702,"line_start":353,"line_end":353,"column_start":5,"column_end":80}},{"value":"/ valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178707,"byte_end":178723,"line_start":354,"line_end":354,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178728,"byte_end":178731,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ If it is not valid UTF-8, then a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178736,"byte_end":178772,"line_start":356,"line_end":356,"column_start":5,"column_end":41}},{"value":"/ [`FromUtf8Error`](struct.FromUtf8Error.html)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178777,"byte_end":178825,"line_start":357,"line_end":357,"column_start":5,"column_end":53}},{"value":"/ is returned. (This error can be used to examine why UTF-8 validation","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178830,"byte_end":178902,"line_start":358,"line_end":358,"column_start":5,"column_end":77}},{"value":"/ failed, or to regain the original byte string.)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178907,"byte_end":178958,"line_start":359,"line_end":359,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178963,"byte_end":178966,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178971,"byte_end":178985,"line_start":361,"line_end":361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178990,"byte_end":178993,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":178998,"byte_end":179014,"line_start":363,"line_end":363,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179019,"byte_end":179022,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179027,"byte_end":179034,"line_start":365,"line_end":365,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179039,"byte_end":179061,"line_start":366,"line_end":366,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179066,"byte_end":179069,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179074,"byte_end":179136,"line_start":368,"line_end":368,"column_start":5,"column_end":67}},{"value":"/ let bytes = Vec::from(\"hello\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179141,"byte_end":179176,"line_start":369,"line_end":369,"column_start":5,"column_end":40}},{"value":"/ let string = bytes.into_string()?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179181,"byte_end":179219,"line_start":370,"line_end":370,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179224,"byte_end":179227,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"hello\", string);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179232,"byte_end":179264,"line_start":372,"line_end":372,"column_start":5,"column_end":37}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179269,"byte_end":179303,"line_start":373,"line_end":373,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179308,"byte_end":179315,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179320,"byte_end":179323,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then an error will be returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179328,"byte_end":179403,"line_start":376,"line_end":376,"column_start":5,"column_end":80}},{"value":"/ That error can then be used to inspect the location at which invalid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179408,"byte_end":179480,"line_start":377,"line_end":377,"column_start":5,"column_end":77}},{"value":"/ UTF-8 was found, or to regain the original byte string:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179485,"byte_end":179544,"line_start":378,"line_end":378,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179549,"byte_end":179552,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179557,"byte_end":179564,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179569,"byte_end":179596,"line_start":381,"line_end":381,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179601,"byte_end":179604,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179609,"byte_end":179656,"line_start":383,"line_end":383,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179661,"byte_end":179708,"line_start":384,"line_end":384,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179713,"byte_end":179716,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179721,"byte_end":179771,"line_start":386,"line_end":386,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179776,"byte_end":179830,"line_start":387,"line_end":387,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179835,"byte_end":179838,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179843,"byte_end":179905,"line_start":389,"line_end":389,"column_start":5,"column_end":67}},{"value":"/ let bytes = Vec::from(err.into_vec());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179910,"byte_end":179952,"line_start":390,"line_end":390,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(bytes, B(b\"foo\\xFFbar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":179957,"byte_end":179997,"line_start":391,"line_end":391,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180002,"byte_end":180009,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180014,"byte_end":180023,"line_start":393,"line_end":393,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180952,"byte_end":180969,"line_start":424,"line_end":424,"column_start":8,"column_end":25},"name":"into_string_lossy","qualname":"::ext_vec::ByteVec::into_string_lossy","value":"fn (self) -> String","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Lossily converts a `Vec<u8>` into a `String`. If this byte string\n contains invalid UTF-8, then the invalid bytes are replaced with the\n Unicode replacement codepoint.","sig":null,"attributes":[{"value":"/ Lossily converts a `Vec<u8>` into a `String`. If this byte string","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180476,"byte_end":180545,"line_start":408,"line_end":408,"column_start":5,"column_end":74}},{"value":"/ contains invalid UTF-8, then the invalid bytes are replaced with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180550,"byte_end":180622,"line_start":409,"line_end":409,"column_start":5,"column_end":77}},{"value":"/ Unicode replacement codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180627,"byte_end":180661,"line_start":410,"line_end":410,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180666,"byte_end":180669,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180674,"byte_end":180688,"line_start":412,"line_end":412,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180693,"byte_end":180696,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180701,"byte_end":180717,"line_start":414,"line_end":414,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180722,"byte_end":180725,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180730,"byte_end":180737,"line_start":416,"line_end":416,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180742,"byte_end":180764,"line_start":417,"line_end":417,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180769,"byte_end":180772,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180777,"byte_end":180824,"line_start":419,"line_end":419,"column_start":5,"column_end":52}},{"value":"/ let string = bytes.into_string_lossy();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180829,"byte_end":180872,"line_start":420,"line_end":420,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(string, \"foo\\u{FFFD}bar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180877,"byte_end":180918,"line_start":421,"line_end":421,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180923,"byte_end":180930,"line_start":422,"line_end":422,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":180935,"byte_end":180944,"line_start":423,"line_end":423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182299,"byte_end":182320,"line_start":466,"line_end":466,"column_start":15,"column_end":36},"name":"into_string_unchecked","qualname":"::ext_vec::ByteVec::into_string_unchecked","value":"fn (self) -> String","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Unsafely convert this byte string into a `String`, without checking for\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Unsafely convert this byte string into a `String`, without checking for","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181289,"byte_end":181364,"line_start":439,"line_end":439,"column_start":5,"column_end":80}},{"value":"/ valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181369,"byte_end":181385,"line_start":440,"line_end":440,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181390,"byte_end":181393,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181398,"byte_end":181410,"line_start":442,"line_end":442,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181415,"byte_end":181418,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ Callers *must* ensure that this byte string is valid UTF-8 before","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181423,"byte_end":181492,"line_start":444,"line_end":444,"column_start":5,"column_end":74}},{"value":"/ calling this method. Converting a byte string into a `String` that is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181497,"byte_end":181570,"line_start":445,"line_end":445,"column_start":5,"column_end":78}},{"value":"/ not valid UTF-8 is considered undefined behavior.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181575,"byte_end":181628,"line_start":446,"line_end":446,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181633,"byte_end":181636,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ This routine is useful in performance sensitive contexts where the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181641,"byte_end":181711,"line_start":448,"line_end":448,"column_start":5,"column_end":75}},{"value":"/ UTF-8 validity of the byte string is already known and it is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181716,"byte_end":181780,"line_start":449,"line_end":449,"column_start":5,"column_end":69}},{"value":"/ undesirable to pay the cost of an additional UTF-8 validation check","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181785,"byte_end":181856,"line_start":450,"line_end":450,"column_start":5,"column_end":76}},{"value":"/ that [`into_string`](#method.into_string) performs.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181861,"byte_end":181916,"line_start":451,"line_end":451,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181921,"byte_end":181924,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181929,"byte_end":181943,"line_start":453,"line_end":453,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181948,"byte_end":181951,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181956,"byte_end":181972,"line_start":455,"line_end":455,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181977,"byte_end":181980,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181985,"byte_end":181992,"line_start":457,"line_end":457,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":181997,"byte_end":182019,"line_start":458,"line_end":458,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182024,"byte_end":182027,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ // SAFETY: This is safe because string literals are guaranteed to be","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182032,"byte_end":182104,"line_start":460,"line_end":460,"column_start":5,"column_end":77}},{"value":"/ // valid UTF-8 by the Rust compiler.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182109,"byte_end":182149,"line_start":461,"line_end":461,"column_start":5,"column_end":45}},{"value":"/ let s = unsafe { Vec::from(\"☃βツ\").into_string_unchecked() };","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182154,"byte_end":182223,"line_start":462,"line_end":462,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182228,"byte_end":182258,"line_start":463,"line_end":463,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182263,"byte_end":182270,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182275,"byte_end":182284,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182991,"byte_end":183005,"line_start":492,"line_end":492,"column_start":8,"column_end":22},"name":"into_os_string","qualname":"::ext_vec::ByteVec::into_os_string","value":"fn (self) -> Result<OsString, Vec<u8>>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Converts this byte string into an OS string, in place.","sig":null,"attributes":[{"value":"/ Converts this byte string into an OS string, in place.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182438,"byte_end":182496,"line_start":473,"line_end":473,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182501,"byte_end":182504,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182509,"byte_end":182581,"line_start":475,"line_end":475,"column_start":5,"column_end":77}},{"value":"/ this returns the original byte string if it is not valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182586,"byte_end":182653,"line_start":476,"line_end":476,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182658,"byte_end":182661,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182666,"byte_end":182680,"line_start":478,"line_end":478,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182685,"byte_end":182688,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182693,"byte_end":182709,"line_start":480,"line_end":480,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182714,"byte_end":182717,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182722,"byte_end":182729,"line_start":482,"line_end":482,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182734,"byte_end":182758,"line_start":483,"line_end":483,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182763,"byte_end":182766,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182771,"byte_end":182793,"line_start":485,"line_end":485,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182798,"byte_end":182801,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from(\"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182806,"byte_end":182836,"line_start":487,"line_end":487,"column_start":5,"column_end":35}},{"value":"/ let os_str = bs.into_os_string().expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182841,"byte_end":182910,"line_start":488,"line_end":488,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(os_str, OsStr::new(\"foo\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182915,"byte_end":182957,"line_start":489,"line_end":489,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182962,"byte_end":182969,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":182974,"byte_end":182983,"line_start":491,"line_end":491,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184373,"byte_end":184393,"line_start":538,"line_end":538,"column_start":8,"column_end":28},"name":"into_os_string_lossy","qualname":"::ext_vec::ByteVec::into_os_string_lossy","value":"fn (self) -> OsString","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Lossily converts this byte string into an OS string, in place.","sig":null,"attributes":[{"value":"/ Lossily converts this byte string into an OS string, in place.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":183574,"byte_end":183640,"line_start":516,"line_end":516,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":183645,"byte_end":183648,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":183653,"byte_end":183725,"line_start":518,"line_end":518,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":183730,"byte_end":183802,"line_start":519,"line_end":519,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":183807,"byte_end":183868,"line_start":520,"line_end":520,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":183873,"byte_end":183876,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":183881,"byte_end":183954,"line_start":522,"line_end":522,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":183959,"byte_end":184030,"line_start":523,"line_end":523,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184035,"byte_end":184067,"line_start":524,"line_end":524,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184072,"byte_end":184075,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184080,"byte_end":184094,"line_start":526,"line_end":526,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184099,"byte_end":184102,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184107,"byte_end":184123,"line_start":528,"line_end":528,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184128,"byte_end":184131,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184136,"byte_end":184143,"line_start":530,"line_end":530,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184148,"byte_end":184170,"line_start":531,"line_end":531,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184175,"byte_end":184178,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184183,"byte_end":184227,"line_start":533,"line_end":533,"column_start":5,"column_end":49}},{"value":"/ let os_str = bs.into_os_string_lossy();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184232,"byte_end":184275,"line_start":534,"line_end":534,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(os_str.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184280,"byte_end":184339,"line_start":535,"line_end":535,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184344,"byte_end":184351,"line_start":536,"line_end":536,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184356,"byte_end":184365,"line_start":537,"line_end":537,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185327,"byte_end":185340,"line_start":576,"line_end":576,"column_start":8,"column_end":21},"name":"into_path_buf","qualname":"::ext_vec::ByteVec::into_path_buf","value":"fn (self) -> Result<PathBuf, Vec<u8>>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Converts this byte string into an owned file path, in place.","sig":null,"attributes":[{"value":"/ Converts this byte string into an owned file path, in place.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184810,"byte_end":184874,"line_start":559,"line_end":559,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184879,"byte_end":184882,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184887,"byte_end":184959,"line_start":561,"line_end":561,"column_start":5,"column_end":77}},{"value":"/ this returns the original byte string if it is not valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":184964,"byte_end":185031,"line_start":562,"line_end":562,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185036,"byte_end":185039,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185044,"byte_end":185058,"line_start":564,"line_end":564,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185063,"byte_end":185066,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185071,"byte_end":185087,"line_start":566,"line_end":566,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185092,"byte_end":185095,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185100,"byte_end":185107,"line_start":568,"line_end":568,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185112,"byte_end":185134,"line_start":569,"line_end":569,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185139,"byte_end":185142,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from(\"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185147,"byte_end":185177,"line_start":571,"line_end":571,"column_start":5,"column_end":35}},{"value":"/ let path = bs.into_path_buf().expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185182,"byte_end":185248,"line_start":572,"line_end":572,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(path.as_os_str(), \"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185253,"byte_end":185293,"line_start":573,"line_end":573,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185298,"byte_end":185305,"line_start":574,"line_end":574,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185310,"byte_end":185319,"line_start":575,"line_end":575,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186272,"byte_end":186291,"line_start":605,"line_end":605,"column_start":8,"column_end":27},"name":"into_path_buf_lossy","qualname":"::ext_vec::ByteVec::into_path_buf_lossy","value":"fn (self) -> PathBuf","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Lossily converts this byte string into an owned file path, in place.","sig":null,"attributes":[{"value":"/ Lossily converts this byte string into an owned file path, in place.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185472,"byte_end":185544,"line_start":583,"line_end":583,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185549,"byte_end":185552,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185557,"byte_end":185629,"line_start":585,"line_end":585,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185634,"byte_end":185706,"line_start":586,"line_end":586,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185711,"byte_end":185772,"line_start":587,"line_end":587,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185777,"byte_end":185780,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185785,"byte_end":185858,"line_start":589,"line_end":589,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185863,"byte_end":185934,"line_start":590,"line_end":590,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185939,"byte_end":185971,"line_start":591,"line_end":591,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185976,"byte_end":185979,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":185984,"byte_end":185998,"line_start":593,"line_end":593,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186003,"byte_end":186006,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186011,"byte_end":186027,"line_start":595,"line_end":595,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186032,"byte_end":186035,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186040,"byte_end":186047,"line_start":597,"line_end":597,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186052,"byte_end":186074,"line_start":598,"line_end":598,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186079,"byte_end":186082,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186087,"byte_end":186131,"line_start":600,"line_end":600,"column_start":5,"column_end":49}},{"value":"/ let path = bs.into_path_buf_lossy();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186136,"byte_end":186176,"line_start":601,"line_end":601,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(path.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186181,"byte_end":186238,"line_start":602,"line_end":602,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186243,"byte_end":186250,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186255,"byte_end":186264,"line_start":604,"line_end":604,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187263,"byte_end":187271,"line_start":637,"line_end":637,"column_start":8,"column_end":16},"name":"pop_byte","qualname":"::ext_vec::ByteVec::pop_byte","value":"fn (&mut self) -> Option<u8>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Removes the last byte from this `Vec<u8>` and returns it.","sig":null,"attributes":[{"value":"/ Removes the last byte from this `Vec<u8>` and returns it.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186408,"byte_end":186469,"line_start":612,"line_end":612,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186474,"byte_end":186477,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ If this byte string is empty, then `None` is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186482,"byte_end":186540,"line_start":614,"line_end":614,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186545,"byte_end":186548,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ If the last codepoint in this byte string is not ASCII, then removing","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186553,"byte_end":186626,"line_start":616,"line_end":616,"column_start":5,"column_end":78}},{"value":"/ the last byte could make this byte string contain invalid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186631,"byte_end":186699,"line_start":617,"line_end":617,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186704,"byte_end":186707,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `Vec::pop` method. This","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186712,"byte_end":186783,"line_start":619,"line_end":619,"column_start":5,"column_end":76}},{"value":"/ method is provided to permit callers to explicitly differentiate","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186788,"byte_end":186856,"line_start":620,"line_end":620,"column_start":5,"column_end":73}},{"value":"/ between popping bytes and codepoints.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186861,"byte_end":186902,"line_start":621,"line_end":621,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186907,"byte_end":186910,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186915,"byte_end":186929,"line_start":623,"line_end":623,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186934,"byte_end":186937,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186942,"byte_end":186958,"line_start":625,"line_end":625,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186963,"byte_end":186966,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186971,"byte_end":186978,"line_start":627,"line_end":627,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":186983,"byte_end":187005,"line_start":628,"line_end":628,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187010,"byte_end":187013,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187018,"byte_end":187051,"line_start":630,"line_end":630,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'o'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187056,"byte_end":187097,"line_start":631,"line_end":631,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'o'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187102,"byte_end":187143,"line_start":632,"line_end":632,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'f'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187148,"byte_end":187189,"line_start":633,"line_end":633,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), None);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187194,"byte_end":187229,"line_start":634,"line_end":634,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187234,"byte_end":187241,"line_start":635,"line_end":635,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187246,"byte_end":187255,"line_start":636,"line_end":636,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188978,"byte_end":188986,"line_start":683,"line_end":683,"column_start":8,"column_end":16},"name":"pop_char","qualname":"::ext_vec::ByteVec::pop_char","value":"fn (&mut self) -> Option<char>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Removes the last codepoint from this `Vec<u8>` and returns it.","sig":null,"attributes":[{"value":"/ Removes the last codepoint from this `Vec<u8>` and returns it.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187342,"byte_end":187408,"line_start":641,"line_end":641,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187413,"byte_end":187416,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ If this byte string is empty, then `None` is returned. If the last","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187421,"byte_end":187491,"line_start":643,"line_end":643,"column_start":5,"column_end":75}},{"value":"/ bytes of this byte string do not correspond to a valid UTF-8 code unit","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187496,"byte_end":187570,"line_start":644,"line_end":644,"column_start":5,"column_end":79}},{"value":"/ sequence, then the Unicode replacement codepoint is yielded instead in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187575,"byte_end":187649,"line_start":645,"line_end":645,"column_start":5,"column_end":79}},{"value":"/ accordance with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187654,"byte_end":187677,"line_start":646,"line_end":646,"column_start":5,"column_end":28}},{"value":"/ [replacement codepoint substitution policy](index.html#handling-of-invalid-utf8-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187682,"byte_end":187769,"line_start":647,"line_end":647,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187774,"byte_end":187777,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187782,"byte_end":187796,"line_start":649,"line_end":649,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187801,"byte_end":187804,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187809,"byte_end":187825,"line_start":651,"line_end":651,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187830,"byte_end":187833,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187838,"byte_end":187845,"line_start":653,"line_end":653,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187850,"byte_end":187872,"line_start":654,"line_end":654,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187877,"byte_end":187880,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187885,"byte_end":187918,"line_start":656,"line_end":656,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187923,"byte_end":187963,"line_start":657,"line_end":657,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":187968,"byte_end":188008,"line_start":658,"line_end":658,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('f'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188013,"byte_end":188053,"line_start":659,"line_end":659,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), None);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188058,"byte_end":188093,"line_start":660,"line_end":660,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188098,"byte_end":188105,"line_start":661,"line_end":661,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188110,"byte_end":188113,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ This shows the replacement codepoint substitution policy. Note that","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188118,"byte_end":188189,"line_start":663,"line_end":663,"column_start":5,"column_end":76}},{"value":"/ the first pop yields a replacement codepoint but actually removes two","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188194,"byte_end":188267,"line_start":664,"line_end":664,"column_start":5,"column_end":78}},{"value":"/ bytes. This is in contrast with subsequent pops when encountering","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188272,"byte_end":188341,"line_start":665,"line_end":665,"column_start":5,"column_end":74}},{"value":"/ `\\xFF` since `\\xFF` is never a valid prefix for any valid UTF-8","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188346,"byte_end":188413,"line_start":666,"line_end":666,"column_start":5,"column_end":72}},{"value":"/ code unit sequence.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188418,"byte_end":188441,"line_start":667,"line_end":667,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188446,"byte_end":188449,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188454,"byte_end":188461,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188466,"byte_end":188488,"line_start":670,"line_end":670,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188493,"byte_end":188496,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from_slice(b\"f\\xFF\\xFF\\xFFoo\\xE2\\x98\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188501,"byte_end":188561,"line_start":672,"line_end":672,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188566,"byte_end":188613,"line_start":673,"line_end":673,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188618,"byte_end":188658,"line_start":674,"line_end":674,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188663,"byte_end":188703,"line_start":675,"line_end":675,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188708,"byte_end":188755,"line_start":676,"line_end":676,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188760,"byte_end":188807,"line_start":677,"line_end":677,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188812,"byte_end":188859,"line_start":678,"line_end":678,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('f'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188864,"byte_end":188904,"line_start":679,"line_end":679,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), None);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188909,"byte_end":188944,"line_start":680,"line_end":680,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188949,"byte_end":188956,"line_start":681,"line_end":681,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":188961,"byte_end":188970,"line_start":682,"line_end":682,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190238,"byte_end":190249,"line_start":727,"line_end":727,"column_start":8,"column_end":19},"name":"remove_char","qualname":"::ext_vec::ByteVec::remove_char","value":"fn (&mut self, at: usize) -> char","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Removes a `char` from this `Vec<u8>` at the given byte position and\n returns it.","sig":null,"attributes":[{"value":"/ Removes a `char` from this `Vec<u8>` at the given byte position and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189262,"byte_end":189333,"line_start":693,"line_end":693,"column_start":5,"column_end":76}},{"value":"/ returns it.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189338,"byte_end":189353,"line_start":694,"line_end":694,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189358,"byte_end":189361,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ If the bytes at the given position do not lead to a valid UTF-8 code","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189366,"byte_end":189438,"line_start":696,"line_end":696,"column_start":5,"column_end":77}},{"value":"/ unit sequence, then a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189443,"byte_end":189468,"line_start":697,"line_end":697,"column_start":5,"column_end":30}},{"value":"/ [replacement codepoint is returned instead](index.html#handling-of-invalid-utf8-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189473,"byte_end":189560,"line_start":698,"line_end":698,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189565,"byte_end":189568,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189573,"byte_end":189585,"line_start":700,"line_end":700,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189590,"byte_end":189593,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than or equal to this byte string's length.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189598,"byte_end":189670,"line_start":702,"line_end":702,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189675,"byte_end":189678,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189683,"byte_end":189697,"line_start":704,"line_end":704,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189702,"byte_end":189705,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189710,"byte_end":189726,"line_start":706,"line_end":706,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189731,"byte_end":189734,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189739,"byte_end":189746,"line_start":708,"line_end":708,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189751,"byte_end":189773,"line_start":709,"line_end":709,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189778,"byte_end":189781,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo☃bar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189786,"byte_end":189825,"line_start":711,"line_end":711,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(s.remove_char(3), '☃');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189830,"byte_end":189870,"line_start":712,"line_end":712,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(s, b\"foobar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189875,"byte_end":189904,"line_start":713,"line_end":713,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189909,"byte_end":189916,"line_start":714,"line_end":714,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189921,"byte_end":189924,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ This example shows how the Unicode replacement codepoint policy is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":189929,"byte_end":189999,"line_start":716,"line_end":716,"column_start":5,"column_end":75}},{"value":"/ used:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190004,"byte_end":190013,"line_start":717,"line_end":717,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190018,"byte_end":190021,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190026,"byte_end":190033,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190038,"byte_end":190060,"line_start":720,"line_end":720,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190065,"byte_end":190068,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190073,"byte_end":190120,"line_start":722,"line_end":722,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.remove_char(3), '\\u{FFFD}');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190125,"byte_end":190170,"line_start":723,"line_end":723,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(s, b\"foobar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190175,"byte_end":190204,"line_start":724,"line_end":724,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190209,"byte_end":190216,"line_start":725,"line_end":725,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190221,"byte_end":190230,"line_start":726,"line_end":726,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191153,"byte_end":191164,"line_start":761,"line_end":761,"column_start":8,"column_end":19},"name":"insert_char","qualname":"::ext_vec::ByteVec::insert_char","value":"fn (&mut self, at: usize, ch: char) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Inserts the given codepoint into this `Vec<u8>` at a particular byte\n position.","sig":null,"attributes":[{"value":"/ Inserts the given codepoint into this `Vec<u8>` at a particular byte","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190564,"byte_end":190636,"line_start":739,"line_end":739,"column_start":5,"column_end":77}},{"value":"/ position.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190641,"byte_end":190654,"line_start":740,"line_end":740,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190659,"byte_end":190662,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it may copy a number of elements in this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190667,"byte_end":190742,"line_start":742,"line_end":742,"column_start":5,"column_end":80}},{"value":"/ byte string proportional to its length.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190747,"byte_end":190790,"line_start":743,"line_end":743,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190795,"byte_end":190798,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190803,"byte_end":190815,"line_start":745,"line_end":745,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190820,"byte_end":190823,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than the byte string's length.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190828,"byte_end":190887,"line_start":747,"line_end":747,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190892,"byte_end":190895,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190900,"byte_end":190914,"line_start":749,"line_end":749,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190919,"byte_end":190922,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190927,"byte_end":190943,"line_start":751,"line_end":751,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190948,"byte_end":190951,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190956,"byte_end":190963,"line_start":753,"line_end":753,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190968,"byte_end":190990,"line_start":754,"line_end":754,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":190995,"byte_end":190998,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191003,"byte_end":191039,"line_start":756,"line_end":756,"column_start":5,"column_end":41}},{"value":"/ s.insert_char(3, '☃');","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191044,"byte_end":191072,"line_start":757,"line_end":757,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, \"foo☃bar\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191077,"byte_end":191119,"line_start":758,"line_end":758,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191124,"byte_end":191131,"line_start":759,"line_end":759,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191136,"byte_end":191145,"line_start":760,"line_end":760,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":192057,"byte_end":192067,"line_start":791,"line_end":791,"column_start":8,"column_end":18},"name":"insert_str","qualname":"::ext_vec::ByteVec::insert_str","value":"fn <B> (&mut self, at: usize, bytes: B) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Inserts the given byte string into this byte string at a particular\n byte position.","sig":null,"attributes":[{"value":"/ Inserts the given byte string into this byte string at a particular","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191279,"byte_end":191350,"line_start":765,"line_end":765,"column_start":5,"column_end":76}},{"value":"/ byte position.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191355,"byte_end":191373,"line_start":766,"line_end":766,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191378,"byte_end":191381,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it may copy a number of elements in this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191386,"byte_end":191461,"line_start":768,"line_end":768,"column_start":5,"column_end":80}},{"value":"/ byte string proportional to its length.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191466,"byte_end":191509,"line_start":769,"line_end":769,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191514,"byte_end":191517,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ The given byte string may be any type that can be cheaply converted","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191522,"byte_end":191593,"line_start":771,"line_end":771,"column_start":5,"column_end":76}},{"value":"/ into a `&[u8]`. This includes, but is not limited to, `&str` and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191598,"byte_end":191666,"line_start":772,"line_end":772,"column_start":5,"column_end":73}},{"value":"/ `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191671,"byte_end":191683,"line_start":773,"line_end":773,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191688,"byte_end":191691,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191696,"byte_end":191708,"line_start":775,"line_end":775,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191713,"byte_end":191716,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than the byte string's length.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191721,"byte_end":191780,"line_start":777,"line_end":777,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191785,"byte_end":191788,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191793,"byte_end":191807,"line_start":779,"line_end":779,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191812,"byte_end":191815,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191820,"byte_end":191836,"line_start":781,"line_end":781,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191841,"byte_end":191844,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191849,"byte_end":191856,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191861,"byte_end":191883,"line_start":784,"line_end":784,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191888,"byte_end":191891,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191896,"byte_end":191932,"line_start":786,"line_end":786,"column_start":5,"column_end":41}},{"value":"/ s.insert_str(3, \"☃☃☃\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191937,"byte_end":191970,"line_start":787,"line_end":787,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(s, \"foo☃☃☃bar\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":191975,"byte_end":192023,"line_start":788,"line_end":788,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":192028,"byte_end":192035,"line_start":789,"line_end":789,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":192040,"byte_end":192049,"line_start":790,"line_end":790,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194060,"byte_end":194073,"line_start":843,"line_end":843,"column_start":8,"column_end":21},"name":"replace_range","qualname":"::ext_vec::ByteVec::replace_range","value":"fn <R, B> (&mut self, range: R, replace_with: B) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Removes the specified range in this byte string and replaces it with\n the given bytes. The given bytes do not need to have the same length\n as the range provided.","sig":null,"attributes":[{"value":"/ Removes the specified range in this byte string and replaces it with","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193528,"byte_end":193600,"line_start":823,"line_end":823,"column_start":5,"column_end":77}},{"value":"/ the given bytes. The given bytes do not need to have the same length","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193605,"byte_end":193677,"line_start":824,"line_end":824,"column_start":5,"column_end":77}},{"value":"/ as the range provided.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193682,"byte_end":193708,"line_start":825,"line_end":825,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193713,"byte_end":193716,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193721,"byte_end":193733,"line_start":827,"line_end":827,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193738,"byte_end":193741,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ Panics if the given range is invalid.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193746,"byte_end":193787,"line_start":829,"line_end":829,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193792,"byte_end":193795,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193800,"byte_end":193814,"line_start":831,"line_end":831,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193819,"byte_end":193822,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193827,"byte_end":193843,"line_start":833,"line_end":833,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193848,"byte_end":193851,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193856,"byte_end":193863,"line_start":835,"line_end":835,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193868,"byte_end":193890,"line_start":836,"line_end":836,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193895,"byte_end":193898,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193903,"byte_end":193939,"line_start":838,"line_end":838,"column_start":5,"column_end":41}},{"value":"/ s.replace_range(2..4, \"xxxxx\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193944,"byte_end":193979,"line_start":839,"line_end":839,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s, \"foxxxxxar\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":193984,"byte_end":194026,"line_start":840,"line_end":840,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194031,"byte_end":194038,"line_start":841,"line_end":841,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194043,"byte_end":194052,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195238,"byte_end":195249,"line_start":881,"line_end":881,"column_start":8,"column_end":19},"name":"drain_bytes","qualname":"::ext_vec::ByteVec::drain_bytes","value":"fn <R> (&mut self, range: R) -> DrainBytes","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in this\n `Vec<u8>` and yields each of the removed bytes.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194285,"byte_end":194357,"line_start":851,"line_end":851,"column_start":5,"column_end":77}},{"value":"/ `Vec<u8>` and yields each of the removed bytes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194362,"byte_end":194413,"line_start":852,"line_end":852,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194418,"byte_end":194421,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ Note that the elements specified by the given range are removed","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194426,"byte_end":194493,"line_start":854,"line_end":854,"column_start":5,"column_end":72}},{"value":"/ regardless of whether the returned iterator is fully exhausted.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194498,"byte_end":194565,"line_start":855,"line_end":855,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194570,"byte_end":194573,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ Also note that is is unspecified how many bytes are removed from the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194578,"byte_end":194650,"line_start":857,"line_end":857,"column_start":5,"column_end":77}},{"value":"/ `Vec<u8>` if the `DrainBytes` iterator is leaked.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194655,"byte_end":194708,"line_start":858,"line_end":858,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194713,"byte_end":194716,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194721,"byte_end":194733,"line_start":860,"line_end":860,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194738,"byte_end":194741,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ Panics if the given range is not valid.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194746,"byte_end":194789,"line_start":862,"line_end":862,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194794,"byte_end":194797,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194802,"byte_end":194816,"line_start":864,"line_end":864,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194821,"byte_end":194824,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194829,"byte_end":194845,"line_start":866,"line_end":866,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194850,"byte_end":194853,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194858,"byte_end":194865,"line_start":868,"line_end":868,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194870,"byte_end":194892,"line_start":869,"line_end":869,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194897,"byte_end":194900,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194905,"byte_end":194941,"line_start":871,"line_end":871,"column_start":5,"column_end":41}},{"value":"/ {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194946,"byte_end":194951,"line_start":872,"line_end":872,"column_start":5,"column_end":10}},{"value":"/     let mut drainer = s.drain_bytes(2..4);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":194956,"byte_end":195002,"line_start":873,"line_end":873,"column_start":5,"column_end":51}},{"value":"/     assert_eq!(drainer.next(), Some(b'o'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195007,"byte_end":195054,"line_start":874,"line_end":874,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(drainer.next(), Some(b'b'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195059,"byte_end":195106,"line_start":875,"line_end":875,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(drainer.next(), None);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195111,"byte_end":195152,"line_start":876,"line_end":876,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195157,"byte_end":195162,"line_start":877,"line_end":877,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(s, \"foar\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195167,"byte_end":195204,"line_start":878,"line_end":878,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195209,"byte_end":195216,"line_start":879,"line_end":879,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195221,"byte_end":195230,"line_start":880,"line_end":880,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1157},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195952,"byte_end":195962,"line_start":911,"line_end":911,"column_start":12,"column_end":22},"name":"DrainBytes","qualname":"::ext_vec::DrainBytes","value":"DrainBytes {  }","parent":null,"children":[{"krate":0,"index":1159}],"decl_id":null,"docs":" A draining byte oriented iterator for `Vec<u8>`.","sig":null,"attributes":[{"value":"/ A draining byte oriented iterator for `Vec<u8>`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195407,"byte_end":195459,"line_start":889,"line_end":889,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195460,"byte_end":195463,"line_start":890,"line_end":890,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195464,"byte_end":195495,"line_start":891,"line_end":891,"column_start":1,"column_end":32}},{"value":"/ [`ByteVec::drain_bytes`](trait.ByteVec.html#method.drain_bytes).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195496,"byte_end":195564,"line_start":892,"line_end":892,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195565,"byte_end":195568,"line_start":893,"line_end":893,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195569,"byte_end":195583,"line_start":894,"line_end":894,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195584,"byte_end":195587,"line_start":895,"line_end":895,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195588,"byte_end":195604,"line_start":896,"line_end":896,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195605,"byte_end":195608,"line_start":897,"line_end":897,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195609,"byte_end":195616,"line_start":898,"line_end":898,"column_start":1,"column_end":8}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195617,"byte_end":195639,"line_start":899,"line_end":899,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195640,"byte_end":195643,"line_start":900,"line_end":900,"column_start":1,"column_end":4}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195644,"byte_end":195680,"line_start":901,"line_end":901,"column_start":1,"column_end":37}},{"value":"/ {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195681,"byte_end":195686,"line_start":902,"line_end":902,"column_start":1,"column_end":6}},{"value":"/     let mut drainer = s.drain_bytes(2..4);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195687,"byte_end":195733,"line_start":903,"line_end":903,"column_start":1,"column_end":47}},{"value":"/     assert_eq!(drainer.next(), Some(b'o'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195734,"byte_end":195781,"line_start":904,"line_end":904,"column_start":1,"column_end":48}},{"value":"/     assert_eq!(drainer.next(), Some(b'b'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195782,"byte_end":195829,"line_start":905,"line_end":905,"column_start":1,"column_end":48}},{"value":"/     assert_eq!(drainer.next(), None);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195830,"byte_end":195871,"line_start":906,"line_end":906,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195872,"byte_end":195877,"line_start":907,"line_end":907,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(s, \"foar\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195878,"byte_end":195915,"line_start":908,"line_end":908,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":195916,"byte_end":195923,"line_start":909,"line_end":909,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1163},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197207,"byte_end":197220,"line_start":964,"line_end":964,"column_start":12,"column_end":25},"name":"FromUtf8Error","qualname":"::ext_vec::FromUtf8Error","value":"FromUtf8Error {  }","parent":null,"children":[{"krate":0,"index":1164},{"krate":0,"index":1165}],"decl_id":null,"docs":" An error that may occur when converting a `Vec<u8>` to a `String`.","sig":null,"attributes":[{"value":"/ An error that may occur when converting a `Vec<u8>` to a `String`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196464,"byte_end":196534,"line_start":940,"line_end":940,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196535,"byte_end":196538,"line_start":941,"line_end":941,"column_start":1,"column_end":4}},{"value":"/ This error includes the original `Vec<u8>` that failed to convert to a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196539,"byte_end":196613,"line_start":942,"line_end":942,"column_start":1,"column_end":75}},{"value":"/ `String`. This permits callers to recover the allocation used even if it","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196614,"byte_end":196690,"line_start":943,"line_end":943,"column_start":1,"column_end":77}},{"value":"/ it not valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196691,"byte_end":196714,"line_start":944,"line_end":944,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196715,"byte_end":196718,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196719,"byte_end":196733,"line_start":946,"line_end":946,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196734,"byte_end":196737,"line_start":947,"line_end":947,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196738,"byte_end":196754,"line_start":948,"line_end":948,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196755,"byte_end":196758,"line_start":949,"line_end":949,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196759,"byte_end":196766,"line_start":950,"line_end":950,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196767,"byte_end":196794,"line_start":951,"line_end":951,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196795,"byte_end":196798,"line_start":952,"line_end":952,"column_start":1,"column_end":4}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196799,"byte_end":196846,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196847,"byte_end":196894,"line_start":954,"line_end":954,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196895,"byte_end":196898,"line_start":955,"line_end":955,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196899,"byte_end":196949,"line_start":956,"line_end":956,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196950,"byte_end":197004,"line_start":957,"line_end":957,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197005,"byte_end":197008,"line_start":958,"line_end":958,"column_start":1,"column_end":4}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197009,"byte_end":197071,"line_start":959,"line_end":959,"column_start":1,"column_end":63}},{"value":"/ let bytes = Vec::from(err.into_vec());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197072,"byte_end":197114,"line_start":960,"line_end":960,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(bytes, B(b\"foo\\xFFbar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197115,"byte_end":197155,"line_start":961,"line_end":961,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197156,"byte_end":197163,"line_start":962,"line_end":962,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197767,"byte_end":197775,"line_start":987,"line_end":987,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<FromUtf8Error>::as_bytes","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return the original bytes as a slice that failed to convert to a\n `String`.","sig":null,"attributes":[{"value":"/ Return the original bytes as a slice that failed to convert to a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197294,"byte_end":197362,"line_start":970,"line_end":970,"column_start":5,"column_end":73}},{"value":"/ `String`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197367,"byte_end":197380,"line_start":971,"line_end":971,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197385,"byte_end":197388,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197393,"byte_end":197407,"line_start":973,"line_end":973,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197412,"byte_end":197415,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197420,"byte_end":197436,"line_start":975,"line_end":975,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197441,"byte_end":197444,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197449,"byte_end":197456,"line_start":977,"line_end":977,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197461,"byte_end":197488,"line_start":978,"line_end":978,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197493,"byte_end":197496,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197501,"byte_end":197548,"line_start":980,"line_end":980,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197553,"byte_end":197600,"line_start":981,"line_end":981,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197605,"byte_end":197608,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197613,"byte_end":197675,"line_start":983,"line_end":983,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(err.as_bytes(), B(b\"foo\\xFFbar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197680,"byte_end":197729,"line_start":984,"line_end":984,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197734,"byte_end":197741,"line_start":985,"line_end":985,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197746,"byte_end":197755,"line_start":986,"line_end":986,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198352,"byte_end":198360,"line_start":1009,"line_end":1009,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<FromUtf8Error>::into_vec","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Consume this error and return the original byte string that failed to\n convert to a `String`.","sig":null,"attributes":[{"value":"/ Consume this error and return the original byte string that failed to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197828,"byte_end":197901,"line_start":991,"line_end":991,"column_start":5,"column_end":78}},{"value":"/ convert to a `String`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197906,"byte_end":197932,"line_start":992,"line_end":992,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197937,"byte_end":197940,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197945,"byte_end":197959,"line_start":994,"line_end":994,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197964,"byte_end":197967,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197972,"byte_end":197988,"line_start":996,"line_end":996,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197993,"byte_end":197996,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198001,"byte_end":198008,"line_start":998,"line_end":998,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198013,"byte_end":198040,"line_start":999,"line_end":999,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198045,"byte_end":198048,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198053,"byte_end":198100,"line_start":1001,"line_end":1001,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198105,"byte_end":198152,"line_start":1002,"line_end":1002,"column_start":5,"column_end":52}},{"value":"/ let original = err.into_vec();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198157,"byte_end":198191,"line_start":1003,"line_end":1003,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198196,"byte_end":198199,"line_start":1004,"line_end":1004,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198204,"byte_end":198266,"line_start":1005,"line_end":1005,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(original, B(b\"foo\\xFFbar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198271,"byte_end":198314,"line_start":1006,"line_end":1006,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198319,"byte_end":198326,"line_start":1007,"line_end":1007,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198331,"byte_end":198340,"line_start":1008,"line_end":1008,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198943,"byte_end":198953,"line_start":1030,"line_end":1030,"column_start":12,"column_end":22},"name":"utf8_error","qualname":"<FromUtf8Error>::utf8_error","value":"fn (&self) -> &Utf8Error","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying UTF-8 error that occurred. This error provides\n information on the nature and location of the invalid UTF-8 detected.","sig":null,"attributes":[{"value":"/ Return the underlying UTF-8 error that occurred. This error provides","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198413,"byte_end":198485,"line_start":1013,"line_end":1013,"column_start":5,"column_end":77}},{"value":"/ information on the nature and location of the invalid UTF-8 detected.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198490,"byte_end":198563,"line_start":1014,"line_end":1014,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198568,"byte_end":198571,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198576,"byte_end":198590,"line_start":1016,"line_end":1016,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198595,"byte_end":198598,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198603,"byte_end":198619,"line_start":1018,"line_end":1018,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198624,"byte_end":198627,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198632,"byte_end":198639,"line_start":1020,"line_end":1020,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198644,"byte_end":198671,"line_start":1021,"line_end":1021,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198676,"byte_end":198679,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198684,"byte_end":198731,"line_start":1023,"line_end":1023,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198736,"byte_end":198783,"line_start":1024,"line_end":1024,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198788,"byte_end":198791,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198796,"byte_end":198846,"line_start":1026,"line_end":1026,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198851,"byte_end":198905,"line_start":1027,"line_end":1027,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198910,"byte_end":198917,"line_start":1028,"line_end":1028,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":198922,"byte_end":198931,"line_start":1029,"line_end":1029,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":755},{"krate":0,"index":1455},{"krate":0,"index":1458},{"krate":0,"index":1461},{"krate":0,"index":1465},{"krate":0,"index":757},{"krate":0,"index":761},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768}],"decl_id":null,"docs":"Utilities for working with I/O using byte strings.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19355,"byte_end":19378,"line_start":419,"line_end":419,"column_start":1,"column_end":24}},{"value":"!\nUtilities for working with I/O using byte strings.\n\nThis module currently only exports a single trait, `BufReadExt`, which provides\nfacilities for conveniently and efficiently working with lines as byte strings.\n\nMore APIs may be added in the future.\n*/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220168,"byte_end":220425,"line_start":1,"line_end":8,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220672,"byte_end":220682,"line_start":18,"line_end":18,"column_start":11,"column_end":21},"name":"BufReadExt","qualname":"::io::BufReadExt","value":"BufReadExt: io::BufRead","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":753}],"decl_id":null,"docs":" An extention trait for\n [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html)\n which provides convenience APIs for dealing with byte strings.\n","sig":null,"attributes":[{"value":"/ An extention trait for","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220490,"byte_end":220516,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220517,"byte_end":220594,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ which provides convenience APIs for dealing with byte strings.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220595,"byte_end":220661,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221789,"byte_end":221799,"line_start":52,"line_end":52,"column_start":8,"column_end":18},"name":"byte_lines","qualname":"::io::BufReadExt::byte_lines","value":"fn (self) -> ByteLines<Self>","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Returns an iterator over the lines of this reader, where each line\n is represented as a byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the lines of this reader, where each line","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220702,"byte_end":220772,"line_start":19,"line_end":19,"column_start":5,"column_end":75}},{"value":"/ is represented as a byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220777,"byte_end":220813,"line_start":20,"line_end":20,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220818,"byte_end":220821,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `io::Result<Vec<u8>>`, where","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220826,"byte_end":220898,"line_start":22,"line_end":22,"column_start":5,"column_end":77}},{"value":"/ an error is yielded if there was a problem reading from the underlying","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220903,"byte_end":220977,"line_start":23,"line_end":23,"column_start":5,"column_end":79}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220982,"byte_end":220993,"line_start":24,"line_end":24,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220998,"byte_end":221001,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ On success, the next line in the iterator is returned. The line does","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221006,"byte_end":221078,"line_start":26,"line_end":26,"column_start":5,"column_end":77}},{"value":"/ *not* contain a trailing `\\n` or `\\r\\n`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221083,"byte_end":221127,"line_start":27,"line_end":27,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221132,"byte_end":221135,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221140,"byte_end":221154,"line_start":29,"line_end":29,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221159,"byte_end":221162,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221167,"byte_end":221183,"line_start":31,"line_end":31,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221188,"byte_end":221191,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221196,"byte_end":221203,"line_start":33,"line_end":33,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221208,"byte_end":221224,"line_start":34,"line_end":34,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221229,"byte_end":221232,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221237,"byte_end":221266,"line_start":36,"line_end":36,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221271,"byte_end":221274,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221279,"byte_end":221324,"line_start":38,"line_end":38,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221329,"byte_end":221388,"line_start":39,"line_end":39,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221393,"byte_end":221396,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221401,"byte_end":221428,"line_start":41,"line_end":41,"column_start":5,"column_end":32}},{"value":"/ for result in cursor.byte_lines() {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221433,"byte_end":221472,"line_start":42,"line_end":42,"column_start":5,"column_end":44}},{"value":"/     let line = result?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221477,"byte_end":221504,"line_start":43,"line_end":43,"column_start":5,"column_end":32}},{"value":"/     lines.push(line);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221509,"byte_end":221534,"line_start":44,"line_end":44,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221539,"byte_end":221544,"line_start":45,"line_end":45,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221549,"byte_end":221580,"line_start":46,"line_end":46,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221585,"byte_end":221630,"line_start":47,"line_end":47,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[1], \"ipsum\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221635,"byte_end":221680,"line_start":48,"line_end":48,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221685,"byte_end":221730,"line_start":49,"line_end":49,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221735,"byte_end":221769,"line_start":50,"line_end":50,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221774,"byte_end":221781,"line_start":51,"line_end":51,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223174,"byte_end":223186,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"byte_records","qualname":"::io::BufReadExt::byte_records","value":"fn (self, terminator: u8) -> ByteRecords<Self>","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Returns an iterator over byte-terminated records of this reader, where\n each record is represented as a byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over byte-terminated records of this reader, where","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221905,"byte_end":221979,"line_start":59,"line_end":59,"column_start":5,"column_end":79}},{"value":"/ each record is represented as a byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":221984,"byte_end":222032,"line_start":60,"line_end":60,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222037,"byte_end":222040,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `io::Result<Vec<u8>>`, where","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222045,"byte_end":222117,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"/ an error is yielded if there was a problem reading from the underlying","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222122,"byte_end":222196,"line_start":63,"line_end":63,"column_start":5,"column_end":79}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222201,"byte_end":222212,"line_start":64,"line_end":64,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222217,"byte_end":222220,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ On success, the next record in the iterator is returned. The record","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222225,"byte_end":222296,"line_start":66,"line_end":66,"column_start":5,"column_end":76}},{"value":"/ does *not* contain its trailing terminator.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222301,"byte_end":222348,"line_start":67,"line_end":67,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222353,"byte_end":222356,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Note that calling `byte_records(b'\\n')` differs from `byte_lines()` in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222361,"byte_end":222435,"line_start":69,"line_end":69,"column_start":5,"column_end":79}},{"value":"/ that it has no special handling for `\\r`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222440,"byte_end":222485,"line_start":70,"line_end":70,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222490,"byte_end":222493,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222498,"byte_end":222512,"line_start":72,"line_end":72,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222517,"byte_end":222520,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222525,"byte_end":222541,"line_start":74,"line_end":74,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222546,"byte_end":222549,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222554,"byte_end":222561,"line_start":76,"line_end":76,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222566,"byte_end":222582,"line_start":77,"line_end":77,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222587,"byte_end":222590,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222595,"byte_end":222624,"line_start":79,"line_end":79,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222629,"byte_end":222632,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222637,"byte_end":222682,"line_start":81,"line_end":81,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\x00ipsum\\x00dolor\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222687,"byte_end":222748,"line_start":82,"line_end":82,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222753,"byte_end":222756,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let mut records = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222761,"byte_end":222790,"line_start":84,"line_end":84,"column_start":5,"column_end":34}},{"value":"/ for result in cursor.byte_records(b'\\x00') {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222795,"byte_end":222843,"line_start":85,"line_end":85,"column_start":5,"column_end":53}},{"value":"/     let record = result?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222848,"byte_end":222877,"line_start":86,"line_end":86,"column_start":5,"column_end":34}},{"value":"/     records.push(record);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222882,"byte_end":222911,"line_start":87,"line_end":87,"column_start":5,"column_end":34}},{"value":"/ }","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222916,"byte_end":222921,"line_start":88,"line_end":88,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(records.len(), 3);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222926,"byte_end":222959,"line_start":89,"line_end":89,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(records[0], \"lorem\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":222964,"byte_end":223011,"line_start":90,"line_end":90,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[1], \"ipsum\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223016,"byte_end":223063,"line_start":91,"line_end":91,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[2], \"dolor\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223068,"byte_end":223115,"line_start":92,"line_end":92,"column_start":5,"column_end":52}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223120,"byte_end":223154,"line_start":93,"line_end":93,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223159,"byte_end":223166,"line_start":94,"line_end":94,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224671,"byte_end":224684,"line_start":138,"line_end":138,"column_start":8,"column_end":21},"name":"for_byte_line","qualname":"::io::BufReadExt::for_byte_line","value":"fn <F> (self, mut for_each_line: F) -> io::Result<()>","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Executes the given closure on each line in the underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each line in the underlying reader.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223324,"byte_end":223393,"line_start":102,"line_end":102,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223398,"byte_end":223401,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223406,"byte_end":223481,"line_start":104,"line_end":104,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223486,"byte_end":223559,"line_start":105,"line_end":105,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223564,"byte_end":223632,"line_start":106,"line_end":106,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223637,"byte_end":223640,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ The closure given is called on exactly the same values as yielded by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223645,"byte_end":223717,"line_start":108,"line_end":108,"column_start":5,"column_end":77}},{"value":"/ the [`byte_lines`](trait.BufReadExt.html#method.byte_lines)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223722,"byte_end":223785,"line_start":109,"line_end":109,"column_start":5,"column_end":68}},{"value":"/ iterator. Namely, lines do _not_ contain trailing `\\n` or `\\r\\n` bytes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223790,"byte_end":223865,"line_start":110,"line_end":110,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223870,"byte_end":223873,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over lines as quickly as","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223878,"byte_end":223943,"line_start":112,"line_end":112,"column_start":5,"column_end":70}},{"value":"/ possible. Namely, a single allocation is reused for each line.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":223948,"byte_end":224014,"line_start":113,"line_end":113,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224019,"byte_end":224022,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224027,"byte_end":224041,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224046,"byte_end":224049,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224054,"byte_end":224070,"line_start":117,"line_end":117,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224075,"byte_end":224078,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224083,"byte_end":224090,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224095,"byte_end":224111,"line_start":120,"line_end":120,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224116,"byte_end":224119,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224124,"byte_end":224153,"line_start":122,"line_end":122,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224158,"byte_end":224161,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224166,"byte_end":224211,"line_start":124,"line_end":124,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224216,"byte_end":224275,"line_start":125,"line_end":125,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224280,"byte_end":224283,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224288,"byte_end":224315,"line_start":127,"line_end":127,"column_start":5,"column_end":32}},{"value":"/ cursor.for_byte_line(|line| {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224320,"byte_end":224353,"line_start":128,"line_end":128,"column_start":5,"column_end":38}},{"value":"/     lines.push(line.to_vec());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224358,"byte_end":224392,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/     Ok(true)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224397,"byte_end":224413,"line_start":130,"line_end":130,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224418,"byte_end":224426,"line_start":131,"line_end":131,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224431,"byte_end":224462,"line_start":132,"line_end":132,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224467,"byte_end":224512,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[1], \"ipsum\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224517,"byte_end":224562,"line_start":134,"line_end":134,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224567,"byte_end":224612,"line_start":135,"line_end":135,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224617,"byte_end":224651,"line_start":136,"line_end":136,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224656,"byte_end":224663,"line_start":137,"line_end":137,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226350,"byte_end":226365,"line_start":185,"line_end":185,"column_start":8,"column_end":23},"name":"for_byte_record","qualname":"::io::BufReadExt::for_byte_record","value":"fn <F> (self, terminator: u8, mut for_each_record: F) -> io::Result<()>","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Executes the given closure on each byte-terminated record in the\n underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each byte-terminated record in the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":224941,"byte_end":225009,"line_start":148,"line_end":148,"column_start":5,"column_end":73}},{"value":"/ underlying reader.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225014,"byte_end":225036,"line_start":149,"line_end":149,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225041,"byte_end":225044,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225049,"byte_end":225124,"line_start":151,"line_end":151,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225129,"byte_end":225202,"line_start":152,"line_end":152,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225207,"byte_end":225275,"line_start":153,"line_end":153,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225280,"byte_end":225283,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ The closure given is called on exactly the same values as yielded by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225288,"byte_end":225360,"line_start":155,"line_end":155,"column_start":5,"column_end":77}},{"value":"/ the [`byte_records`](trait.BufReadExt.html#method.byte_records)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225365,"byte_end":225432,"line_start":156,"line_end":156,"column_start":5,"column_end":72}},{"value":"/ iterator. Namely, records do _not_ contain a trailing terminator byte.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225437,"byte_end":225511,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225516,"byte_end":225519,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over records as quickly as","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225524,"byte_end":225591,"line_start":159,"line_end":159,"column_start":5,"column_end":72}},{"value":"/ possible. Namely, a single allocation is reused for each record.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225596,"byte_end":225664,"line_start":160,"line_end":160,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225669,"byte_end":225672,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225677,"byte_end":225691,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225696,"byte_end":225699,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225704,"byte_end":225720,"line_start":164,"line_end":164,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225725,"byte_end":225728,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225733,"byte_end":225740,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225745,"byte_end":225761,"line_start":167,"line_end":167,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225766,"byte_end":225769,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225774,"byte_end":225803,"line_start":169,"line_end":169,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225808,"byte_end":225811,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225816,"byte_end":225861,"line_start":171,"line_end":171,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\x00ipsum\\x00dolor\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225866,"byte_end":225927,"line_start":172,"line_end":172,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225932,"byte_end":225935,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ let mut records = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225940,"byte_end":225969,"line_start":174,"line_end":174,"column_start":5,"column_end":34}},{"value":"/ cursor.for_byte_record(b'\\x00', |record| {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":225974,"byte_end":226020,"line_start":175,"line_end":175,"column_start":5,"column_end":51}},{"value":"/     records.push(record.to_vec());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226025,"byte_end":226063,"line_start":176,"line_end":176,"column_start":5,"column_end":43}},{"value":"/     Ok(true)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226068,"byte_end":226084,"line_start":177,"line_end":177,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226089,"byte_end":226097,"line_start":178,"line_end":178,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(records.len(), 3);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226102,"byte_end":226135,"line_start":179,"line_end":179,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(records[0], \"lorem\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226140,"byte_end":226187,"line_start":180,"line_end":180,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[1], \"ipsum\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226192,"byte_end":226239,"line_start":181,"line_end":181,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[2], \"dolor\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226244,"byte_end":226291,"line_start":182,"line_end":182,"column_start":5,"column_end":52}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226296,"byte_end":226330,"line_start":183,"line_end":183,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226335,"byte_end":226342,"line_start":184,"line_end":184,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228135,"byte_end":228164,"line_start":239,"line_end":239,"column_start":8,"column_end":37},"name":"for_byte_line_with_terminator","qualname":"::io::BufReadExt::for_byte_line_with_terminator","value":"fn <F> (self, for_each_line: F) -> io::Result<()>","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Executes the given closure on each line in the underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each line in the underlying reader.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226703,"byte_end":226772,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226777,"byte_end":226780,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226785,"byte_end":226860,"line_start":201,"line_end":201,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226865,"byte_end":226938,"line_start":202,"line_end":202,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":226943,"byte_end":227011,"line_start":203,"line_end":203,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227016,"byte_end":227019,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Unlike","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227024,"byte_end":227034,"line_start":205,"line_end":205,"column_start":5,"column_end":15}},{"value":"/ [`for_byte_line`](trait.BufReadExt.html#method.for_byte_line),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227039,"byte_end":227105,"line_start":206,"line_end":206,"column_start":5,"column_end":71}},{"value":"/ the lines given to the closure *do* include the line terminator, if one","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227110,"byte_end":227185,"line_start":207,"line_end":207,"column_start":5,"column_end":80}},{"value":"/ exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227190,"byte_end":227201,"line_start":208,"line_end":208,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227206,"byte_end":227209,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over lines as quickly as","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227214,"byte_end":227279,"line_start":210,"line_end":210,"column_start":5,"column_end":70}},{"value":"/ possible. Namely, a single allocation is reused for each line.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227284,"byte_end":227350,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227355,"byte_end":227358,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ This is identical to `for_byte_record_with_terminator` with a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227363,"byte_end":227428,"line_start":213,"line_end":213,"column_start":5,"column_end":70}},{"value":"/ terminator of `\\n`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227433,"byte_end":227456,"line_start":214,"line_end":214,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227461,"byte_end":227464,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227469,"byte_end":227483,"line_start":216,"line_end":216,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227488,"byte_end":227491,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227496,"byte_end":227512,"line_start":218,"line_end":218,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227517,"byte_end":227520,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227525,"byte_end":227532,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227537,"byte_end":227553,"line_start":221,"line_end":221,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227558,"byte_end":227561,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227566,"byte_end":227595,"line_start":223,"line_end":223,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227600,"byte_end":227603,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227608,"byte_end":227653,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227658,"byte_end":227717,"line_start":226,"line_end":226,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227722,"byte_end":227725,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227730,"byte_end":227757,"line_start":228,"line_end":228,"column_start":5,"column_end":32}},{"value":"/ cursor.for_byte_line_with_terminator(|line| {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227762,"byte_end":227811,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/     lines.push(line.to_vec());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227816,"byte_end":227850,"line_start":230,"line_end":230,"column_start":5,"column_end":39}},{"value":"/     Ok(true)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227855,"byte_end":227871,"line_start":231,"line_end":231,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227876,"byte_end":227884,"line_start":232,"line_end":232,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227889,"byte_end":227920,"line_start":233,"line_end":233,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\\n\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227925,"byte_end":227972,"line_start":234,"line_end":234,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(lines[1], \"ipsum\\r\\n\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":227977,"byte_end":228026,"line_start":235,"line_end":235,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228031,"byte_end":228076,"line_start":236,"line_end":236,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228081,"byte_end":228115,"line_start":237,"line_end":237,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228120,"byte_end":228127,"line_start":238,"line_end":238,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229784,"byte_end":229815,"line_start":289,"line_end":289,"column_start":8,"column_end":39},"name":"for_byte_record_with_terminator","qualname":"::io::BufReadExt::for_byte_record_with_terminator","value":"fn <F> (mut self, terminator: u8, mut for_each_record: F) -> io::Result<()>","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Executes the given closure on each byte-terminated record in the\n underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each byte-terminated record in the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228393,"byte_end":228461,"line_start":250,"line_end":250,"column_start":5,"column_end":73}},{"value":"/ underlying reader.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228466,"byte_end":228488,"line_start":251,"line_end":251,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228493,"byte_end":228496,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228501,"byte_end":228576,"line_start":253,"line_end":253,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228581,"byte_end":228654,"line_start":254,"line_end":254,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228659,"byte_end":228727,"line_start":255,"line_end":255,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228732,"byte_end":228735,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Unlike","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228740,"byte_end":228750,"line_start":257,"line_end":257,"column_start":5,"column_end":15}},{"value":"/ [`for_byte_record`](trait.BufReadExt.html#method.for_byte_record),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228755,"byte_end":228825,"line_start":258,"line_end":258,"column_start":5,"column_end":75}},{"value":"/ the lines given to the closure *do* include the record terminator, if","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228830,"byte_end":228903,"line_start":259,"line_end":259,"column_start":5,"column_end":78}},{"value":"/ one exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228908,"byte_end":228923,"line_start":260,"line_end":260,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228928,"byte_end":228931,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over records as quickly as","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":228936,"byte_end":229003,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/ possible. Namely, a single allocation is reused for each record.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229008,"byte_end":229076,"line_start":263,"line_end":263,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229081,"byte_end":229084,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229089,"byte_end":229103,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229108,"byte_end":229111,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229116,"byte_end":229132,"line_start":267,"line_end":267,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229137,"byte_end":229140,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229145,"byte_end":229152,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229157,"byte_end":229173,"line_start":270,"line_end":270,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229178,"byte_end":229181,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ use bstr::B;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229186,"byte_end":229202,"line_start":272,"line_end":272,"column_start":5,"column_end":21}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229207,"byte_end":229236,"line_start":273,"line_end":273,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229241,"byte_end":229244,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229249,"byte_end":229294,"line_start":275,"line_end":275,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\x00ipsum\\x00dolor\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229299,"byte_end":229360,"line_start":276,"line_end":276,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229365,"byte_end":229368,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ let mut records = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229373,"byte_end":229402,"line_start":278,"line_end":278,"column_start":5,"column_end":34}},{"value":"/ cursor.for_byte_record_with_terminator(b'\\x00', |record| {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229407,"byte_end":229469,"line_start":279,"line_end":279,"column_start":5,"column_end":67}},{"value":"/     records.push(record.to_vec());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229474,"byte_end":229512,"line_start":280,"line_end":280,"column_start":5,"column_end":43}},{"value":"/     Ok(true)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229517,"byte_end":229533,"line_start":281,"line_end":281,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229538,"byte_end":229546,"line_start":282,"line_end":282,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(records.len(), 3);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229551,"byte_end":229584,"line_start":283,"line_end":283,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(records[0], B(b\"lorem\\x00\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229589,"byte_end":229633,"line_start":284,"line_end":284,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(records[1], B(\"ipsum\\x00\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229638,"byte_end":229681,"line_start":285,"line_end":285,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(records[2], B(\"dolor\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229686,"byte_end":229725,"line_start":286,"line_end":286,"column_start":5,"column_end":44}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229730,"byte_end":229764,"line_start":287,"line_end":287,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":229769,"byte_end":229776,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1455},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232042,"byte_end":232051,"line_start":355,"line_end":355,"column_start":12,"column_end":21},"name":"ByteLines","qualname":"::io::ByteLines","value":"ByteLines {  }","parent":null,"children":[{"krate":0,"index":1457}],"decl_id":null,"docs":" An iterator over lines from an instance of\n [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","sig":null,"attributes":[{"value":"/ An iterator over lines from an instance of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":231699,"byte_end":231745,"line_start":346,"line_end":346,"column_start":1,"column_end":47}},{"value":"/ [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":231746,"byte_end":231824,"line_start":347,"line_end":347,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":231825,"byte_end":231828,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ This iterator is generally created by calling the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":231829,"byte_end":231882,"line_start":349,"line_end":349,"column_start":1,"column_end":54}},{"value":"/ [`byte_lines`](trait.BufReadExt.html#method.byte_lines)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":231883,"byte_end":231942,"line_start":350,"line_end":350,"column_start":1,"column_end":60}},{"value":"/ method on the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":231943,"byte_end":231960,"line_start":351,"line_end":351,"column_start":1,"column_end":18}},{"value":"/ [`BufReadExt`](trait.BufReadExt.html)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":231961,"byte_end":232002,"line_start":352,"line_end":352,"column_start":1,"column_end":42}},{"value":"/ trait.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232003,"byte_end":232013,"line_start":353,"line_end":353,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1461},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232614,"byte_end":232625,"line_start":372,"line_end":372,"column_start":12,"column_end":23},"name":"ByteRecords","qualname":"::io::ByteRecords","value":"ByteRecords {  }","parent":null,"children":[{"krate":0,"index":1463},{"krate":0,"index":1464}],"decl_id":null,"docs":" An iterator over records from an instance of\n [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","sig":null,"attributes":[{"value":"/ An iterator over records from an instance of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232072,"byte_end":232120,"line_start":359,"line_end":359,"column_start":1,"column_end":49}},{"value":"/ [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232121,"byte_end":232199,"line_start":360,"line_end":360,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232200,"byte_end":232203,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ A byte record is any sequence of bytes terminated by a particular byte","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232204,"byte_end":232278,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ chosen by the caller. For example, NUL separated byte strings are said to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232279,"byte_end":232356,"line_start":363,"line_end":363,"column_start":1,"column_end":78}},{"value":"/ be NUL-terminated byte records.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232357,"byte_end":232392,"line_start":364,"line_end":364,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232393,"byte_end":232396,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ This iterator is generally created by calling the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232397,"byte_end":232450,"line_start":366,"line_end":366,"column_start":1,"column_end":54}},{"value":"/ [`byte_records`](trait.BufReadExt.html#method.byte_records)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232451,"byte_end":232514,"line_start":367,"line_end":367,"column_start":1,"column_end":64}},{"value":"/ method on the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232515,"byte_end":232532,"line_start":368,"line_end":368,"column_start":1,"column_end":18}},{"value":"/ [`BufReadExt`](trait.BufReadExt.html)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232533,"byte_end":232574,"line_start":369,"line_end":369,"column_start":1,"column_end":42}},{"value":"/ trait.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232575,"byte_end":232585,"line_start":370,"line_end":370,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1672},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301522,"byte_end":301531,"line_start":30,"line_end":30,"column_start":12,"column_end":21},"name":"Graphemes","qualname":"::unicode::grapheme::Graphemes","value":"Graphemes {  }","parent":null,"children":[{"krate":0,"index":1674}],"decl_id":null,"docs":" An iterator over grapheme clusters in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over grapheme clusters in a byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300414,"byte_end":300470,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300471,"byte_end":300474,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300475,"byte_end":300520,"line_start":11,"line_end":11,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::graphemes`](trait.ByteSlice.html#method.graphemes).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300521,"byte_end":300589,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300590,"byte_end":300593,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Unicode defines a grapheme cluster as an *approximation* to a single user","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300594,"byte_end":300671,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ visible character. A grapheme cluster, or just \"grapheme,\" is made up of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300672,"byte_end":300748,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ one or more codepoints. For end user oriented tasks, one should generally","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300749,"byte_end":300826,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ prefer using graphemes instead of [`Chars`](struct.Chars.html), which","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300827,"byte_end":300900,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ always yields one codepoint at a time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300901,"byte_end":300943,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300944,"byte_end":300947,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Since graphemes are made up of one or more codepoints, this iterator yields","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":300948,"byte_end":301027,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301028,"byte_end":301106,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301107,"byte_end":301167,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301168,"byte_end":301171,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This iterator can be used in reverse. When reversed, exactly the same","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301172,"byte_end":301245,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/ set of grapheme clusters are yielded, but in reverse order.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301246,"byte_end":301309,"line_start":25,"line_end":25,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301310,"byte_end":301313,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This iterator only yields *extended* grapheme clusters, in accordance with","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301314,"byte_end":301392,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Grapheme_Cluster_Boundaries).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301393,"byte_end":301486,"line_start":28,"line_end":28,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302243,"byte_end":302251,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Graphemes>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301675,"byte_end":301739,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301744,"byte_end":301747,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301752,"byte_end":301826,"line_start":41,"line_end":41,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301831,"byte_end":301890,"line_start":42,"line_end":42,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301895,"byte_end":301898,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301903,"byte_end":301917,"line_start":44,"line_end":44,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301922,"byte_end":301925,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301930,"byte_end":301937,"line_start":46,"line_end":46,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301942,"byte_end":301966,"line_start":47,"line_end":47,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301971,"byte_end":301974,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"abc\".graphemes();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301979,"byte_end":302015,"line_start":49,"line_end":49,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302020,"byte_end":302023,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302028,"byte_end":302066,"line_start":51,"line_end":51,"column_start":5,"column_end":43}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302071,"byte_end":302085,"line_start":52,"line_end":52,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"bc\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302090,"byte_end":302127,"line_start":53,"line_end":53,"column_start":5,"column_end":42}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302132,"byte_end":302146,"line_start":54,"line_end":54,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302151,"byte_end":302165,"line_start":55,"line_end":55,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302170,"byte_end":302205,"line_start":56,"line_end":56,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302210,"byte_end":302217,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302222,"byte_end":302231,"line_start":58,"line_end":58,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1681},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304634,"byte_end":304649,"line_start":120,"line_end":120,"column_start":12,"column_end":27},"name":"GraphemeIndices","qualname":"::unicode::grapheme::GraphemeIndices","value":"GraphemeIndices {  }","parent":null,"children":[{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685}],"decl_id":null,"docs":" An iterator over grapheme clusters in a byte string and their byte index\n positions.","sig":null,"attributes":[{"value":"/ An iterator over grapheme clusters in a byte string and their byte index","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302919,"byte_end":302995,"line_start":90,"line_end":90,"column_start":1,"column_end":77}},{"value":"/ positions.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302996,"byte_end":303010,"line_start":91,"line_end":91,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303011,"byte_end":303014,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303015,"byte_end":303060,"line_start":93,"line_end":93,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::grapheme_indices`](trait.ByteSlice.html#method.grapheme_indices).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303061,"byte_end":303143,"line_start":94,"line_end":94,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303144,"byte_end":303147,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ Unicode defines a grapheme cluster as an *approximation* to a single user","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303148,"byte_end":303225,"line_start":96,"line_end":96,"column_start":1,"column_end":78}},{"value":"/ visible character. A grapheme cluster, or just \"grapheme,\" is made up of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303226,"byte_end":303302,"line_start":97,"line_end":97,"column_start":1,"column_end":77}},{"value":"/ one or more codepoints. For end user oriented tasks, one should generally","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303303,"byte_end":303380,"line_start":98,"line_end":98,"column_start":1,"column_end":78}},{"value":"/ prefer using graphemes instead of [`Chars`](struct.Chars.html), which","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303381,"byte_end":303454,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/ always yields one codepoint at a time.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303455,"byte_end":303497,"line_start":100,"line_end":100,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303498,"byte_end":303501,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ Since graphemes are made up of one or more codepoints, this iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303502,"byte_end":303574,"line_start":102,"line_end":102,"column_start":1,"column_end":73}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303575,"byte_end":303648,"line_start":103,"line_end":103,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303649,"byte_end":303714,"line_start":104,"line_end":104,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303715,"byte_end":303792,"line_start":105,"line_end":105,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303793,"byte_end":303869,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/ grapheme cluster yielded with those indices. For example, when this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303870,"byte_end":303941,"line_start":107,"line_end":107,"column_start":1,"column_end":72}},{"value":"/ iterator encounters `\\xFF` in the byte string, then it will yield a pair","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":303942,"byte_end":304018,"line_start":108,"line_end":108,"column_start":1,"column_end":77}},{"value":"/ of indices ranging over a single byte, but will provide an `&str`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304019,"byte_end":304088,"line_start":109,"line_end":109,"column_start":1,"column_end":70}},{"value":"/ equivalent to `\"\\u{FFFD}\"`, which is three bytes in length. However, when","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304089,"byte_end":304166,"line_start":110,"line_end":110,"column_start":1,"column_end":78}},{"value":"/ given only valid UTF-8, then all indices are in exact correspondence with","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304167,"byte_end":304244,"line_start":111,"line_end":111,"column_start":1,"column_end":78}},{"value":"/ their paired grapheme cluster.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304245,"byte_end":304279,"line_start":112,"line_end":112,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304280,"byte_end":304283,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This iterator can be used in reverse. When reversed, exactly the same","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304284,"byte_end":304357,"line_start":114,"line_end":114,"column_start":1,"column_end":74}},{"value":"/ set of grapheme clusters are yielded, but in reverse order.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304358,"byte_end":304421,"line_start":115,"line_end":115,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304422,"byte_end":304425,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ This iterator only yields *extended* grapheme clusters, in accordance with","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304426,"byte_end":304504,"line_start":117,"line_end":117,"column_start":1,"column_end":79}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Grapheme_Cluster_Boundaries).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304505,"byte_end":304598,"line_start":118,"line_end":118,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305485,"byte_end":305493,"line_start":151,"line_end":151,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<GraphemeIndices>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304910,"byte_end":304974,"line_start":131,"line_end":131,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304979,"byte_end":304982,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304987,"byte_end":305061,"line_start":133,"line_end":133,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305066,"byte_end":305125,"line_start":134,"line_end":134,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305130,"byte_end":305133,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305138,"byte_end":305152,"line_start":136,"line_end":136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305157,"byte_end":305160,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305165,"byte_end":305172,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305177,"byte_end":305201,"line_start":139,"line_end":139,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305206,"byte_end":305209,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"abc\".grapheme_indices();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305214,"byte_end":305257,"line_start":141,"line_end":141,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305262,"byte_end":305265,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305270,"byte_end":305308,"line_start":143,"line_end":143,"column_start":5,"column_end":43}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305313,"byte_end":305327,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"bc\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305332,"byte_end":305369,"line_start":145,"line_end":145,"column_start":5,"column_end":42}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305374,"byte_end":305388,"line_start":146,"line_end":146,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305393,"byte_end":305407,"line_start":147,"line_end":147,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305412,"byte_end":305447,"line_start":148,"line_end":148,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305452,"byte_end":305459,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305464,"byte_end":305473,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1692},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313337,"byte_end":313346,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"Sentences","qualname":"::unicode::sentence::Sentences","value":"Sentences {  }","parent":null,"children":[{"krate":0,"index":1694}],"decl_id":null,"docs":" An iterator over sentences in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over sentences in a byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":312638,"byte_end":312686,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":312687,"byte_end":312690,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":312691,"byte_end":312736,"line_start":9,"line_end":9,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::sentences`](trait.ByteSlice.html#method.sentences).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":312737,"byte_end":312805,"line_start":10,"line_end":10,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":312806,"byte_end":312809,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Sentences typically include their trailing punctuation and whitespace.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":312810,"byte_end":312884,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":312885,"byte_end":312888,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator yields","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":312889,"byte_end":312968,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":312969,"byte_end":313047,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313048,"byte_end":313108,"line_start":16,"line_end":16,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313109,"byte_end":313112,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default sentence boundary","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313113,"byte_end":313192,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ rules specified in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313193,"byte_end":313215,"line_start":19,"line_end":19,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Sentence_Boundaries).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313216,"byte_end":313301,"line_start":20,"line_end":20,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314141,"byte_end":314149,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Sentences>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313490,"byte_end":313554,"line_start":31,"line_end":31,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313559,"byte_end":313562,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313567,"byte_end":313641,"line_start":33,"line_end":33,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313646,"byte_end":313705,"line_start":34,"line_end":34,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313710,"byte_end":313713,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313718,"byte_end":313732,"line_start":36,"line_end":36,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313737,"byte_end":313740,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313745,"byte_end":313752,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313757,"byte_end":313781,"line_start":39,"line_end":39,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313786,"byte_end":313789,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"I want this. Not that. Right now.\".sentences();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313794,"byte_end":313860,"line_start":41,"line_end":41,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313865,"byte_end":313868,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&b\"I want this. Not that. Right now.\"[..], it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313873,"byte_end":313946,"line_start":43,"line_end":43,"column_start":5,"column_end":78}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313951,"byte_end":313965,"line_start":44,"line_end":44,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"Not that. Right now.\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313970,"byte_end":314025,"line_start":45,"line_end":45,"column_start":5,"column_end":60}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314030,"byte_end":314044,"line_start":46,"line_end":46,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314049,"byte_end":314063,"line_start":47,"line_end":47,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314068,"byte_end":314103,"line_start":48,"line_end":48,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314108,"byte_end":314115,"line_start":49,"line_end":49,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314120,"byte_end":314129,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315783,"byte_end":315798,"line_start":93,"line_end":93,"column_start":12,"column_end":27},"name":"SentenceIndices","qualname":"::unicode::sentence::SentenceIndices","value":"SentenceIndices {  }","parent":null,"children":[{"krate":0,"index":1703},{"krate":0,"index":1704}],"decl_id":null,"docs":" An iterator over sentences in a byte string, along with their byte offsets.","sig":null,"attributes":[{"value":"/ An iterator over sentences in a byte string, along with their byte offsets.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314501,"byte_end":314580,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314581,"byte_end":314584,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314585,"byte_end":314630,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::sentence_indices`](trait.ByteSlice.html#method.sentence_indices).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314631,"byte_end":314713,"line_start":73,"line_end":73,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314714,"byte_end":314717,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Sentences typically include their trailing punctuation and whitespace.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314718,"byte_end":314792,"line_start":75,"line_end":75,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314793,"byte_end":314796,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314797,"byte_end":314869,"line_start":77,"line_end":77,"column_start":1,"column_end":73}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314870,"byte_end":314943,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314944,"byte_end":315009,"line_start":79,"line_end":79,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315010,"byte_end":315087,"line_start":80,"line_end":80,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315088,"byte_end":315164,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/ sentence yielded with those indices. For example, when this iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315165,"byte_end":315237,"line_start":82,"line_end":82,"column_start":1,"column_end":73}},{"value":"/ encounters `\\xFF` in the byte string, then it will yield a pair of indices","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315238,"byte_end":315316,"line_start":83,"line_end":83,"column_start":1,"column_end":79}},{"value":"/ ranging over a single byte, but will provide an `&str` equivalent to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315317,"byte_end":315389,"line_start":84,"line_end":84,"column_start":1,"column_end":73}},{"value":"/ `\"\\u{FFFD}\"`, which is three bytes in length. However, when given only","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315390,"byte_end":315464,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/ valid UTF-8, then all indices are in exact correspondence with their paired","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315465,"byte_end":315544,"line_start":86,"line_end":86,"column_start":1,"column_end":80}},{"value":"/ word.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315545,"byte_end":315554,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315555,"byte_end":315558,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default sentence boundary","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315559,"byte_end":315638,"line_start":89,"line_end":89,"column_start":1,"column_end":80}},{"value":"/ rules specified in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315639,"byte_end":315661,"line_start":90,"line_end":90,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Sentence_Boundaries).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315662,"byte_end":315747,"line_start":91,"line_end":91,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316666,"byte_end":316674,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<SentenceIndices>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316008,"byte_end":316072,"line_start":103,"line_end":103,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316077,"byte_end":316080,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316085,"byte_end":316159,"line_start":105,"line_end":105,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316164,"byte_end":316223,"line_start":106,"line_end":106,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316228,"byte_end":316231,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316236,"byte_end":316250,"line_start":108,"line_end":108,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316255,"byte_end":316258,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316263,"byte_end":316270,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316275,"byte_end":316299,"line_start":111,"line_end":111,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316304,"byte_end":316307,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"I want this. Not that. Right now.\".sentence_indices();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316312,"byte_end":316385,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316390,"byte_end":316393,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&b\"I want this. Not that. Right now.\"[..], it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316398,"byte_end":316471,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316476,"byte_end":316490,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"Not that. Right now.\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316495,"byte_end":316550,"line_start":117,"line_end":117,"column_start":5,"column_end":60}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316555,"byte_end":316569,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316574,"byte_end":316588,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316593,"byte_end":316628,"line_start":120,"line_end":120,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316633,"byte_end":316640,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316645,"byte_end":316654,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1711},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321290,"byte_end":321295,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Words","qualname":"::unicode::word::Words","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over words in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over words in a byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320194,"byte_end":320238,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320239,"byte_end":320242,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320243,"byte_end":320288,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::words`](trait.ByteSlice.html#method.words).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320289,"byte_end":320349,"line_start":11,"line_end":11,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320350,"byte_end":320353,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This is similar to the [`WordsWithBreaks`](struct.WordsWithBreaks.html)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320354,"byte_end":320429,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ iterator, except it only returns elements that contain a \"word\" character.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320430,"byte_end":320508,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ A word character is defined by UTS #18 (Annex C) to be the combination","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320509,"byte_end":320583,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ of the `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320584,"byte_end":320653,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general categories.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320654,"byte_end":320730,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320731,"byte_end":320734,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator yields","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320735,"byte_end":320810,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320811,"byte_end":320889,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320890,"byte_end":320950,"line_start":21,"line_end":21,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320951,"byte_end":320954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":320955,"byte_end":321030,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321031,"byte_end":321053,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321054,"byte_end":321135,"line_start":25,"line_end":25,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321136,"byte_end":321212,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321213,"byte_end":321254,"line_start":27,"line_end":27,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322028,"byte_end":322036,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Words>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321446,"byte_end":321510,"line_start":36,"line_end":36,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321515,"byte_end":321518,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321523,"byte_end":321597,"line_start":38,"line_end":38,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321602,"byte_end":321661,"line_start":39,"line_end":39,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321666,"byte_end":321669,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321674,"byte_end":321688,"line_start":41,"line_end":41,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321693,"byte_end":321696,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321701,"byte_end":321708,"line_start":43,"line_end":43,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321713,"byte_end":321737,"line_start":44,"line_end":44,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321742,"byte_end":321745,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".words();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321750,"byte_end":321790,"line_start":46,"line_end":46,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321795,"byte_end":321798,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321803,"byte_end":321849,"line_start":48,"line_end":48,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321854,"byte_end":321868,"line_start":49,"line_end":49,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321873,"byte_end":321887,"line_start":50,"line_end":50,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321892,"byte_end":321931,"line_start":51,"line_end":51,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321936,"byte_end":321950,"line_start":52,"line_end":52,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321955,"byte_end":321990,"line_start":53,"line_end":53,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321995,"byte_end":322002,"line_start":54,"line_end":54,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322007,"byte_end":322016,"line_start":55,"line_end":55,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1721},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324085,"byte_end":324096,"line_start":104,"line_end":104,"column_start":12,"column_end":23},"name":"WordIndices","qualname":"::unicode::word::WordIndices","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over words in a byte string and their byte index positions.","sig":null,"attributes":[{"value":"/ An iterator over words in a byte string and their byte index positions.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322398,"byte_end":322473,"line_start":75,"line_end":75,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322474,"byte_end":322477,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322478,"byte_end":322523,"line_start":77,"line_end":77,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::word_indices`](trait.ByteSlice.html#method.word_indices).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322524,"byte_end":322598,"line_start":78,"line_end":78,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322599,"byte_end":322602,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This is similar to the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322603,"byte_end":322629,"line_start":80,"line_end":80,"column_start":1,"column_end":27}},{"value":"/ [`WordsWithBreakIndices`](struct.WordsWithBreakIndices.html) iterator,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322630,"byte_end":322704,"line_start":81,"line_end":81,"column_start":1,"column_end":75}},{"value":"/ except it only returns elements that contain a \"word\" character. A","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322705,"byte_end":322775,"line_start":82,"line_end":82,"column_start":1,"column_end":71}},{"value":"/ word character is defined by UTS #18 (Annex C) to be the combination","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322776,"byte_end":322848,"line_start":83,"line_end":83,"column_start":1,"column_end":73}},{"value":"/ of the `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322849,"byte_end":322918,"line_start":84,"line_end":84,"column_start":1,"column_end":70}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general categories.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322919,"byte_end":322995,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322996,"byte_end":322999,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323000,"byte_end":323068,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323069,"byte_end":323142,"line_start":88,"line_end":88,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323143,"byte_end":323208,"line_start":89,"line_end":89,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323209,"byte_end":323286,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323287,"byte_end":323363,"line_start":91,"line_end":91,"column_start":1,"column_end":77}},{"value":"/ word yielded with those indices. For example, when this iterator encounters","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323364,"byte_end":323443,"line_start":92,"line_end":92,"column_start":1,"column_end":80}},{"value":"/ `\\xFF` in the byte string, then it will yield a pair of indices ranging","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323444,"byte_end":323519,"line_start":93,"line_end":93,"column_start":1,"column_end":76}},{"value":"/ over a single byte, but will provide an `&str` equivalent to `\"\\u{FFFD}\"`,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323520,"byte_end":323598,"line_start":94,"line_end":94,"column_start":1,"column_end":79}},{"value":"/ which is three bytes in length. However, when given only valid UTF-8, then","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323599,"byte_end":323677,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"/ all indices are in exact correspondence with their paired word.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323678,"byte_end":323745,"line_start":96,"line_end":96,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323746,"byte_end":323749,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323750,"byte_end":323825,"line_start":98,"line_end":98,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323826,"byte_end":323848,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323849,"byte_end":323930,"line_start":100,"line_end":100,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":323931,"byte_end":324007,"line_start":101,"line_end":101,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324008,"byte_end":324049,"line_start":102,"line_end":102,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324885,"byte_end":324893,"line_start":132,"line_end":132,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<WordIndices>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324277,"byte_end":324341,"line_start":111,"line_end":111,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324346,"byte_end":324349,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324354,"byte_end":324428,"line_start":113,"line_end":113,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324433,"byte_end":324492,"line_start":114,"line_end":114,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324497,"byte_end":324500,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324505,"byte_end":324519,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324524,"byte_end":324527,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324532,"byte_end":324539,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324544,"byte_end":324568,"line_start":119,"line_end":119,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324573,"byte_end":324576,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".word_indices();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324581,"byte_end":324628,"line_start":121,"line_end":121,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324633,"byte_end":324636,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324641,"byte_end":324687,"line_start":123,"line_end":123,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324692,"byte_end":324706,"line_start":124,"line_end":124,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324711,"byte_end":324725,"line_start":125,"line_end":125,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324730,"byte_end":324769,"line_start":126,"line_end":126,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324774,"byte_end":324788,"line_start":127,"line_end":127,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324793,"byte_end":324807,"line_start":128,"line_end":128,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324812,"byte_end":324847,"line_start":129,"line_end":129,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324852,"byte_end":324859,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324864,"byte_end":324873,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1731},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326344,"byte_end":326359,"line_start":171,"line_end":171,"column_start":12,"column_end":27},"name":"WordsWithBreaks","qualname":"::unicode::word::WordsWithBreaks","value":"WordsWithBreaks {  }","parent":null,"children":[{"krate":0,"index":1733}],"decl_id":null,"docs":" An iterator over all word breaks in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over all word breaks in a byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325321,"byte_end":325375,"line_start":151,"line_end":151,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325376,"byte_end":325379,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325380,"byte_end":325425,"line_start":153,"line_end":153,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::words_with_breaks`](trait.ByteSlice.html#method.words_with_breaks).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325426,"byte_end":325510,"line_start":154,"line_end":154,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325511,"byte_end":325514,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ This iterator yields not only all words, but the content that comes between","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325515,"byte_end":325594,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/ words. In particular, if all elements yielded by this iterator are","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325595,"byte_end":325665,"line_start":157,"line_end":157,"column_start":1,"column_end":71}},{"value":"/ concatenated, then the result is the original string (subject to Unicode","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325666,"byte_end":325742,"line_start":158,"line_end":158,"column_start":1,"column_end":77}},{"value":"/ replacement codepoint substitutions).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325743,"byte_end":325784,"line_start":159,"line_end":159,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325785,"byte_end":325788,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator yields","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325789,"byte_end":325864,"line_start":161,"line_end":161,"column_start":1,"column_end":76}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325865,"byte_end":325943,"line_start":162,"line_end":162,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":325944,"byte_end":326004,"line_start":163,"line_end":163,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326005,"byte_end":326008,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326009,"byte_end":326084,"line_start":165,"line_end":165,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326085,"byte_end":326107,"line_start":166,"line_end":166,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326108,"byte_end":326189,"line_start":167,"line_end":167,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326190,"byte_end":326266,"line_start":168,"line_end":168,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326267,"byte_end":326308,"line_start":169,"line_end":169,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327201,"byte_end":327209,"line_start":203,"line_end":203,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<WordsWithBreaks>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326521,"byte_end":326585,"line_start":180,"line_end":180,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326590,"byte_end":326593,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326598,"byte_end":326672,"line_start":182,"line_end":182,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326677,"byte_end":326736,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326741,"byte_end":326744,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326749,"byte_end":326763,"line_start":185,"line_end":185,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326768,"byte_end":326771,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326776,"byte_end":326783,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326788,"byte_end":326812,"line_start":188,"line_end":188,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326817,"byte_end":326820,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".words_with_breaks();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326825,"byte_end":326877,"line_start":190,"line_end":190,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326882,"byte_end":326885,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326890,"byte_end":326936,"line_start":192,"line_end":192,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326941,"byte_end":326955,"line_start":193,"line_end":193,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" bar baz\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326960,"byte_end":327003,"line_start":194,"line_end":194,"column_start":5,"column_end":48}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327008,"byte_end":327022,"line_start":195,"line_end":195,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327027,"byte_end":327041,"line_start":196,"line_end":196,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327046,"byte_end":327085,"line_start":197,"line_end":197,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327090,"byte_end":327104,"line_start":198,"line_end":198,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327109,"byte_end":327123,"line_start":199,"line_end":199,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327128,"byte_end":327163,"line_start":200,"line_end":200,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327168,"byte_end":327175,"line_start":201,"line_end":201,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327180,"byte_end":327189,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1740},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329165,"byte_end":329186,"line_start":250,"line_end":250,"column_start":12,"column_end":33},"name":"WordsWithBreakIndices","qualname":"::unicode::word::WordsWithBreakIndices","value":"WordsWithBreakIndices {  }","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1743}],"decl_id":null,"docs":" An iterator over all word breaks in a byte string, along with their byte\n index positions.","sig":null,"attributes":[{"value":"/ An iterator over all word breaks in a byte string, along with their byte","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327555,"byte_end":327631,"line_start":222,"line_end":222,"column_start":1,"column_end":77}},{"value":"/ index positions.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327632,"byte_end":327652,"line_start":223,"line_end":223,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327653,"byte_end":327656,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327657,"byte_end":327702,"line_start":225,"line_end":225,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::words_with_break_indices`](trait.ByteSlice.html#method.words_with_break_indices).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327703,"byte_end":327801,"line_start":226,"line_end":226,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327802,"byte_end":327805,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ This iterator yields not only all words, but the content that comes between","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327806,"byte_end":327885,"line_start":228,"line_end":228,"column_start":1,"column_end":80}},{"value":"/ words. In particular, if all elements yielded by this iterator are","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327886,"byte_end":327956,"line_start":229,"line_end":229,"column_start":1,"column_end":71}},{"value":"/ concatenated, then the result is the original string (subject to Unicode","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327957,"byte_end":328033,"line_start":230,"line_end":230,"column_start":1,"column_end":77}},{"value":"/ replacement codepoint substitutions).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328034,"byte_end":328075,"line_start":231,"line_end":231,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328076,"byte_end":328079,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328080,"byte_end":328148,"line_start":233,"line_end":233,"column_start":1,"column_end":69}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328149,"byte_end":328222,"line_start":234,"line_end":234,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328223,"byte_end":328288,"line_start":235,"line_end":235,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328289,"byte_end":328366,"line_start":236,"line_end":236,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328367,"byte_end":328443,"line_start":237,"line_end":237,"column_start":1,"column_end":77}},{"value":"/ word yielded with those indices. For example, when this iterator encounters","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328444,"byte_end":328523,"line_start":238,"line_end":238,"column_start":1,"column_end":80}},{"value":"/ `\\xFF` in the byte string, then it will yield a pair of indices ranging","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328524,"byte_end":328599,"line_start":239,"line_end":239,"column_start":1,"column_end":76}},{"value":"/ over a single byte, but will provide an `&str` equivalent to `\"\\u{FFFD}\"`,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328600,"byte_end":328678,"line_start":240,"line_end":240,"column_start":1,"column_end":79}},{"value":"/ which is three bytes in length. However, when given only valid UTF-8, then","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328679,"byte_end":328757,"line_start":241,"line_end":241,"column_start":1,"column_end":79}},{"value":"/ all indices are in exact correspondence with their paired word.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328758,"byte_end":328825,"line_start":242,"line_end":242,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328826,"byte_end":328829,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328830,"byte_end":328905,"line_start":244,"line_end":244,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328906,"byte_end":328928,"line_start":245,"line_end":245,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":328929,"byte_end":329010,"line_start":246,"line_end":246,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329011,"byte_end":329087,"line_start":247,"line_end":247,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329088,"byte_end":329129,"line_start":248,"line_end":248,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":330101,"byte_end":330109,"line_start":283,"line_end":283,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<WordsWithBreakIndices>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329414,"byte_end":329478,"line_start":260,"line_end":260,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329483,"byte_end":329486,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329491,"byte_end":329565,"line_start":262,"line_end":262,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329570,"byte_end":329629,"line_start":263,"line_end":263,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329634,"byte_end":329637,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329642,"byte_end":329656,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329661,"byte_end":329664,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329669,"byte_end":329676,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329681,"byte_end":329705,"line_start":268,"line_end":268,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329710,"byte_end":329713,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".words_with_break_indices();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329718,"byte_end":329777,"line_start":270,"line_end":270,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329782,"byte_end":329785,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329790,"byte_end":329836,"line_start":272,"line_end":272,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329841,"byte_end":329855,"line_start":273,"line_end":273,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" bar baz\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329860,"byte_end":329903,"line_start":274,"line_end":274,"column_start":5,"column_end":48}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329908,"byte_end":329922,"line_start":275,"line_end":275,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329927,"byte_end":329941,"line_start":276,"line_end":276,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329946,"byte_end":329985,"line_start":277,"line_end":277,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329990,"byte_end":330004,"line_start":278,"line_end":278,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":330009,"byte_end":330023,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":330028,"byte_end":330063,"line_start":280,"line_end":280,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":330068,"byte_end":330075,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":330080,"byte_end":330089,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1750},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337263,"byte_end":337268,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"Chars","qualname":"::utf8::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":1752}],"decl_id":null,"docs":" An iterator over Unicode scalar values in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over Unicode scalar values in a byte string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":336771,"byte_end":336831,"line_start":74,"line_end":74,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":336832,"byte_end":336835,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ When invalid UTF-8 byte sequences are found, they are substituted with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":336836,"byte_end":336914,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ Unicode replacement codepoint (`U+FFFD`) using the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":336915,"byte_end":336969,"line_start":77,"line_end":77,"column_start":1,"column_end":55}},{"value":"/ [\"maximal subpart\" strategy](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":336970,"byte_end":337046,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337047,"byte_end":337050,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337051,"byte_end":337086,"line_start":80,"line_end":80,"column_start":1,"column_end":36}},{"value":"/ [`chars`](trait.ByteSlice.html#method.chars) method provided by the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337087,"byte_end":337158,"line_start":81,"line_end":81,"column_start":1,"column_end":72}},{"value":"/ [`ByteSlice`](trait.ByteSlice.html) extension trait for `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337159,"byte_end":337227,"line_start":82,"line_end":82,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337985,"byte_end":337993,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Chars>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337400,"byte_end":337464,"line_start":93,"line_end":93,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337469,"byte_end":337472,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337477,"byte_end":337551,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337556,"byte_end":337615,"line_start":96,"line_end":96,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337620,"byte_end":337623,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337628,"byte_end":337642,"line_start":98,"line_end":98,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337647,"byte_end":337650,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337655,"byte_end":337662,"line_start":100,"line_end":100,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337667,"byte_end":337691,"line_start":101,"line_end":101,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337696,"byte_end":337699,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ let mut chars = b\"abc\".chars();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337704,"byte_end":337739,"line_start":103,"line_end":103,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337744,"byte_end":337747,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", chars.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337752,"byte_end":337793,"line_start":105,"line_end":105,"column_start":5,"column_end":46}},{"value":"/ chars.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337798,"byte_end":337815,"line_start":106,"line_end":106,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(b\"bc\", chars.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337820,"byte_end":337860,"line_start":107,"line_end":107,"column_start":5,"column_end":45}},{"value":"/ chars.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337865,"byte_end":337882,"line_start":108,"line_end":108,"column_start":5,"column_end":22}},{"value":"/ chars.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337887,"byte_end":337904,"line_start":109,"line_end":109,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(b\"\", chars.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337909,"byte_end":337947,"line_start":110,"line_end":110,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337952,"byte_end":337959,"line_start":111,"line_end":111,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337964,"byte_end":337973,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1759},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339686,"byte_end":339697,"line_start":163,"line_end":163,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::utf8::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763}],"decl_id":null,"docs":" An iterator over Unicode scalar values in a byte string and their\n byte index positions.","sig":null,"attributes":[{"value":"/ An iterator over Unicode scalar values in a byte string and their","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338614,"byte_end":338683,"line_start":144,"line_end":144,"column_start":1,"column_end":70}},{"value":"/ byte index positions.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338684,"byte_end":338709,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338710,"byte_end":338713,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ When invalid UTF-8 byte sequences are found, they are substituted with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338714,"byte_end":338792,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/ Unicode replacement codepoint (`U+FFFD`) using the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338793,"byte_end":338847,"line_start":148,"line_end":148,"column_start":1,"column_end":55}},{"value":"/ [\"maximal subpart\" strategy](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338848,"byte_end":338924,"line_start":149,"line_end":149,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338925,"byte_end":338928,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ Note that this is slightly different from the `CharIndices` iterator","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338929,"byte_end":339001,"line_start":151,"line_end":151,"column_start":1,"column_end":73}},{"value":"/ provided by the standard library. Aside from working on possibly invalid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339002,"byte_end":339078,"line_start":152,"line_end":152,"column_start":1,"column_end":77}},{"value":"/ UTF-8, this iterator provides both the corresponding starting and ending","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339079,"byte_end":339155,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/ byte indices of each codepoint yielded. The ending position is necessary to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339156,"byte_end":339235,"line_start":154,"line_end":154,"column_start":1,"column_end":80}},{"value":"/ slice the original byte string when invalid UTF-8 bytes are converted into","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339236,"byte_end":339314,"line_start":155,"line_end":155,"column_start":1,"column_end":79}},{"value":"/ a Unicode replacement codepoint, since a single replacement codepoint can","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339315,"byte_end":339392,"line_start":156,"line_end":156,"column_start":1,"column_end":78}},{"value":"/ substitute anywhere from 1 to 3 invalid bytes (inclusive).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339393,"byte_end":339455,"line_start":157,"line_end":157,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339456,"byte_end":339459,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339460,"byte_end":339495,"line_start":159,"line_end":159,"column_start":1,"column_end":36}},{"value":"/ [`char_indices`](trait.ByteSlice.html#method.char_indices) method provided","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339496,"byte_end":339574,"line_start":160,"line_end":160,"column_start":1,"column_end":79}},{"value":"/ by the [`ByteSlice`](trait.ByteSlice.html) extension trait for `&[u8]`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339575,"byte_end":339650,"line_start":161,"line_end":161,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340517,"byte_end":340525,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<CharIndices>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339946,"byte_end":340010,"line_start":174,"line_end":174,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340015,"byte_end":340018,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340023,"byte_end":340097,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340102,"byte_end":340161,"line_start":177,"line_end":177,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340166,"byte_end":340169,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340174,"byte_end":340188,"line_start":179,"line_end":179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340193,"byte_end":340196,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340201,"byte_end":340208,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340213,"byte_end":340237,"line_start":182,"line_end":182,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340242,"byte_end":340245,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"abc\".char_indices();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340250,"byte_end":340289,"line_start":184,"line_end":184,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340294,"byte_end":340297,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340302,"byte_end":340340,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340345,"byte_end":340359,"line_start":187,"line_end":187,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"bc\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340364,"byte_end":340401,"line_start":188,"line_end":188,"column_start":5,"column_end":42}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340406,"byte_end":340420,"line_start":189,"line_end":189,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340425,"byte_end":340439,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340444,"byte_end":340479,"line_start":191,"line_end":191,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340484,"byte_end":340491,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340496,"byte_end":340505,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1770},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341555,"byte_end":341565,"line_start":232,"line_end":232,"column_start":12,"column_end":22},"name":"Utf8Chunks","qualname":"::utf8::Utf8Chunks","value":"Utf8Chunks {  }","parent":null,"children":[{"krate":0,"index":1772}],"decl_id":null,"docs":" An iterator over chunks of valid UTF-8 in a byte slice.","sig":null,"attributes":[{"value":"/ An iterator over chunks of valid UTF-8 in a byte slice.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341390,"byte_end":341449,"line_start":228,"line_end":228,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341450,"byte_end":341453,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ See [`utf8_chunks`](trait.ByteSlice.html#method.utf8_chunks).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341454,"byte_end":341519,"line_start":230,"line_end":230,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342000,"byte_end":342009,"line_start":246,"line_end":246,"column_start":12,"column_end":21},"name":"Utf8Chunk","qualname":"::utf8::Utf8Chunk","value":"Utf8Chunk {  }","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997}],"decl_id":null,"docs":" A chunk of valid UTF-8, possibly followed by invalid UTF-8 bytes.","sig":null,"attributes":[{"value":"/ A chunk of valid UTF-8, possibly followed by invalid UTF-8 bytes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341607,"byte_end":341676,"line_start":236,"line_end":236,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341677,"byte_end":341680,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ This is yielded by the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341681,"byte_end":341707,"line_start":238,"line_end":238,"column_start":1,"column_end":27}},{"value":"/ [`Utf8Chunks`](struct.Utf8Chunks.html)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341708,"byte_end":341750,"line_start":239,"line_end":239,"column_start":1,"column_end":43}},{"value":"/ iterator, which can be created via the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341751,"byte_end":341793,"line_start":240,"line_end":240,"column_start":1,"column_end":43}},{"value":"/ [`ByteSlice::utf8_chunks`](trait.ByteSlice.html#method.utf8_chunks)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341794,"byte_end":341865,"line_start":241,"line_end":241,"column_start":1,"column_end":72}},{"value":"/ method.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341866,"byte_end":341877,"line_start":242,"line_end":242,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341878,"byte_end":341881,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ The `'a` lifetime parameter corresponds to the lifetime of the bytes that","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341882,"byte_end":341959,"line_start":244,"line_end":244,"column_start":1,"column_end":78}},{"value":"/ are being iterated over.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341960,"byte_end":341988,"line_start":245,"line_end":245,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342636,"byte_end":342641,"line_start":266,"line_end":266,"column_start":12,"column_end":17},"name":"valid","qualname":"<Utf8Chunk>::valid","value":"fn (&self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Returns the (possibly empty) valid UTF-8 bytes in this chunk.","sig":null,"attributes":[{"value":"/ Returns the (possibly empty) valid UTF-8 bytes in this chunk.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342444,"byte_end":342509,"line_start":261,"line_end":261,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342514,"byte_end":342517,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ This may be empty if there are consecutive sequences of invalid UTF-8","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342522,"byte_end":342595,"line_start":263,"line_end":263,"column_start":5,"column_end":78}},{"value":"/ bytes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342600,"byte_end":342610,"line_start":264,"line_end":264,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342615,"byte_end":342624,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":343394,"byte_end":343401,"line_start":284,"line_end":284,"column_start":12,"column_end":19},"name":"invalid","qualname":"<Utf8Chunk>::invalid","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the (possibly empty) invalid UTF-8 bytes in this chunk that\n immediately follow the valid UTF-8 bytes in this chunk.","sig":null,"attributes":[{"value":"/ Returns the (possibly empty) invalid UTF-8 bytes in this chunk that","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342692,"byte_end":342763,"line_start":270,"line_end":270,"column_start":5,"column_end":76}},{"value":"/ immediately follow the valid UTF-8 bytes in this chunk.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342768,"byte_end":342827,"line_start":271,"line_end":271,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342832,"byte_end":342835,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This is only empty when this chunk corresponds to the last chunk in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342840,"byte_end":342911,"line_start":273,"line_end":273,"column_start":5,"column_end":76}},{"value":"/ the original bytes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342916,"byte_end":342939,"line_start":274,"line_end":274,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342944,"byte_end":342947,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ The maximum length of this slice is 3. That is, invalid UTF-8 byte","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342952,"byte_end":343022,"line_start":276,"line_end":276,"column_start":5,"column_end":75}},{"value":"/ sequences greater than 1 always correspond to a valid _prefix_ of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":343027,"byte_end":343096,"line_start":277,"line_end":277,"column_start":5,"column_end":74}},{"value":"/ a valid UTF-8 encoded codepoint. This corresponds to the \"substitution","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":343101,"byte_end":343175,"line_start":278,"line_end":278,"column_start":5,"column_end":79}},{"value":"/ of maximal subparts\" strategy that is described in more detail in the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":343180,"byte_end":343253,"line_start":279,"line_end":279,"column_start":5,"column_end":78}},{"value":"/ docs for the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":343258,"byte_end":343274,"line_start":280,"line_end":280,"column_start":5,"column_end":21}},{"value":"/ [`ByteSlice::to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":343279,"byte_end":343352,"line_start":281,"line_end":281,"column_start":5,"column_end":78}},{"value":"/ method.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":343357,"byte_end":343368,"line_start":282,"line_end":282,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":343373,"byte_end":343382,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1779},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346654,"byte_end":346663,"line_start":382,"line_end":382,"column_start":12,"column_end":21},"name":"Utf8Error","qualname":"::utf8::Utf8Error","value":"Utf8Error {  }","parent":null,"children":[{"krate":0,"index":1780},{"krate":0,"index":1781}],"decl_id":null,"docs":" An error that occurs when UTF-8 decoding fails.","sig":null,"attributes":[{"value":"/ An error that occurs when UTF-8 decoding fails.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":344896,"byte_end":344947,"line_start":333,"line_end":333,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":344948,"byte_end":344951,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/ This error occurs when attempting to convert a non-UTF-8 byte","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":344952,"byte_end":345017,"line_start":335,"line_end":335,"column_start":1,"column_end":66}},{"value":"/ string to a Rust string that must be valid UTF-8. For example,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345018,"byte_end":345084,"line_start":336,"line_end":336,"column_start":1,"column_end":67}},{"value":"/ [`to_str`](trait.ByteSlice.html#method.to_str) is one such method.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345085,"byte_end":345155,"line_start":337,"line_end":337,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345156,"byte_end":345159,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345160,"byte_end":345173,"line_start":339,"line_end":339,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345174,"byte_end":345177,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ This example shows what happens when a given byte sequence is invalid,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345178,"byte_end":345252,"line_start":341,"line_end":341,"column_start":1,"column_end":75}},{"value":"/ but ends with a sequence that is a possible prefix of valid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345253,"byte_end":345323,"line_start":342,"line_end":342,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345324,"byte_end":345327,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345328,"byte_end":345335,"line_start":344,"line_end":344,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345336,"byte_end":345365,"line_start":345,"line_end":345,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345366,"byte_end":345369,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ let s = B(b\"foobar\\xF1\\x80\\x80\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345370,"byte_end":345407,"line_start":347,"line_end":347,"column_start":1,"column_end":38}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345408,"byte_end":345446,"line_start":348,"line_end":348,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345447,"byte_end":345484,"line_start":349,"line_end":349,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), None);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345485,"byte_end":345523,"line_start":350,"line_end":350,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345524,"byte_end":345531,"line_start":351,"line_end":351,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345532,"byte_end":345535,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ This example shows what happens when a given byte sequence contains","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345536,"byte_end":345607,"line_start":353,"line_end":353,"column_start":1,"column_end":72}},{"value":"/ invalid UTF-8.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345608,"byte_end":345626,"line_start":354,"line_end":354,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345627,"byte_end":345630,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345631,"byte_end":345638,"line_start":356,"line_end":356,"column_start":1,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345639,"byte_end":345663,"line_start":357,"line_end":357,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345664,"byte_end":345667,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ let s = b\"foobar\\xF1\\x80\\x80quux\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345668,"byte_end":345706,"line_start":359,"line_end":359,"column_start":1,"column_end":39}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345707,"byte_end":345745,"line_start":360,"line_end":360,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345746,"byte_end":345783,"line_start":361,"line_end":361,"column_start":1,"column_end":38}},{"value":"/ // The error length reports the maximum number of bytes that correspond to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345784,"byte_end":345862,"line_start":362,"line_end":362,"column_start":1,"column_end":79}},{"value":"/ // a valid prefix of a UTF-8 encoded codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345863,"byte_end":345914,"line_start":363,"line_end":363,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(err.error_len(), Some(3));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345915,"byte_end":345956,"line_start":364,"line_end":364,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345957,"byte_end":345960,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ // In contrast to the above which contains a single invalid prefix,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":345961,"byte_end":346032,"line_start":366,"line_end":366,"column_start":1,"column_end":72}},{"value":"/ // consider the case of multiple individal bytes that are never valid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346033,"byte_end":346106,"line_start":367,"line_end":367,"column_start":1,"column_end":74}},{"value":"/ // prefixes. Note how the value of error_len changes!","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346107,"byte_end":346164,"line_start":368,"line_end":368,"column_start":1,"column_end":58}},{"value":"/ let s = b\"foobar\\xFF\\xFFquux\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346165,"byte_end":346199,"line_start":369,"line_end":369,"column_start":1,"column_end":35}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346200,"byte_end":346238,"line_start":370,"line_end":370,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346239,"byte_end":346276,"line_start":371,"line_end":371,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), Some(1));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346277,"byte_end":346318,"line_start":372,"line_end":372,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346319,"byte_end":346322,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"/ // The fact that it's an invalid prefix does not change error_len even","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346323,"byte_end":346397,"line_start":374,"line_end":374,"column_start":1,"column_end":75}},{"value":"/ // when it immediately precedes the end of the string.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346398,"byte_end":346456,"line_start":375,"line_end":375,"column_start":1,"column_end":59}},{"value":"/ let s = b\"foobar\\xFF\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346457,"byte_end":346483,"line_start":376,"line_end":376,"column_start":1,"column_end":27}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346484,"byte_end":346522,"line_start":377,"line_end":377,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346523,"byte_end":346560,"line_start":378,"line_end":378,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), Some(1));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346561,"byte_end":346602,"line_start":379,"line_end":379,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346603,"byte_end":346610,"line_start":380,"line_end":380,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347353,"byte_end":347364,"line_start":407,"line_end":407,"column_start":12,"column_end":23},"name":"valid_up_to","qualname":"<Utf8Error>::valid_up_to","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte index of the position immediately following the last\n valid UTF-8 byte.","sig":null,"attributes":[{"value":"/ Returns the byte index of the position immediately following the last","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346744,"byte_end":346817,"line_start":388,"line_end":388,"column_start":5,"column_end":78}},{"value":"/ valid UTF-8 byte.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346822,"byte_end":346843,"line_start":389,"line_end":389,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346848,"byte_end":346851,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346856,"byte_end":346869,"line_start":391,"line_end":391,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346874,"byte_end":346877,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ This examples shows how `valid_up_to` can be used to retrieve a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346882,"byte_end":346949,"line_start":393,"line_end":393,"column_start":5,"column_end":72}},{"value":"/ possibly empty prefix that is guaranteed to be valid UTF-8:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346954,"byte_end":347017,"line_start":394,"line_end":394,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347022,"byte_end":347025,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347030,"byte_end":347037,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347042,"byte_end":347066,"line_start":397,"line_end":397,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347071,"byte_end":347074,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foobar\\xF1\\x80\\x80quux\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347079,"byte_end":347117,"line_start":399,"line_end":399,"column_start":5,"column_end":43}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347122,"byte_end":347160,"line_start":400,"line_end":400,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347165,"byte_end":347168,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ // This is guaranteed to never panic.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347173,"byte_end":347214,"line_start":402,"line_end":402,"column_start":5,"column_end":46}},{"value":"/ let string = s[..err.valid_up_to()].to_str().unwrap();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347219,"byte_end":347277,"line_start":403,"line_end":403,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(string, \"foobar\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347282,"byte_end":347315,"line_start":404,"line_end":404,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347320,"byte_end":347327,"line_start":405,"line_end":405,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347332,"byte_end":347341,"line_start":406,"line_end":406,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347970,"byte_end":347979,"line_start":421,"line_end":421,"column_start":12,"column_end":21},"name":"error_len","qualname":"<Utf8Error>::error_len","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of invalid UTF-8 bytes immediately following\n the position returned by `valid_up_to`. This value is always at least\n `1`, but can be up to `3` if bytes form a valid prefix of some UTF-8\n encoded codepoint.","sig":null,"attributes":[{"value":"/ Returns the total number of invalid UTF-8 bytes immediately following","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347419,"byte_end":347492,"line_start":411,"line_end":411,"column_start":5,"column_end":78}},{"value":"/ the position returned by `valid_up_to`. This value is always at least","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347497,"byte_end":347570,"line_start":412,"line_end":412,"column_start":5,"column_end":78}},{"value":"/ `1`, but can be up to `3` if bytes form a valid prefix of some UTF-8","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347575,"byte_end":347647,"line_start":413,"line_end":413,"column_start":5,"column_end":77}},{"value":"/ encoded codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347652,"byte_end":347674,"line_start":414,"line_end":414,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347679,"byte_end":347682,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ If the end of the original input was found before a valid UTF-8 encoded","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347687,"byte_end":347762,"line_start":416,"line_end":416,"column_start":5,"column_end":80}},{"value":"/ codepoint could be completed, then this returns `None`. This is useful","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347767,"byte_end":347841,"line_start":417,"line_end":417,"column_start":5,"column_end":79}},{"value":"/ when processing streams, where a `None` value signals that more input","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347846,"byte_end":347919,"line_start":418,"line_end":418,"column_start":5,"column_end":78}},{"value":"/ might be needed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347924,"byte_end":347944,"line_start":419,"line_end":419,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":347949,"byte_end":347958,"line_start":420,"line_end":420,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":1022},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353929,"byte_end":353935,"line_start":585,"line_end":585,"column_start":8,"column_end":14},"name":"decode","qualname":"::utf8::decode","value":"fn <B> (slice: B) -> (Option<char>, usize)","parent":null,"children":[],"decl_id":null,"docs":" UTF-8 decode a single Unicode scalar value from the beginning of a slice.","sig":null,"attributes":[{"value":"/ UTF-8 decode a single Unicode scalar value from the beginning of a slice.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352390,"byte_end":352467,"line_start":539,"line_end":539,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352468,"byte_end":352471,"line_start":540,"line_end":540,"column_start":1,"column_end":4}},{"value":"/ When successful, the corresponding Unicode scalar value is returned along","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352472,"byte_end":352549,"line_start":541,"line_end":541,"column_start":1,"column_end":78}},{"value":"/ with the number of bytes it was encoded with. The number of bytes consumed","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352550,"byte_end":352628,"line_start":542,"line_end":542,"column_start":1,"column_end":79}},{"value":"/ for a successful decode is always between 1 and 4, inclusive.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352629,"byte_end":352694,"line_start":543,"line_end":543,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352695,"byte_end":352698,"line_start":544,"line_end":544,"column_start":1,"column_end":4}},{"value":"/ When unsuccessful, `None` is returned along with the number of bytes that","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352699,"byte_end":352776,"line_start":545,"line_end":545,"column_start":1,"column_end":78}},{"value":"/ make up a maximal prefix of a valid UTF-8 code unit sequence. In this case,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352777,"byte_end":352856,"line_start":546,"line_end":546,"column_start":1,"column_end":80}},{"value":"/ the number of bytes consumed is always between 0 and 3, inclusive, where","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352857,"byte_end":352933,"line_start":547,"line_end":547,"column_start":1,"column_end":77}},{"value":"/ 0 is only returned when `slice` is empty.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352934,"byte_end":352979,"line_start":548,"line_end":548,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352980,"byte_end":352983,"line_start":549,"line_end":549,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352984,"byte_end":352998,"line_start":550,"line_end":550,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":352999,"byte_end":353002,"line_start":551,"line_end":551,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353003,"byte_end":353019,"line_start":552,"line_end":552,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353020,"byte_end":353023,"line_start":553,"line_end":553,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353024,"byte_end":353031,"line_start":554,"line_end":554,"column_start":1,"column_end":8}},{"value":"/ use bstr::decode_utf8;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353032,"byte_end":353058,"line_start":555,"line_end":555,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353059,"byte_end":353062,"line_start":556,"line_end":556,"column_start":1,"column_end":4}},{"value":"/ // Decoding a valid codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353063,"byte_end":353097,"line_start":557,"line_end":557,"column_start":1,"column_end":35}},{"value":"/ let (ch, size) = decode_utf8(b\"\\xE2\\x98\\x83\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353098,"byte_end":353148,"line_start":558,"line_end":558,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(Some('☃'), ch);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353149,"byte_end":353181,"line_start":559,"line_end":559,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(3, size);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353182,"byte_end":353206,"line_start":560,"line_end":560,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353207,"byte_end":353210,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ // Decoding an incomplete codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353211,"byte_end":353251,"line_start":562,"line_end":562,"column_start":1,"column_end":41}},{"value":"/ let (ch, size) = decode_utf8(b\"\\xE2\\x98\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353252,"byte_end":353298,"line_start":563,"line_end":563,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(None, ch);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353299,"byte_end":353324,"line_start":564,"line_end":564,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(2, size);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353325,"byte_end":353349,"line_start":565,"line_end":565,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353350,"byte_end":353357,"line_start":566,"line_end":566,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353358,"byte_end":353361,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ This example shows how to iterate over all codepoints in UTF-8 encoded","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353362,"byte_end":353436,"line_start":568,"line_end":568,"column_start":1,"column_end":75}},{"value":"/ bytes, while replacing invalid UTF-8 sequences with the replacement","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353437,"byte_end":353508,"line_start":569,"line_end":569,"column_start":1,"column_end":72}},{"value":"/ codepoint:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353509,"byte_end":353523,"line_start":570,"line_end":570,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353524,"byte_end":353527,"line_start":571,"line_end":571,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353528,"byte_end":353535,"line_start":572,"line_end":572,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, decode_utf8};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353536,"byte_end":353567,"line_start":573,"line_end":573,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353568,"byte_end":353571,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ let mut bytes = B(b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353572,"byte_end":353643,"line_start":575,"line_end":575,"column_start":1,"column_end":72}},{"value":"/ let mut chars = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353644,"byte_end":353671,"line_start":576,"line_end":576,"column_start":1,"column_end":28}},{"value":"/ while !bytes.is_empty() {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353672,"byte_end":353701,"line_start":577,"line_end":577,"column_start":1,"column_end":30}},{"value":"/     let (ch, size) = decode_utf8(bytes);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353702,"byte_end":353746,"line_start":578,"line_end":578,"column_start":1,"column_end":45}},{"value":"/     bytes = &bytes[size..];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353747,"byte_end":353778,"line_start":579,"line_end":579,"column_start":1,"column_end":32}},{"value":"/     chars.push(ch.unwrap_or('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353779,"byte_end":353824,"line_start":580,"line_end":580,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353825,"byte_end":353830,"line_start":581,"line_end":581,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec!['☃', '\\u{FFFD}', '𝞃', '\\u{FFFD}', 'a'], chars);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353831,"byte_end":353903,"line_start":582,"line_end":582,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353904,"byte_end":353911,"line_start":583,"line_end":583,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":353912,"byte_end":353921,"line_start":584,"line_end":584,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":358162,"byte_end":358173,"line_start":712,"line_end":712,"column_start":8,"column_end":19},"name":"decode_last","qualname":"::utf8::decode_last","value":"fn <B> (slice: B) -> (Option<char>, usize)","parent":null,"children":[],"decl_id":null,"docs":" UTF-8 decode a single Unicode scalar value from the end of a slice.","sig":null,"attributes":[{"value":"/ UTF-8 decode a single Unicode scalar value from the end of a slice.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":356581,"byte_end":356652,"line_start":666,"line_end":666,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":356653,"byte_end":356656,"line_start":667,"line_end":667,"column_start":1,"column_end":4}},{"value":"/ When successful, the corresponding Unicode scalar value is returned along","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":356657,"byte_end":356734,"line_start":668,"line_end":668,"column_start":1,"column_end":78}},{"value":"/ with the number of bytes it was encoded with. The number of bytes consumed","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":356735,"byte_end":356813,"line_start":669,"line_end":669,"column_start":1,"column_end":79}},{"value":"/ for a successful decode is always between 1 and 4, inclusive.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":356814,"byte_end":356879,"line_start":670,"line_end":670,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":356880,"byte_end":356883,"line_start":671,"line_end":671,"column_start":1,"column_end":4}},{"value":"/ When unsuccessful, `None` is returned along with the number of bytes that","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":356884,"byte_end":356961,"line_start":672,"line_end":672,"column_start":1,"column_end":78}},{"value":"/ make up a maximal prefix of a valid UTF-8 code unit sequence. In this case,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":356962,"byte_end":357041,"line_start":673,"line_end":673,"column_start":1,"column_end":80}},{"value":"/ the number of bytes consumed is always between 0 and 3, inclusive, where","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357042,"byte_end":357118,"line_start":674,"line_end":674,"column_start":1,"column_end":77}},{"value":"/ 0 is only returned when `slice` is empty.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357119,"byte_end":357164,"line_start":675,"line_end":675,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357165,"byte_end":357168,"line_start":676,"line_end":676,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357169,"byte_end":357183,"line_start":677,"line_end":677,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357184,"byte_end":357187,"line_start":678,"line_end":678,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357188,"byte_end":357204,"line_start":679,"line_end":679,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357205,"byte_end":357208,"line_start":680,"line_end":680,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357209,"byte_end":357216,"line_start":681,"line_end":681,"column_start":1,"column_end":8}},{"value":"/ use bstr::decode_last_utf8;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357217,"byte_end":357248,"line_start":682,"line_end":682,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357249,"byte_end":357252,"line_start":683,"line_end":683,"column_start":1,"column_end":4}},{"value":"/ // Decoding a valid codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357253,"byte_end":357287,"line_start":684,"line_end":684,"column_start":1,"column_end":35}},{"value":"/ let (ch, size) = decode_last_utf8(b\"\\xE2\\x98\\x83\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357288,"byte_end":357343,"line_start":685,"line_end":685,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(Some('☃'), ch);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357344,"byte_end":357376,"line_start":686,"line_end":686,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(3, size);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357377,"byte_end":357401,"line_start":687,"line_end":687,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357402,"byte_end":357405,"line_start":688,"line_end":688,"column_start":1,"column_end":4}},{"value":"/ // Decoding an incomplete codepoint.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357406,"byte_end":357446,"line_start":689,"line_end":689,"column_start":1,"column_end":41}},{"value":"/ let (ch, size) = decode_last_utf8(b\"\\xE2\\x98\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357447,"byte_end":357498,"line_start":690,"line_end":690,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(None, ch);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357499,"byte_end":357524,"line_start":691,"line_end":691,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(2, size);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357525,"byte_end":357549,"line_start":692,"line_end":692,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357550,"byte_end":357557,"line_start":693,"line_end":693,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357558,"byte_end":357561,"line_start":694,"line_end":694,"column_start":1,"column_end":4}},{"value":"/ This example shows how to iterate over all codepoints in UTF-8 encoded","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357562,"byte_end":357636,"line_start":695,"line_end":695,"column_start":1,"column_end":75}},{"value":"/ bytes in reverse, while replacing invalid UTF-8 sequences with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357637,"byte_end":357707,"line_start":696,"line_end":696,"column_start":1,"column_end":71}},{"value":"/ replacement codepoint:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357708,"byte_end":357734,"line_start":697,"line_end":697,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357735,"byte_end":357738,"line_start":698,"line_end":698,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357739,"byte_end":357746,"line_start":699,"line_end":699,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, decode_last_utf8};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357747,"byte_end":357783,"line_start":700,"line_end":700,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357784,"byte_end":357787,"line_start":701,"line_end":701,"column_start":1,"column_end":4}},{"value":"/ let mut bytes = B(b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\");","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357788,"byte_end":357859,"line_start":702,"line_end":702,"column_start":1,"column_end":72}},{"value":"/ let mut chars = vec![];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357860,"byte_end":357887,"line_start":703,"line_end":703,"column_start":1,"column_end":28}},{"value":"/ while !bytes.is_empty() {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357888,"byte_end":357917,"line_start":704,"line_end":704,"column_start":1,"column_end":30}},{"value":"/     let (ch, size) = decode_last_utf8(bytes);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357918,"byte_end":357967,"line_start":705,"line_end":705,"column_start":1,"column_end":50}},{"value":"/     bytes = &bytes[..bytes.len()-size];","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":357968,"byte_end":358011,"line_start":706,"line_end":706,"column_start":1,"column_end":44}},{"value":"/     chars.push(ch.unwrap_or('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":358012,"byte_end":358057,"line_start":707,"line_end":707,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":358058,"byte_end":358063,"line_start":708,"line_end":708,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec!['a', '\\u{FFFD}', '𝞃', '\\u{FFFD}', '☃'], chars);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":358064,"byte_end":358136,"line_start":709,"line_end":709,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":358137,"byte_end":358144,"line_start":710,"line_end":710,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":358145,"byte_end":358154,"line_start":711,"line_end":711,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33556,"byte_end":33560,"line_start":35,"line_end":35,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35616,"byte_end":35623,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\cow.rs","byte_start":49571,"byte_end":49579,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\cow.rs","byte_start":49684,"byte_end":49692,"line_start":30,"line_end":30,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\cow.rs","byte_start":50691,"byte_end":50694,"line_start":61,"line_end":61,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148954,"byte_end":148960,"line_start":2998,"line_end":2998,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152164,"byte_end":152177,"line_start":3083,"line_end":3083,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154839,"byte_end":154843,"line_start":3161,"line_end":3161,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":155097,"byte_end":155101,"line_start":3169,"line_end":3169,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":156174,"byte_end":156185,"line_start":3207,"line_end":3207,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":156626,"byte_end":156637,"line_start":3224,"line_end":3224,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157459,"byte_end":157464,"line_start":3258,"line_end":3258,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157622,"byte_end":157627,"line_start":3267,"line_end":3267,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157772,"byte_end":157777,"line_start":3274,"line_end":3274,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158220,"byte_end":158226,"line_start":3292,"line_end":3292,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158374,"byte_end":158380,"line_start":3298,"line_end":3298,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":159076,"byte_end":159086,"line_start":3323,"line_end":3323,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":159269,"byte_end":159279,"line_start":3329,"line_end":3329,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":160587,"byte_end":160592,"line_start":3373,"line_end":3373,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":160794,"byte_end":160799,"line_start":3380,"line_end":3380,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":162429,"byte_end":162441,"line_start":3429,"line_end":3429,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":162671,"byte_end":162683,"line_start":3436,"line_end":3436,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":163893,"byte_end":163899,"line_start":3480,"line_end":3480,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":164141,"byte_end":164147,"line_start":3491,"line_end":3491,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":164873,"byte_end":164886,"line_start":3519,"line_end":3519,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165143,"byte_end":165156,"line_start":3530,"line_end":3530,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165827,"byte_end":165832,"line_start":3556,"line_end":3556,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165967,"byte_end":165972,"line_start":3562,"line_end":3562,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":167007,"byte_end":167026,"line_start":3595,"line_end":3595,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":167159,"byte_end":167178,"line_start":3601,"line_end":3601,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171021,"byte_end":171024,"line_start":85,"line_end":85,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171395,"byte_end":171398,"line_start":105,"line_end":105,"column_start":17,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196033,"byte_end":196043,"line_start":915,"line_end":915,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196074,"byte_end":196084,"line_start":917,"line_end":917,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196230,"byte_end":196240,"line_start":926,"line_end":926,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196373,"byte_end":196383,"line_start":933,"line_end":933,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197274,"byte_end":197287,"line_start":969,"line_end":969,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":199026,"byte_end":199039,"line_start":1035,"line_end":1035,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":199154,"byte_end":199167,"line_start":1042,"line_end":1042,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":202799,"byte_end":202806,"line_start":74,"line_end":74,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":202980,"byte_end":202987,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203159,"byte_end":203166,"line_start":88,"line_end":88,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203325,"byte_end":203332,"line_start":97,"line_end":97,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203473,"byte_end":203480,"line_start":104,"line_end":104,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203603,"byte_end":203610,"line_start":111,"line_end":111,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203736,"byte_end":203743,"line_start":118,"line_end":118,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203878,"byte_end":203885,"line_start":125,"line_end":125,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204024,"byte_end":204031,"line_start":132,"line_end":132,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204153,"byte_end":204157,"line_start":139,"line_end":139,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204319,"byte_end":204326,"line_start":148,"line_end":148,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204446,"byte_end":204453,"line_start":154,"line_end":154,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204598,"byte_end":204605,"line_start":161,"line_end":161,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204744,"byte_end":204747,"line_start":168,"line_end":168,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204881,"byte_end":204888,"line_start":175,"line_end":175,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205042,"byte_end":205049,"line_start":182,"line_end":182,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205201,"byte_end":205208,"line_start":189,"line_end":189,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205363,"byte_end":205366,"line_start":196,"line_end":196,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205519,"byte_end":205526,"line_start":203,"line_end":203,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205731,"byte_end":205738,"line_start":210,"line_end":210,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205951,"byte_end":205958,"line_start":217,"line_end":217,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":206252,"byte_end":206259,"line_start":228,"line_end":228,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":206554,"byte_end":206561,"line_start":239,"line_end":239,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":206851,"byte_end":206858,"line_start":250,"line_end":250,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":207128,"byte_end":207135,"line_start":261,"line_end":261,"column_start":17,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":207163,"byte_end":207170,"line_start":263,"line_end":263,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":207628,"byte_end":207635,"line_start":279,"line_end":279,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":207822,"byte_end":207829,"line_start":286,"line_end":286,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":208498,"byte_end":208502,"line_start":314,"line_end":314,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":208864,"byte_end":208868,"line_start":327,"line_end":327,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":209402,"byte_end":209406,"line_start":345,"line_end":345,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":209559,"byte_end":209563,"line_start":354,"line_end":354,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":209707,"byte_end":209711,"line_start":361,"line_end":361,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":209895,"byte_end":209899,"line_start":370,"line_end":370,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":210080,"byte_end":210084,"line_start":379,"line_end":379,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":210316,"byte_end":210320,"line_start":388,"line_end":388,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":210563,"byte_end":210567,"line_start":397,"line_end":397,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":210791,"byte_end":210795,"line_start":406,"line_end":406,"column_start":46,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":211024,"byte_end":211028,"line_start":415,"line_end":415,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":211247,"byte_end":211251,"line_start":424,"line_end":424,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":211422,"byte_end":211426,"line_start":431,"line_end":431,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":211593,"byte_end":211597,"line_start":438,"line_end":438,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":211825,"byte_end":211829,"line_start":445,"line_end":445,"column_start":56,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":212068,"byte_end":212072,"line_start":452,"line_end":452,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":212292,"byte_end":212296,"line_start":459,"line_end":459,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":212521,"byte_end":212525,"line_start":466,"line_end":466,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":212728,"byte_end":212732,"line_start":473,"line_end":473,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":213120,"byte_end":213124,"line_start":494,"line_end":494,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":214012,"byte_end":214015,"line_start":535,"line_end":535,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":214156,"byte_end":214160,"line_start":542,"line_end":542,"column_start":17,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":214194,"byte_end":214198,"line_start":544,"line_end":544,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":214999,"byte_end":215003,"line_start":571,"line_end":571,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":215195,"byte_end":215199,"line_start":578,"line_end":578,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":215981,"byte_end":215985,"line_start":611,"line_end":611,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":216478,"byte_end":216489,"line_start":629,"line_end":629,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":217527,"byte_end":217534,"line_start":670,"line_end":670,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":217787,"byte_end":217794,"line_start":680,"line_end":680,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":218020,"byte_end":218034,"line_start":688,"line_end":688,"column_start":40,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":231693,"byte_end":231694,"line_start":344,"line_end":344,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232700,"byte_end":232709,"line_start":377,"line_end":377,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":233120,"byte_end":233131,"line_start":393,"line_end":393,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\prefilter.rs","byte_start":242745,"byte_end":242759,"line_start":29,"line_end":29,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\prefilter.rs","byte_start":245879,"byte_end":245884,"line_start":116,"line_end":116,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\twoway.rs","byte_start":259678,"byte_end":259684,"line_start":51,"line_end":51,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\twoway.rs","byte_start":275426,"byte_end":275431,"line_start":491,"line_end":491,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\twoway.rs","byte_start":277999,"byte_end":278005,"line_start":557,"line_end":557,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\twoway.rs","byte_start":283148,"byte_end":283158,"line_start":685,"line_end":685,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301568,"byte_end":301577,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302320,"byte_end":302329,"line_start":64,"line_end":64,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302636,"byte_end":302645,"line_start":78,"line_end":78,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304738,"byte_end":304753,"line_start":126,"line_end":126,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305562,"byte_end":305577,"line_start":156,"line_end":156,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":879},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":306015,"byte_end":306030,"line_start":172,"line_end":172,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313383,"byte_end":313392,"line_start":26,"line_end":26,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314218,"byte_end":314227,"line_start":56,"line_end":56,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315861,"byte_end":315876,"line_start":98,"line_end":98,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316743,"byte_end":316758,"line_start":128,"line_end":128,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321332,"byte_end":321337,"line_start":31,"line_end":31,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322115,"byte_end":322120,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324139,"byte_end":324150,"line_start":106,"line_end":106,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324972,"byte_end":324983,"line_start":137,"line_end":137,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":938},{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326396,"byte_end":326411,"line_start":175,"line_end":175,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327278,"byte_end":327293,"line_start":208,"line_end":208,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329249,"byte_end":329270,"line_start":255,"line_end":255,"column_start":10,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":330178,"byte_end":330199,"line_start":288,"line_end":288,"column_start":23,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337305,"byte_end":337310,"line_start":88,"line_end":88,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338062,"byte_end":338067,"line_start":118,"line_end":118,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338353,"byte_end":338358,"line_start":132,"line_end":132,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339786,"byte_end":339797,"line_start":169,"line_end":169,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340594,"byte_end":340605,"line_start":199,"line_end":199,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341022,"byte_end":341033,"line_start":215,"line_end":215,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342424,"byte_end":342433,"line_start":260,"line_end":260,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":343486,"byte_end":343496,"line_start":289,"line_end":289,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":344877,"byte_end":344887,"line_start":331,"line_end":331,"column_start":42,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346728,"byte_end":346737,"line_start":387,"line_end":387,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":348084,"byte_end":348093,"line_start":427,"line_end":427,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":348187,"byte_end":348196,"line_start":433,"line_end":433,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\lib.rs","byte_start":19387,"byte_end":19389,"line_start":420,"line_end":420,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":738}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstr.rs","byte_start":33556,"byte_end":33560,"line_start":35,"line_end":35,"column_start":6,"column_end":10},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1032},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\bstring.rs","byte_start":35616,"byte_end":35623,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1037},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\cow.rs","byte_start":49571,"byte_end":49579,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1044},"to":{"krate":2,"index":2073}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\cow.rs","byte_start":49684,"byte_end":49692,"line_start":30,"line_end":30,"column_start":10,"column_end":18},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\cow.rs","byte_start":50691,"byte_end":50694,"line_start":61,"line_end":61,"column_start":10,"column_end":13},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":53959,"byte_end":53965,"line_start":98,"line_end":98,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":180},"to":{"krate":0,"index":182}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":148954,"byte_end":148960,"line_start":2998,"line_end":2998,"column_start":10,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":152164,"byte_end":152177,"line_start":3083,"line_end":3083,"column_start":10,"column_end":23},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1073},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":154839,"byte_end":154843,"line_start":3161,"line_end":3161,"column_start":10,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":155097,"byte_end":155101,"line_start":3169,"line_end":3169,"column_start":23,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1082},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":156174,"byte_end":156185,"line_start":3207,"line_end":3207,"column_start":10,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1091},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":156626,"byte_end":156637,"line_start":3224,"line_end":3224,"column_start":23,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1091},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157459,"byte_end":157464,"line_start":3258,"line_end":3258,"column_start":23,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1100},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157622,"byte_end":157627,"line_start":3267,"line_end":3267,"column_start":34,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1100},"to":{"krate":2,"index":4785}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":157772,"byte_end":157777,"line_start":3274,"line_end":3274,"column_start":32,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1100},"to":{"krate":2,"index":4814}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158220,"byte_end":158226,"line_start":3292,"line_end":3292,"column_start":10,"column_end":16},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":158374,"byte_end":158380,"line_start":3298,"line_end":3298,"column_start":23,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1109},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":159076,"byte_end":159086,"line_start":3323,"line_end":3323,"column_start":34,"column_end":44},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":159269,"byte_end":159279,"line_start":3329,"line_end":3329,"column_start":47,"column_end":57},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1115},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":160587,"byte_end":160592,"line_start":3373,"line_end":3373,"column_start":10,"column_end":15},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":160794,"byte_end":160799,"line_start":3380,"line_end":3380,"column_start":23,"column_end":28},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1125},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":162429,"byte_end":162441,"line_start":3429,"line_end":3429,"column_start":10,"column_end":22},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":162671,"byte_end":162683,"line_start":3436,"line_end":3436,"column_start":23,"column_end":35},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1133},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":163893,"byte_end":163899,"line_start":3480,"line_end":3480,"column_start":10,"column_end":16},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":164141,"byte_end":164147,"line_start":3491,"line_end":3491,"column_start":23,"column_end":29},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1141},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":164873,"byte_end":164886,"line_start":3519,"line_end":3519,"column_start":10,"column_end":23},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165143,"byte_end":165156,"line_start":3530,"line_end":3530,"column_start":23,"column_end":36},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1149},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165827,"byte_end":165832,"line_start":3556,"line_end":3556,"column_start":10,"column_end":15},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":165967,"byte_end":165972,"line_start":3562,"line_end":3562,"column_start":23,"column_end":28},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":393},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":167007,"byte_end":167026,"line_start":3595,"line_end":3595,"column_start":10,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":403},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_slice.rs","byte_start":167159,"byte_end":167178,"line_start":3601,"line_end":3601,"column_start":23,"column_end":42},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":403},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171021,"byte_end":171024,"line_start":85,"line_end":85,"column_start":18,"column_end":21},"kind":{"Impl":{"id":30}},"from":{"krate":5,"index":4166},"to":{"krate":0,"index":445}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171395,"byte_end":171398,"line_start":105,"line_end":105,"column_start":17,"column_end":20},"kind":{"Impl":{"id":31}},"from":{"krate":5,"index":4166},"to":{"krate":0,"index":443}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":171804,"byte_end":171810,"line_start":119,"line_end":119,"column_start":20,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":443},"to":{"krate":0,"index":445}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196033,"byte_end":196043,"line_start":915,"line_end":915,"column_start":34,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1157},"to":{"krate":2,"index":5121}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196074,"byte_end":196084,"line_start":917,"line_end":917,"column_start":23,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1157},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196230,"byte_end":196240,"line_start":926,"line_end":926,"column_start":34,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1157},"to":{"krate":2,"index":4785}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":196373,"byte_end":196383,"line_start":933,"line_end":933,"column_start":32,"column_end":42},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1157},"to":{"krate":2,"index":4814}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":197274,"byte_end":197287,"line_start":969,"line_end":969,"column_start":6,"column_end":19},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":199026,"byte_end":199039,"line_start":1035,"line_end":1035,"column_start":23,"column_end":36},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1163},"to":{"krate":1,"index":1634}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\ext_vec.rs","byte_start":199154,"byte_end":199167,"line_start":1042,"line_end":1042,"column_start":23,"column_end":36},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1163},"to":{"krate":2,"index":6081}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":202799,"byte_end":202806,"line_start":74,"line_end":74,"column_start":27,"column_end":34},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":6081}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":202980,"byte_end":202987,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":6076}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203159,"byte_end":203166,"line_start":88,"line_end":88,"column_start":25,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":2073}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203325,"byte_end":203332,"line_start":97,"line_end":97,"column_start":28,"column_end":35},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":2086}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203473,"byte_end":203480,"line_start":104,"line_end":104,"column_start":26,"column_end":33},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1816}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203603,"byte_end":203610,"line_start":111,"line_end":111,"column_start":26,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1816}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203736,"byte_end":203743,"line_start":118,"line_end":118,"column_start":26,"column_end":33},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1819}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":203878,"byte_end":203885,"line_start":125,"line_end":125,"column_start":26,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1819}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204024,"byte_end":204031,"line_start":132,"line_end":132,"column_start":27,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1584}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204153,"byte_end":204157,"line_start":139,"line_end":139,"column_start":22,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1032},"to":{"krate":5,"index":314}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204319,"byte_end":204326,"line_start":148,"line_end":148,"column_start":22,"column_end":29},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1895}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204446,"byte_end":204453,"line_start":154,"line_end":154,"column_start":33,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1825}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204598,"byte_end":204605,"line_start":161,"line_end":161,"column_start":28,"column_end":35},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1825}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204744,"byte_end":204747,"line_start":168,"line_end":168,"column_start":28,"column_end":31},"kind":{"Impl":{"id":52}},"from":{"krate":5,"index":4166},"to":{"krate":2,"index":1825}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":204881,"byte_end":204888,"line_start":175,"line_end":175,"column_start":32,"column_end":39},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1825}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205042,"byte_end":205049,"line_start":182,"line_end":182,"column_start":27,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1825}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205201,"byte_end":205208,"line_start":189,"line_end":189,"column_start":33,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1825}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205363,"byte_end":205366,"line_start":196,"line_end":196,"column_start":32,"column_end":35},"kind":{"Impl":{"id":56}},"from":{"krate":5,"index":323},"to":{"krate":2,"index":1825}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205519,"byte_end":205526,"line_start":203,"line_end":203,"column_start":33,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":4762}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205731,"byte_end":205738,"line_start":210,"line_end":210,"column_start":31,"column_end":38},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":4762}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":205951,"byte_end":205958,"line_start":217,"line_end":217,"column_start":40,"column_end":47},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":4762}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":206252,"byte_end":206259,"line_start":228,"line_end":228,"column_start":41,"column_end":48},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":4762}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":206554,"byte_end":206561,"line_start":239,"line_end":239,"column_start":41,"column_end":48},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":4762}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":206851,"byte_end":206858,"line_start":250,"line_end":250,"column_start":36,"column_end":43},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":4762}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":207128,"byte_end":207135,"line_start":261,"line_end":261,"column_start":17,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1639}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":207163,"byte_end":207170,"line_start":263,"line_end":263,"column_start":24,"column_end":31},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1634}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":207628,"byte_end":207635,"line_start":279,"line_end":279,"column_start":25,"column_end":32},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1671}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":207822,"byte_end":207829,"line_start":286,"line_end":286,"column_start":18,"column_end":25},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":1660}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":208498,"byte_end":208502,"line_start":314,"line_end":314,"column_start":27,"column_end":31},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":6081}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":208864,"byte_end":208868,"line_start":327,"line_end":327,"column_start":25,"column_end":29},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":6076}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":209402,"byte_end":209406,"line_start":345,"line_end":345,"column_start":25,"column_end":29},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2073}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":209559,"byte_end":209563,"line_start":354,"line_end":354,"column_start":28,"column_end":32},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2086}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":209707,"byte_end":209711,"line_start":361,"line_end":361,"column_start":32,"column_end":36},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2154}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":209895,"byte_end":209899,"line_start":370,"line_end":370,"column_start":41,"column_end":45},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2154}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":210080,"byte_end":210084,"line_start":379,"line_end":379,"column_start":44,"column_end":48},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2154}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":210316,"byte_end":210320,"line_start":388,"line_end":388,"column_start":53,"column_end":57},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2154}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":210563,"byte_end":210567,"line_start":397,"line_end":397,"column_start":48,"column_end":52},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2154}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":210791,"byte_end":210795,"line_start":406,"line_end":406,"column_start":46,"column_end":50},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2154}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":211024,"byte_end":211028,"line_start":415,"line_end":415,"column_start":55,"column_end":59},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2154}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":211247,"byte_end":211251,"line_start":424,"line_end":424,"column_start":35,"column_end":39},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2158}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":211422,"byte_end":211426,"line_start":431,"line_end":431,"column_start":44,"column_end":48},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2158}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":211593,"byte_end":211597,"line_start":438,"line_end":438,"column_start":47,"column_end":51},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2158}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":211825,"byte_end":211829,"line_start":445,"line_end":445,"column_start":56,"column_end":60},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2158}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":212068,"byte_end":212072,"line_start":452,"line_end":452,"column_start":51,"column_end":55},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2158}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":212292,"byte_end":212296,"line_start":459,"line_end":459,"column_start":49,"column_end":53},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2158}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":212521,"byte_end":212525,"line_start":466,"line_end":466,"column_start":58,"column_end":62},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":2158}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":212728,"byte_end":212732,"line_start":473,"line_end":473,"column_start":26,"column_end":30},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":1816}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":213120,"byte_end":213124,"line_start":494,"line_end":494,"column_start":26,"column_end":30},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":1819}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":214012,"byte_end":214015,"line_start":535,"line_end":535,"column_start":33,"column_end":36},"kind":{"Impl":{"id":112}},"from":{"krate":5,"index":323},"to":{"krate":2,"index":1825}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":214156,"byte_end":214160,"line_start":542,"line_end":542,"column_start":17,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":1639}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":214194,"byte_end":214198,"line_start":544,"line_end":544,"column_start":30,"column_end":34},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":1634}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":214999,"byte_end":215003,"line_start":571,"line_end":571,"column_start":25,"column_end":29},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":1671}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":215195,"byte_end":215199,"line_start":578,"line_end":578,"column_start":18,"column_end":22},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":1660}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":215981,"byte_end":215985,"line_start":611,"line_end":611,"column_start":24,"column_end":28},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1032},"to":{"krate":18,"index":1680}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":216478,"byte_end":216489,"line_start":629,"line_end":629,"column_start":40,"column_end":51},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":693},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":217527,"byte_end":217534,"line_start":670,"line_end":670,"column_start":24,"column_end":31},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1037},"to":{"krate":18,"index":1680}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":217787,"byte_end":217794,"line_start":680,"line_end":680,"column_start":36,"column_end":43},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1037},"to":{"krate":18,"index":1192}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\impls.rs","byte_start":218020,"byte_end":218034,"line_start":688,"line_end":688,"column_start":40,"column_end":54},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":722},"to":{"krate":18,"index":1276}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":220688,"byte_end":220695,"line_start":18,"line_end":18,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2966},"to":{"krate":0,"index":742}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":231693,"byte_end":231694,"line_start":344,"line_end":344,"column_start":37,"column_end":38},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":756},"to":{"krate":0,"index":742}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":232700,"byte_end":232709,"line_start":377,"line_end":377,"column_start":35,"column_end":44},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1455},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\io.rs","byte_start":233120,"byte_end":233131,"line_start":393,"line_end":393,"column_start":35,"column_end":46},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1461},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\prefilter.rs","byte_start":242745,"byte_end":242759,"line_start":29,"line_end":29,"column_start":6,"column_end":20},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\prefilter.rs","byte_start":245879,"byte_end":245884,"line_start":116,"line_end":116,"column_start":6,"column_end":11},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\twoway.rs","byte_start":259678,"byte_end":259684,"line_start":51,"line_end":51,"column_start":10,"column_end":16},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\twoway.rs","byte_start":275426,"byte_end":275431,"line_start":491,"line_end":491,"column_start":6,"column_end":11},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\twoway.rs","byte_start":277999,"byte_end":278005,"line_start":557,"line_end":557,"column_start":6,"column_end":12},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\search\\twoway.rs","byte_start":283148,"byte_end":283158,"line_start":685,"line_end":685,"column_start":6,"column_end":16},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":301568,"byte_end":301577,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302320,"byte_end":302329,"line_start":64,"line_end":64,"column_start":23,"column_end":32},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1672},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":302636,"byte_end":302645,"line_start":78,"line_end":78,"column_start":34,"column_end":43},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1672},"to":{"krate":2,"index":4785}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":304738,"byte_end":304753,"line_start":126,"line_end":126,"column_start":10,"column_end":25},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1681},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":305562,"byte_end":305577,"line_start":156,"line_end":156,"column_start":23,"column_end":38},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1681},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\grapheme.rs","byte_start":306015,"byte_end":306030,"line_start":172,"line_end":172,"column_start":34,"column_end":49},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1681},"to":{"krate":2,"index":4785}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":313383,"byte_end":313392,"line_start":26,"line_end":26,"column_start":10,"column_end":19},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":314218,"byte_end":314227,"line_start":56,"line_end":56,"column_start":23,"column_end":32},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1692},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":315861,"byte_end":315876,"line_start":98,"line_end":98,"column_start":10,"column_end":25},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\sentence.rs","byte_start":316743,"byte_end":316758,"line_start":128,"line_end":128,"column_start":23,"column_end":38},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":321332,"byte_end":321337,"line_start":31,"line_end":31,"column_start":10,"column_end":15},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1711},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":322115,"byte_end":322120,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1711},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324139,"byte_end":324150,"line_start":106,"line_end":106,"column_start":10,"column_end":21},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1721},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":324972,"byte_end":324983,"line_start":137,"line_end":137,"column_start":23,"column_end":34},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1721},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":326396,"byte_end":326411,"line_start":175,"line_end":175,"column_start":10,"column_end":25},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1731},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":327278,"byte_end":327293,"line_start":208,"line_end":208,"column_start":23,"column_end":38},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1731},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":329249,"byte_end":329270,"line_start":255,"line_end":255,"column_start":10,"column_end":31},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1740},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\unicode\\word.rs","byte_start":330178,"byte_end":330199,"line_start":288,"line_end":288,"column_start":23,"column_end":44},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1740},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":337305,"byte_end":337310,"line_start":88,"line_end":88,"column_start":10,"column_end":15},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338062,"byte_end":338067,"line_start":118,"line_end":118,"column_start":23,"column_end":28},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1750},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":338353,"byte_end":338358,"line_start":132,"line_end":132,"column_start":34,"column_end":39},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1750},"to":{"krate":2,"index":4785}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":339786,"byte_end":339797,"line_start":169,"line_end":169,"column_start":10,"column_end":21},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":340594,"byte_end":340605,"line_start":199,"line_end":199,"column_start":23,"column_end":34},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1759},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":341022,"byte_end":341033,"line_start":215,"line_end":215,"column_start":34,"column_end":45},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1759},"to":{"krate":2,"index":4785}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":342424,"byte_end":342433,"line_start":260,"line_end":260,"column_start":10,"column_end":19},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":994},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":343486,"byte_end":343496,"line_start":289,"line_end":289,"column_start":23,"column_end":33},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1770},"to":{"krate":2,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":344877,"byte_end":344887,"line_start":331,"line_end":331,"column_start":42,"column_end":52},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1770},"to":{"krate":2,"index":5121}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":346728,"byte_end":346737,"line_start":387,"line_end":387,"column_start":6,"column_end":15},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":348084,"byte_end":348093,"line_start":427,"line_end":427,"column_start":23,"column_end":32},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1779},"to":{"krate":1,"index":1634}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.13\\src\\utf8.rs","byte_start":348187,"byte_end":348196,"line_start":433,"line_end":433,"column_start":23,"column_end":32},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":6081}}]}