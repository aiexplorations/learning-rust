{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9","program":"C:\\Users\\rajesh\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","regex_automata","C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=5222128a1d4d2f13","-C","extra-filename=-5222128a1d4d2f13","--out-dir","c:\\Users\\rajesh\\Documents\\learning-rust\\read_summarize_csv\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\rajesh\\Documents\\learning-rust\\read_summarize_csv\\target\\rls\\debug\\deps","--extern","byteorder=c:\\Users\\rajesh\\Documents\\learning-rust\\read_summarize_csv\\target\\rls\\debug\\deps\\libbyteorder-848e4eb6271469fb.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\rajesh\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\rajesh\\Documents\\learning-rust\\read_summarize_csv\\target\\rls\\debug\\deps\\libregex_automata-5222128a1d4d2f13.rmeta"},"prelude":{"crate_id":{"name":"regex_automata","disambiguator":[9931210620430180936,6639495573536296151]},"crate_root":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src","external_crates":[{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[18042673982934947978,12625110394568559395]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7915187584390589076,11757046858262610570]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[1324407439594145559,13485846882990707907]}},{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","num":4,"id":{"name":"byteorder","disambiguator":[11610964632004945481,16383394113034807985]}}],"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":0,"byte_end":15721,"line_start":1,"line_end":360,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":13930,"byte_end":13938,"line_start":299,"line_end":299,"column_start":16,"column_end":24},"alias_span":null,"name":"DenseDFA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":13953,"byte_end":13956,"line_start":300,"line_end":300,"column_start":14,"column_end":17},"alias_span":null,"name":"DFA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14032,"byte_end":14037,"line_start":303,"line_end":303,"column_start":16,"column_end":21},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14108,"byte_end":14117,"line_start":306,"line_end":306,"column_start":17,"column_end":26},"alias_span":null,"name":"SparseDFA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14137,"byte_end":14144,"line_start":307,"line_end":307,"column_start":19,"column_end":26},"alias_span":null,"name":"StateID","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14938,"byte_end":14939,"line_start":340,"line_end":340,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"DenseDFA, MASK_ANCHORED","parent":{"krate":0,"index":325}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14938,"byte_end":14939,"line_start":340,"line_end":340,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"SparseDFA","parent":{"krate":0,"index":327}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":0,"byte_end":15721,"line_start":1,"line_end":360,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":27},{"krate":0,"index":135},{"krate":0,"index":165},{"krate":0,"index":193},{"krate":0,"index":280},{"krate":0,"index":325},{"krate":0,"index":327}],"decl_id":null,"docs":"A low level regular expression library that uses deterministic finite automata.\nIt supports a rich syntax with Unicode support, has extensive options for\nconfiguring the best space vs time trade off for your use case and provides\nsupport for cheap deserialization of automata for use in `no_std` environments.","sig":null,"attributes":[{"value":"!\nA low level regular expression library that uses deterministic finite automata.\nIt supports a rich syntax with Unicode support, has extensive options for\nconfiguring the best space vs time trade off for your use case and provides\nsupport for cheap deserialization of automata for use in `no_std` environments.\n\n# Overview\n\nThis section gives a brief overview of the primary types in this crate:\n\n* A [`Regex`](struct.Regex.html) provides a way to search for matches of a\n  regular expression. This includes iterating over matches with both the start\n  and end positions of each match.\n* A [`RegexBuilder`](struct.RegexBuilder.html) provides a way configure many\n  compilation options for a regex.\n* A [`DenseDFA`](enum.DenseDFA.html) provides low level access to a DFA that\n  uses a dense representation (uses lots of space, but fast searching).\n* A [`SparseDFA`](enum.SparseDFA.html) provides the same API as a `DenseDFA`,\n  but uses a sparse representation (uses less space, but slower matching).\n* A [`DFA`](trait.DFA.html) trait that defines an interface that all DFAs must\n  implement.\n* Both dense DFAs and sparse DFAs support\n  [serialization to raw bytes](enum.DenseDFA.html#method.to_bytes_little_endian)\n  and\n  [cheap deserialization](enum.DenseDFA.html#method.from_bytes).\n\n# Example: basic regex searching\n\nThis example shows how to compile a regex using the default configuration\nand then use it to find matches in a byte string:\n\n```\nuse regex_automata::Regex;\n\nlet re = Regex::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\").unwrap();\nlet text = b\"2018-12-24 2016-10-08\";\nlet matches: Vec<(usize, usize)> = re.find_iter(text).collect();\nassert_eq!(matches, vec![(0, 10), (11, 21)]);\n```\n\n# Example: use sparse DFAs\n\nBy default, compiling a regex will use dense DFAs internally. This uses more\nmemory, but executes searches more quickly. If you can abide slower searches\n(somewhere around 3-5x), then sparse DFAs might make more sense since they can\nuse significantly less space.\n\nUsing sparse DFAs is as easy as using `Regex::new_sparse` instead of\n`Regex::new`:\n\n```\nuse regex_automata::Regex;\n\n# fn example() -> Result<(), regex_automata::Error> {\nlet re = Regex::new_sparse(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\").unwrap();\nlet text = b\"2018-12-24 2016-10-08\";\nlet matches: Vec<(usize, usize)> = re.find_iter(text).collect();\nassert_eq!(matches, vec![(0, 10), (11, 21)]);\n# Ok(()) }; example().unwrap()\n```\n\nIf you already have dense DFAs for some reason, they can be converted to sparse\nDFAs and used to build a new `Regex`. For example:\n\n```\nuse regex_automata::Regex;\n\n# fn example() -> Result<(), regex_automata::Error> {\nlet dense_re = Regex::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\").unwrap();\nlet sparse_re = Regex::from_dfas(\n    dense_re.forward().to_sparse()?,\n    dense_re.reverse().to_sparse()?,\n);\nlet text = b\"2018-12-24 2016-10-08\";\nlet matches: Vec<(usize, usize)> = sparse_re.find_iter(text).collect();\nassert_eq!(matches, vec![(0, 10), (11, 21)]);\n# Ok(()) }; example().unwrap()\n```\n\n# Example: deserialize a DFA\n\nThis shows how to first serialize a DFA into raw bytes, and then deserialize\nthose raw bytes back into a DFA. While this particular example is a bit\ncontrived, this same technique can be used in your program to deserialize a\nDFA at start up time or by memory mapping a file. In particular,\ndeserialization is guaranteed to be cheap because it will always be a constant\ntime operation.\n\n```\nuse regex_automata::{DenseDFA, Regex};\n\n# fn example() -> Result<(), regex_automata::Error> {\nlet re1 = Regex::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\").unwrap();\n// serialize both the forward and reverse DFAs, see note below\nlet fwd_bytes = re1.forward().to_u16()?.to_bytes_native_endian()?;\nlet rev_bytes = re1.reverse().to_u16()?.to_bytes_native_endian()?;\n// now deserialize both---we need to specify the correct type!\nlet fwd: DenseDFA<&[u16], u16> = unsafe { DenseDFA::from_bytes(&fwd_bytes) };\nlet rev: DenseDFA<&[u16], u16> = unsafe { DenseDFA::from_bytes(&rev_bytes) };\n// finally, reconstruct our regex\nlet re2 = Regex::from_dfas(fwd, rev);\n\n// we can use it like normal\nlet text = b\"2018-12-24 2016-10-08\";\nlet matches: Vec<(usize, usize)> = re2.find_iter(text).collect();\nassert_eq!(matches, vec![(0, 10), (11, 21)]);\n# Ok(()) }; example().unwrap()\n```\n\nThere are a few points worth noting here:\n\n* We need to extract the raw DFAs used by the regex and serialize those. You\n  can build the DFAs manually yourself using\n  [`dense::Builder`](dense/struct.Builder.html), but using the DFAs from a\n  `Regex` guarantees that the DFAs are built correctly.\n* We specifically convert the dense DFA to a representation that uses `u16`\n  for its state identifiers using\n  [`DenseDFA::to_u16`](enum.DenseDFA.html#method.to_u16). While this isn't\n  strictly necessary, if we skipped this step, then the serialized bytes would\n  use `usize` for state identifiers, which does not have a fixed size. Using\n  `u16` ensures that we can deserialize this DFA even on platforms with a\n  smaller pointer size. If our DFA is too big for `u16` state identifiers, then\n  one can use `u32` or `u64`.\n* To convert the DFA to raw bytes, we use the `to_bytes_native_endian`\n  method. In practice, you'll want to use either\n  [`DenseDFA::to_bytes_little_endian`](enum.DenseDFA.html#method.to_bytes_little_endian)\n  or\n  [`DenseDFA::to_bytes_big_endian`](enum.DenseDFA.html#method.to_bytes_big_endian),\n  depending on which platform you're deserializing your DFA from. If you intend\n  to deserialize on either platform, then you'll need to serialize both and\n  deserialize the right one depending on your target's endianness.\n* Deserializing a DFA requires the use of `unsafe` because the raw bytes must\n  be *trusted*. In particular, while some degree of sanity checks are\n  performed, nothing guarantees the integrity of the DFA's transition table\n  since deserialization is a constant time operation. Since searching with a\n  DFA must be able to follow transitions blindly for performance reasons,\n  giving incorrect bytes to the deserialization API can result in memory\n  unsafety.\n\nThe same process can be achieved with sparse DFAs as well:\n\n```\nuse regex_automata::{SparseDFA, Regex};\n\n# fn example() -> Result<(), regex_automata::Error> {\nlet re1 = Regex::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\").unwrap();\n// serialize both\nlet fwd_bytes = re1.forward().to_u16()?.to_sparse()?.to_bytes_native_endian()?;\nlet rev_bytes = re1.reverse().to_u16()?.to_sparse()?.to_bytes_native_endian()?;\n// now deserialize both---we need to specify the correct type!\nlet fwd: SparseDFA<&[u8], u16> = unsafe { SparseDFA::from_bytes(&fwd_bytes) };\nlet rev: SparseDFA<&[u8], u16> = unsafe { SparseDFA::from_bytes(&rev_bytes) };\n// finally, reconstruct our regex\nlet re2 = Regex::from_dfas(fwd, rev);\n\n// we can use it like normal\nlet text = b\"2018-12-24 2016-10-08\";\nlet matches: Vec<(usize, usize)> = re2.find_iter(text).collect();\nassert_eq!(matches, vec![(0, 10), (11, 21)]);\n# Ok(()) }; example().unwrap()\n```\n\nNote that unlike dense DFAs, sparse DFAs have no alignment requirements.\nConversely, dense DFAs must be be aligned to the same alignment as their\nstate identifier representation.\n\n# Support for `no_std`\n\nThis crate comes with a `std` feature that is enabled by default. When the\n`std` feature is enabled, the API of this crate will include the facilities\nnecessary for compiling, serializing, deserializing and searching with regular\nexpressions. When the `std` feature is disabled, the API of this crate will\nshrink such that it only includes the facilities necessary for deserializing\nand searching with regular expressions.\n\nThe intended workflow for `no_std` environments is thus as follows:\n\n* Write a program with the `std` feature that compiles and serializes a\n  regular expression. Serialization should only happen after first converting\n  the DFAs to use a fixed size state identifier instead of the default `usize`.\n  You may also need to serialize both little and big endian versions of each\n  DFA. (So that's 4 DFAs in total for each regex.)\n* In your `no_std` environment, follow the examples above for deserializing\n  your previously serialized DFAs into regexes. You can then search with them\n  as you would any regex.\n\nDeserialization can happen anywhere. For example, with bytes embedded into a\nbinary or with a file memory mapped at runtime.\n\nNote that the\n[`ucd-generate`](https://github.com/BurntSushi/ucd-generate)\ntool will do the first step for you with its `dfa` or `regex` sub-commands.\n\n# Syntax\n\nThis crate supports the same syntax as the `regex` crate, since they share the\nsame parser. You can find an exhaustive list of supported syntax in the\n[documentation for the `regex` crate](https://docs.rs/regex/1.1/regex/#syntax).\n\nCurrently, there are a couple limitations. In general, this crate does not\nsupport zero-width assertions, although they may be added in the future. This\nincludes:\n\n* Anchors such as `^`, `$`, `\\A` and `\\z`.\n* Word boundary assertions such as `\\b` and `\\B`.\n\nIt is possible to run a search that is anchored at the beginning of the input.\nTo do that, set the\n[`RegexBuilder::anchored`](struct.RegexBuilder.html#method.anchored)\noption when building a regex. By default, all searches are unanchored.\n\n# Differences with the regex crate\n\nThe main goal of the [`regex`](https://docs.rs/regex) crate is to serve as a\ngeneral purpose regular expression engine. It aims to automatically balance low\ncompile times, fast search times and low memory usage, while also providing\na convenient API for users. In contrast, this crate provides a lower level\nregular expression interface that is a bit less convenient while providing more\nexplicit control over memory usage and search times.\n\nHere are some specific negative differences:\n\n* **Compilation can take an exponential amount of time and space** in the size\n  of the regex pattern. While most patterns do not exhibit worst case\n  exponential time, such patterns do exist. For example, `[01]*1[01]{N}` will\n  build a DFA with `2^(N+1)` states. For this reason, untrusted patterns should\n  not be compiled with this library. (In the future, the API may expose an\n  option to return an error if the DFA gets too big.)\n* This crate does not support sub-match extraction, which can be achieved with\n  the regex crate's \"captures\" API. This may be added in the future, but is\n  unlikely.\n* While the regex crate doesn't necessarily sport fast compilation times, the\n  regexes in this crate are almost universally slow to compile, especially when\n  they contain large Unicode character classes. For example, on my system,\n  compiling `\\w{3}` with byte classes enabled takes just over 1 second and\n  almost 5MB of memory! (Compiling a sparse regex takes about the same time\n  but only uses about 500KB of memory.) Conversly, compiling the same regex\n  without Unicode support, e.g., `(?-u)\\w{3}`, takes under 1 millisecond and\n  less than 5KB of memory. For this reason, you should only use Unicode\n  character classes if you absolutely need them!\n* This crate does not support regex sets.\n* This crate does not support zero-width assertions such as `^`, `$`, `\\b` or\n  `\\B`.\n* As a lower level crate, this library does not do literal optimizations. In\n  exchange, you get predictable performance regardless of input. The\n  philosophy here is that literal optimizations should be applied at a higher\n  level, although there is no easy support for this in the ecosystem yet.\n* There is no `&str` API like in the regex crate. In this crate, all APIs\n  operate on `&[u8]`. By default, match indices are guaranteed to fall on\n  UTF-8 boundaries, unless\n  [`RegexBuilder::allow_invalid_utf8`](struct.RegexBuilder.html#method.allow_invalid_utf8)\n  is enabled.\n\nWith some of the downsides out of the way, here are some positive differences:\n\n* Both dense and sparse DFAs can be serialized to raw bytes, and then cheaply\n  deserialized. Deserialization always takes constant time since searching can\n  be performed directly on the raw serialized bytes of a DFA.\n* This crate was specifically designed so that the searching phase of a DFA has\n  minimal runtime requirements, and can therefore be used in `no_std`\n  environments. While `no_std` environments cannot compile regexes, they can\n  deserialize pre-compiled regexes.\n* Since this crate builds DFAs ahead of time, it will generally out-perform\n  the `regex` crate on equivalent tasks. The performance difference is likely\n  not large. However, because of a complex set of optimizations in the regex\n  crate (like literal optimizations), an accurate performance comparison may be\n  difficult to do.\n* Sparse DFAs provide a way to build a DFA ahead of time that sacrifices search\n  performance a small amount, but uses much less storage space. Potentially\n  even less than what the regex crate uses.\n* This crate exposes DFAs directly, such as\n  [`DenseDFA`](enum.DenseDFA.html) and [`SparseDFA`](enum.SparseDFA.html),\n  which enables one to do less work in some cases. For example, if you only\n  need the end of a match and not the start of a match, then you can use a DFA\n  directly without building a `Regex`, which always requires a second DFA to\n  find the start of a match.\n* Aside from choosing between dense and sparse DFAs, there are several options\n  for configuring the space usage vs search time trade off. These include\n  things like choosing a smaller state identifier representation, to\n  premultiplying state identifiers and splitting a DFA's alphabet into\n  equivalence classes. Finally, DFA minimization is also provided, but can\n  increase compilation times dramatically.\n*/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":0,"byte_end":13616,"line_start":1,"line_end":283,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":13618,"byte_end":13640,"line_start":285,"line_end":285,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":13675,"byte_end":13681,"line_start":286,"line_end":286,"column_start":35,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31570,"byte_end":31578,"line_start":144,"line_end":144,"column_start":5,"column_end":13},"name":"Standard","qualname":"::dense_imp::DenseDFA::Standard","value":"DenseDFA::Standard(Standard<T, S>)","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" A standard DFA that does not use premultiplication or byte classes.\n","sig":null,"attributes":[{"value":"/ A standard DFA that does not use premultiplication or byte classes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31494,"byte_end":31565,"line_start":143,"line_end":143,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32059,"byte_end":32068,"line_start":153,"line_end":153,"column_start":5,"column_end":14},"name":"ByteClass","qualname":"::dense_imp::DenseDFA::ByteClass","value":"DenseDFA::ByteClass(ByteClass<T, S>)","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" A DFA that shrinks its alphabet to a set of equivalence classes instead\n of using all possible byte values. Any two bytes belong to the same\n equivalence class if and only if they can be used interchangeably\n anywhere in the DFA while never discriminating between a match and a\n non-match.","sig":null,"attributes":[{"value":"/ A DFA that shrinks its alphabet to a set of equivalence classes instead","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31600,"byte_end":31675,"line_start":145,"line_end":145,"column_start":5,"column_end":80}},{"value":"/ of using all possible byte values. Any two bytes belong to the same","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31680,"byte_end":31751,"line_start":146,"line_end":146,"column_start":5,"column_end":76}},{"value":"/ equivalence class if and only if they can be used interchangeably","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31756,"byte_end":31825,"line_start":147,"line_end":147,"column_start":5,"column_end":74}},{"value":"/ anywhere in the DFA while never discriminating between a match and a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31830,"byte_end":31902,"line_start":148,"line_end":148,"column_start":5,"column_end":77}},{"value":"/ non-match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31907,"byte_end":31921,"line_start":149,"line_end":149,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31926,"byte_end":31929,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ This type of DFA can result in significant space reduction with a very","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31934,"byte_end":32008,"line_start":151,"line_end":151,"column_start":5,"column_end":79}},{"value":"/ small match time performance penalty.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32013,"byte_end":32054,"line_start":152,"line_end":152,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32455,"byte_end":32468,"line_start":161,"line_end":161,"column_start":5,"column_end":18},"name":"Premultiplied","qualname":"::dense_imp::DenseDFA::Premultiplied","value":"DenseDFA::Premultiplied(Premultiplied<T, S>)","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" A DFA that premultiplies all of its state identifiers in its\n transition table. This saves an instruction per byte at match time\n which improves search performance.","sig":null,"attributes":[{"value":"/ A DFA that premultiplies all of its state identifiers in its","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32091,"byte_end":32155,"line_start":154,"line_end":154,"column_start":5,"column_end":69}},{"value":"/ transition table. This saves an instruction per byte at match time","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32160,"byte_end":32230,"line_start":155,"line_end":155,"column_start":5,"column_end":75}},{"value":"/ which improves search performance.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32235,"byte_end":32273,"line_start":156,"line_end":156,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32278,"byte_end":32281,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ The only downside of premultiplication is that it may prevent one from","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32286,"byte_end":32360,"line_start":158,"line_end":158,"column_start":5,"column_end":79}},{"value":"/ using a smaller state identifier representation than you otherwise","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32365,"byte_end":32435,"line_start":159,"line_end":159,"column_start":5,"column_end":75}},{"value":"/ could.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32440,"byte_end":32450,"line_start":160,"line_end":160,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32612,"byte_end":32634,"line_start":164,"line_end":164,"column_start":5,"column_end":27},"name":"PremultipliedByteClass","qualname":"::dense_imp::DenseDFA::PremultipliedByteClass","value":"DenseDFA::PremultipliedByteClass(PremultipliedByteClass<T, S>)","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" The default configuration of a DFA, which uses byte classes and\n premultiplies its state identifiers.\n","sig":null,"attributes":[{"value":"/ The default configuration of a DFA, which uses byte classes and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32495,"byte_end":32562,"line_start":162,"line_end":162,"column_start":5,"column_end":72}},{"value":"/ premultiplies its state identifiers.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32567,"byte_end":32607,"line_start":163,"line_end":163,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32944,"byte_end":32959,"line_start":171,"line_end":171,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::dense_imp::DenseDFA::__Nonexhaustive","value":"DenseDFA::__Nonexhaustive","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32670,"byte_end":32724,"line_start":165,"line_end":165,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32729,"byte_end":32732,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32737,"byte_end":32807,"line_start":167,"line_end":167,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32812,"byte_end":32884,"line_start":168,"line_end":168,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32889,"byte_end":32920,"line_start":169,"line_end":169,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31452,"byte_end":31460,"line_start":142,"line_end":142,"column_start":10,"column_end":18},"name":"DenseDFA","qualname":"::dense_imp::DenseDFA","value":"DenseDFA::{Standard, ByteClass, Premultiplied, PremultipliedByteClass, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":352}],"decl_id":null,"docs":" A dense table-based deterministic finite automaton (DFA).","sig":null,"attributes":[{"value":"/ A dense table-based deterministic finite automaton (DFA).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":26542,"byte_end":26603,"line_start":48,"line_end":48,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":26604,"byte_end":26607,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ A dense DFA represents the core matching primitive in this crate. That is,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":26608,"byte_end":26686,"line_start":50,"line_end":50,"column_start":1,"column_end":79}},{"value":"/ logically, all DFAs have a single start state, one or more match states","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":26687,"byte_end":26762,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/ and a transition table that maps the current state and the current byte of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":26763,"byte_end":26841,"line_start":52,"line_end":52,"column_start":1,"column_end":79}},{"value":"/ input to the next state. A DFA can use this information to implement fast","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":26842,"byte_end":26919,"line_start":53,"line_end":53,"column_start":1,"column_end":78}},{"value":"/ searching. In particular, the use of a dense DFA generally makes the trade","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":26920,"byte_end":26998,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ off that match speed is the most valuable characteristic, even if building","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":26999,"byte_end":27077,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/ the regex may take significant time *and* space. As such, the processing","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27078,"byte_end":27154,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"/ of every byte of input is done with a small constant number of operations","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27155,"byte_end":27232,"line_start":57,"line_end":57,"column_start":1,"column_end":78}},{"value":"/ that does not vary with the pattern, its size or the size of the alphabet.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27233,"byte_end":27311,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/ If your needs don't line up with this trade off, then a dense DFA may not","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27312,"byte_end":27389,"line_start":59,"line_end":59,"column_start":1,"column_end":78}},{"value":"/ be an adequate solution to your problem.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27390,"byte_end":27434,"line_start":60,"line_end":60,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27435,"byte_end":27438,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ In contrast, a [sparse DFA](enum.SparseDFA.html) makes the opposite","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27439,"byte_end":27510,"line_start":62,"line_end":62,"column_start":1,"column_end":72}},{"value":"/ trade off: it uses less space but will execute a variable number of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27511,"byte_end":27582,"line_start":63,"line_end":63,"column_start":1,"column_end":72}},{"value":"/ instructions per byte at match time, which makes it slower for matching.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27583,"byte_end":27659,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27660,"byte_end":27663,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ A DFA can be built using the default configuration via the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27664,"byte_end":27726,"line_start":66,"line_end":66,"column_start":1,"column_end":63}},{"value":"/ [`DenseDFA::new`](enum.DenseDFA.html#method.new) constructor. Otherwise,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27727,"byte_end":27803,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/ one can configure various aspects via the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27804,"byte_end":27849,"line_start":68,"line_end":68,"column_start":1,"column_end":46}},{"value":"/ [`dense::Builder`](dense/struct.Builder.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27850,"byte_end":27900,"line_start":69,"line_end":69,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27901,"byte_end":27904,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ A single DFA fundamentally supports the following operations:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27905,"byte_end":27970,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27971,"byte_end":27974,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ 1. Detection of a match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":27975,"byte_end":28003,"line_start":73,"line_end":73,"column_start":1,"column_end":29}},{"value":"/ 2. Location of the end of the first possible match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28004,"byte_end":28059,"line_start":74,"line_end":74,"column_start":1,"column_end":56}},{"value":"/ 3. Location of the end of the leftmost-first match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28060,"byte_end":28115,"line_start":75,"line_end":75,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28116,"byte_end":28119,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ A notable absence from the above list of capabilities is the location of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28120,"byte_end":28196,"line_start":77,"line_end":77,"column_start":1,"column_end":77}},{"value":"/ the *start* of a match. In order to provide both the start and end of a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28197,"byte_end":28272,"line_start":78,"line_end":78,"column_start":1,"column_end":76}},{"value":"/ match, *two* DFAs are required. This functionality is provided by a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28273,"byte_end":28344,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"/ [`Regex`](struct.Regex.html), which can be built with its basic","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28345,"byte_end":28412,"line_start":80,"line_end":80,"column_start":1,"column_end":68}},{"value":"/ constructor, [`Regex::new`](struct.Regex.html#method.new), or with","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28413,"byte_end":28483,"line_start":81,"line_end":81,"column_start":1,"column_end":71}},{"value":"/ a [`RegexBuilder`](struct.RegexBuilder.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28484,"byte_end":28533,"line_start":82,"line_end":82,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28534,"byte_end":28537,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ # State size","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28538,"byte_end":28554,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28555,"byte_end":28558,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ A `DenseDFA` has two type parameters, `T` and `S`. `T` corresponds to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28559,"byte_end":28632,"line_start":86,"line_end":86,"column_start":1,"column_end":74}},{"value":"/ the type of the DFA's transition table while `S` corresponds to the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28633,"byte_end":28704,"line_start":87,"line_end":87,"column_start":1,"column_end":72}},{"value":"/ representation used for the DFA's state identifiers as described by the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28705,"byte_end":28780,"line_start":88,"line_end":88,"column_start":1,"column_end":76}},{"value":"/ [`StateID`](trait.StateID.html) trait. This type parameter is typically","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28781,"byte_end":28856,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ `usize`, but other valid choices provided by this crate include `u8`,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28857,"byte_end":28930,"line_start":90,"line_end":90,"column_start":1,"column_end":74}},{"value":"/ `u16`, `u32` and `u64`. The primary reason for choosing a different state","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":28931,"byte_end":29008,"line_start":91,"line_end":91,"column_start":1,"column_end":78}},{"value":"/ identifier representation than the default is to reduce the amount of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29009,"byte_end":29082,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/ memory used by a DFA. Note though, that if the chosen representation cannot","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29083,"byte_end":29162,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ accommodate the size of your DFA, then building the DFA will fail and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29163,"byte_end":29236,"line_start":94,"line_end":94,"column_start":1,"column_end":74}},{"value":"/ return an error.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29237,"byte_end":29257,"line_start":95,"line_end":95,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29258,"byte_end":29261,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ While the reduction in heap memory used by a DFA is one reason for choosing","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29262,"byte_end":29341,"line_start":97,"line_end":97,"column_start":1,"column_end":80}},{"value":"/ a smaller state identifier representation, another possible reason is for","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29342,"byte_end":29419,"line_start":98,"line_end":98,"column_start":1,"column_end":78}},{"value":"/ decreasing the serialization size of a DFA, as returned by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29420,"byte_end":29482,"line_start":99,"line_end":99,"column_start":1,"column_end":63}},{"value":"/ [`to_bytes_little_endian`](enum.DenseDFA.html#method.to_bytes_little_endian),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29483,"byte_end":29564,"line_start":100,"line_end":100,"column_start":1,"column_end":82}},{"value":"/ [`to_bytes_big_endian`](enum.DenseDFA.html#method.to_bytes_big_endian)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29565,"byte_end":29639,"line_start":101,"line_end":101,"column_start":1,"column_end":75}},{"value":"/ or","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29640,"byte_end":29646,"line_start":102,"line_end":102,"column_start":1,"column_end":7}},{"value":"/ [`to_bytes_native_endian`](enum.DenseDFA.html#method.to_bytes_native_endian).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29647,"byte_end":29728,"line_start":103,"line_end":103,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29729,"byte_end":29732,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ The type of the transition table is typically either `Vec<S>` or `&[S]`,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29733,"byte_end":29809,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"/ depending on where the transition table is stored.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29810,"byte_end":29864,"line_start":106,"line_end":106,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29865,"byte_end":29868,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ # Variants","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29869,"byte_end":29883,"line_start":108,"line_end":108,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29884,"byte_end":29887,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ This DFA is defined as a non-exhaustive enumeration of different types of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29888,"byte_end":29965,"line_start":110,"line_end":110,"column_start":1,"column_end":78}},{"value":"/ dense DFAs. All of these dense DFAs use the same internal representation","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":29966,"byte_end":30042,"line_start":111,"line_end":111,"column_start":1,"column_end":77}},{"value":"/ for the transition table, but they vary in how the transition table is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30043,"byte_end":30117,"line_start":112,"line_end":112,"column_start":1,"column_end":75}},{"value":"/ read. A DFA's specific variant depends on the configuration options set via","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30118,"byte_end":30197,"line_start":113,"line_end":113,"column_start":1,"column_end":80}},{"value":"/ [`dense::Builder`](dense/struct.Builder.html). The default variant is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30198,"byte_end":30271,"line_start":114,"line_end":114,"column_start":1,"column_end":74}},{"value":"/ `PremultipliedByteClass`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30272,"byte_end":30301,"line_start":115,"line_end":115,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30302,"byte_end":30305,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ # The `DFA` trait","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30306,"byte_end":30327,"line_start":117,"line_end":117,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30328,"byte_end":30331,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ This type implements the [`DFA`](trait.DFA.html) trait, which means it","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30332,"byte_end":30406,"line_start":119,"line_end":119,"column_start":1,"column_end":75}},{"value":"/ can be used for searching. For example:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30407,"byte_end":30450,"line_start":120,"line_end":120,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30451,"byte_end":30454,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30455,"byte_end":30462,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"/ use regex_automata::{DFA, DenseDFA};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30463,"byte_end":30503,"line_start":123,"line_end":123,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30504,"byte_end":30507,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30508,"byte_end":30565,"line_start":125,"line_end":125,"column_start":1,"column_end":58}},{"value":"/ let dfa = DenseDFA::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30566,"byte_end":30608,"line_start":126,"line_end":126,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(Some(8), dfa.find(b\"foo12345\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30609,"byte_end":30656,"line_start":127,"line_end":127,"column_start":1,"column_end":48}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30657,"byte_end":30691,"line_start":128,"line_end":128,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30692,"byte_end":30699,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30700,"byte_end":30703,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ The `DFA` trait also provides an assortment of other lower level methods","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30704,"byte_end":30780,"line_start":131,"line_end":131,"column_start":1,"column_end":77}},{"value":"/ for DFAs, such as `start_state` and `next_state`. While these are correctly","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30781,"byte_end":30860,"line_start":132,"line_end":132,"column_start":1,"column_end":80}},{"value":"/ implemented, it is an anti-pattern to use them in performance sensitive","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30861,"byte_end":30936,"line_start":133,"line_end":133,"column_start":1,"column_end":76}},{"value":"/ code on the `DenseDFA` type directly. Namely, each implementation requires","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":30937,"byte_end":31015,"line_start":134,"line_end":134,"column_start":1,"column_end":79}},{"value":"/ a branch to determine which type of dense DFA is being used. Instead,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31016,"byte_end":31089,"line_start":135,"line_end":135,"column_start":1,"column_end":74}},{"value":"/ this branch should be pushed up a layer in the code since walking the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31090,"byte_end":31163,"line_start":136,"line_end":136,"column_start":1,"column_end":74}},{"value":"/ transitions of a DFA is usually a hot path. If you do need to use these","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31164,"byte_end":31239,"line_start":137,"line_end":137,"column_start":1,"column_end":76}},{"value":"/ lower level methods in performance critical code, then you should match on","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31240,"byte_end":31318,"line_start":138,"line_end":138,"column_start":1,"column_end":79}},{"value":"/ the variants of this DFA and use each variant's implementation of the `DFA`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31319,"byte_end":31398,"line_start":139,"line_end":139,"column_start":1,"column_end":80}},{"value":"/ trait directly.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":31399,"byte_end":31418,"line_start":140,"line_end":140,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":35449,"byte_end":35455,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<DenseDFA<T, S>>::as_ref","value":"fn <'a> (&'a self) -> DenseDFA<&'a [S], S>","parent":null,"children":[],"decl_id":null,"docs":" Cheaply return a borrowed version of this dense DFA. Specifically, the\n DFA returned always uses `&[S]` for its transition table while keeping\n the same state identifier representation.\n","sig":null,"attributes":[{"value":"/ Cheaply return a borrowed version of this dense DFA. Specifically, the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":35234,"byte_end":35308,"line_start":241,"line_end":241,"column_start":5,"column_end":79}},{"value":"/ DFA returned always uses `&[S]` for its transition table while keeping","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":35313,"byte_end":35387,"line_start":242,"line_end":242,"column_start":5,"column_end":79}},{"value":"/ the same state identifier representation.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":35392,"byte_end":35437,"line_start":243,"line_end":243,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":37588,"byte_end":37600,"line_start":297,"line_end":297,"column_start":12,"column_end":24},"name":"memory_usage","qualname":"<DenseDFA<T, S>>::memory_usage","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory usage, in bytes, of this DFA.","sig":null,"attributes":[{"value":"/ Returns the memory usage, in bytes, of this DFA.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":37205,"byte_end":37257,"line_start":289,"line_end":289,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":37262,"byte_end":37265,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ The memory usage is computed based on the number of bytes used to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":37270,"byte_end":37339,"line_start":291,"line_end":291,"column_start":5,"column_end":74}},{"value":"/ represent this DFA's transition table. This corresponds to heap memory","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":37344,"byte_end":37418,"line_start":292,"line_end":292,"column_start":5,"column_end":79}},{"value":"/ usage.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":37423,"byte_end":37433,"line_start":293,"line_end":293,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":37438,"byte_end":37441,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This does **not** include the stack size used up by this DFA. To","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":37446,"byte_end":37514,"line_start":295,"line_end":295,"column_start":5,"column_end":73}},{"value":"/ compute that, used `std::mem::size_of::<DenseDFA>()`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":37519,"byte_end":37576,"line_start":296,"line_end":296,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47459,"byte_end":47469,"line_start":518,"line_end":518,"column_start":19,"column_end":29},"name":"from_bytes","qualname":"<DenseDFA<&'a [S], S>>::from_bytes","value":"fn (buf: &'a [u8]) -> DenseDFA<&'a [S], S>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a DFA with a specific state identifier representation.","sig":null,"attributes":[{"value":"/ Deserialize a DFA with a specific state identifier representation.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44310,"byte_end":44380,"line_start":455,"line_end":455,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44385,"byte_end":44388,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Deserializing a DFA using this routine will never allocate heap memory.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44393,"byte_end":44468,"line_start":457,"line_end":457,"column_start":5,"column_end":80}},{"value":"/ This is also guaranteed to be a constant time operation that does not","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44473,"byte_end":44546,"line_start":458,"line_end":458,"column_start":5,"column_end":78}},{"value":"/ vary with the size of the DFA.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44551,"byte_end":44585,"line_start":459,"line_end":459,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44590,"byte_end":44593,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ The bytes given should be generated by the serialization of a DFA with","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44598,"byte_end":44672,"line_start":461,"line_end":461,"column_start":5,"column_end":79}},{"value":"/ either the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44677,"byte_end":44691,"line_start":462,"line_end":462,"column_start":5,"column_end":19}},{"value":"/ [`to_bytes_little_endian`](enum.DenseDFA.html#method.to_bytes_little_endian)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44696,"byte_end":44776,"line_start":463,"line_end":463,"column_start":5,"column_end":85}},{"value":"/ method or the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44781,"byte_end":44798,"line_start":464,"line_end":464,"column_start":5,"column_end":22}},{"value":"/ [`to_bytes_big_endian`](enum.DenseDFA.html#method.to_bytes_big_endian)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44803,"byte_end":44877,"line_start":465,"line_end":465,"column_start":5,"column_end":79}},{"value":"/ endian, depending on the endianness of the machine you are","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44882,"byte_end":44944,"line_start":466,"line_end":466,"column_start":5,"column_end":67}},{"value":"/ deserializing this DFA from.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44949,"byte_end":44981,"line_start":467,"line_end":467,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44986,"byte_end":44989,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ If the state identifier representation is `usize`, then deserialization","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44994,"byte_end":45069,"line_start":469,"line_end":469,"column_start":5,"column_end":80}},{"value":"/ is dependent on the pointer size. For this reason, it is best to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45074,"byte_end":45142,"line_start":470,"line_end":470,"column_start":5,"column_end":73}},{"value":"/ serialize DFAs using a fixed size representation for your state","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45147,"byte_end":45214,"line_start":471,"line_end":471,"column_start":5,"column_end":72}},{"value":"/ identifiers, such as `u8`, `u16`, `u32` or `u64`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45219,"byte_end":45272,"line_start":472,"line_end":472,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45277,"byte_end":45280,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45285,"byte_end":45297,"line_start":474,"line_end":474,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45302,"byte_end":45305,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ The bytes given should be *trusted*. In particular, if the bytes","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45310,"byte_end":45378,"line_start":476,"line_end":476,"column_start":5,"column_end":73}},{"value":"/ are not a valid serialization of a DFA, or if the given bytes are","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45383,"byte_end":45452,"line_start":477,"line_end":477,"column_start":5,"column_end":74}},{"value":"/ not aligned to an 8 byte boundary, or if the endianness of the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45457,"byte_end":45523,"line_start":478,"line_end":478,"column_start":5,"column_end":71}},{"value":"/ serialized bytes is different than the endianness of the machine that","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45528,"byte_end":45601,"line_start":479,"line_end":479,"column_start":5,"column_end":78}},{"value":"/ is deserializing the DFA, then this routine will panic. Moreover, it is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45606,"byte_end":45681,"line_start":480,"line_end":480,"column_start":5,"column_end":80}},{"value":"/ possible for this deserialization routine to succeed even if the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45686,"byte_end":45760,"line_start":481,"line_end":481,"column_start":5,"column_end":79}},{"value":"/ bytes do not represent a valid serialized dense DFA.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45765,"byte_end":45821,"line_start":482,"line_end":482,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45826,"byte_end":45829,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45834,"byte_end":45846,"line_start":484,"line_end":484,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45851,"byte_end":45854,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ This routine is unsafe because it permits callers to provide an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45859,"byte_end":45926,"line_start":486,"line_end":486,"column_start":5,"column_end":72}},{"value":"/ arbitrary transition table with possibly incorrect transitions. While","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":45931,"byte_end":46004,"line_start":487,"line_end":487,"column_start":5,"column_end":78}},{"value":"/ the various serialization routines will never return an incorrect","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46009,"byte_end":46078,"line_start":488,"line_end":488,"column_start":5,"column_end":74}},{"value":"/ transition table, there is no guarantee that the bytes provided here","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46083,"byte_end":46155,"line_start":489,"line_end":489,"column_start":5,"column_end":77}},{"value":"/ are correct. While deserialization does many checks (as documented","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46160,"byte_end":46230,"line_start":490,"line_end":490,"column_start":5,"column_end":75}},{"value":"/ above in the panic conditions), this routine does not check that the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46235,"byte_end":46307,"line_start":491,"line_end":491,"column_start":5,"column_end":77}},{"value":"/ transition table is correct. Given an incorrect transition table, it is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46312,"byte_end":46387,"line_start":492,"line_end":492,"column_start":5,"column_end":80}},{"value":"/ possible for the search routines to access out-of-bounds memory because","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46392,"byte_end":46467,"line_start":493,"line_end":493,"column_start":5,"column_end":80}},{"value":"/ of explicit bounds check elision.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46472,"byte_end":46509,"line_start":494,"line_end":494,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46514,"byte_end":46517,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46522,"byte_end":46535,"line_start":496,"line_end":496,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46540,"byte_end":46543,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ This example shows how to serialize a DFA to raw bytes, deserialize it","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46548,"byte_end":46622,"line_start":498,"line_end":498,"column_start":5,"column_end":79}},{"value":"/ and then use it for searching. Note that we first convert the DFA to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46627,"byte_end":46699,"line_start":499,"line_end":499,"column_start":5,"column_end":77}},{"value":"/ using `u16` for its state identifier representation before serializing","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46704,"byte_end":46778,"line_start":500,"line_end":500,"column_start":5,"column_end":79}},{"value":"/ it. While this isn't strictly necessary, it's good practice in order to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46783,"byte_end":46858,"line_start":501,"line_end":501,"column_start":5,"column_end":80}},{"value":"/ decrease the size of the DFA and to avoid platform specific pitfalls","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46863,"byte_end":46935,"line_start":502,"line_end":502,"column_start":5,"column_end":77}},{"value":"/ such as differing pointer sizes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46940,"byte_end":46976,"line_start":503,"line_end":503,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46981,"byte_end":46984,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":46989,"byte_end":46996,"line_start":505,"line_end":505,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::{DFA, DenseDFA};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47001,"byte_end":47041,"line_start":506,"line_end":506,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47046,"byte_end":47049,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47054,"byte_end":47111,"line_start":508,"line_end":508,"column_start":5,"column_end":62}},{"value":"/ let initial = DenseDFA::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47116,"byte_end":47162,"line_start":509,"line_end":509,"column_start":5,"column_end":51}},{"value":"/ let bytes = initial.to_u16()?.to_bytes_native_endian()?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47167,"byte_end":47227,"line_start":510,"line_end":510,"column_start":5,"column_end":65}},{"value":"/ let dfa: DenseDFA<&[u16], u16> = unsafe {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47232,"byte_end":47277,"line_start":511,"line_end":511,"column_start":5,"column_end":50}},{"value":"/     DenseDFA::from_bytes(&bytes)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47282,"byte_end":47318,"line_start":512,"line_end":512,"column_start":5,"column_end":41}},{"value":"/ };","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47323,"byte_end":47329,"line_start":513,"line_end":513,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47334,"byte_end":47337,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(8), dfa.find(b\"foo12345\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47342,"byte_end":47389,"line_start":515,"line_end":515,"column_start":5,"column_end":52}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47394,"byte_end":47428,"line_start":516,"line_end":516,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":47433,"byte_end":47440,"line_start":517,"line_end":517,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":52927,"byte_end":52935,"line_start":673,"line_end":673,"column_start":12,"column_end":20},"name":"Standard","qualname":"::dense_imp::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A standard dense DFA that does not use premultiplication or byte classes.","sig":null,"attributes":[{"value":"/ A standard dense DFA that does not use premultiplication or byte classes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":52371,"byte_end":52448,"line_start":664,"line_end":664,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":52449,"byte_end":52452,"line_start":665,"line_end":665,"column_start":1,"column_end":4}},{"value":"/ Generally, it isn't necessary to use this type directly, since a `DenseDFA`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":52453,"byte_end":52532,"line_start":666,"line_end":666,"column_start":1,"column_end":80}},{"value":"/ can be used for searching directly. One possible reason why one might want","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":52533,"byte_end":52611,"line_start":667,"line_end":667,"column_start":1,"column_end":79}},{"value":"/ to use this type directly is if you are implementing your own search","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":52612,"byte_end":52684,"line_start":668,"line_end":668,"column_start":1,"column_end":73}},{"value":"/ routines by walking a DFA's transitions directly. In that case, you'll want","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":52685,"byte_end":52764,"line_start":669,"line_end":669,"column_start":1,"column_end":80}},{"value":"/ to use this type (or any of the other DFA variant types) directly, since","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":52765,"byte_end":52841,"line_start":670,"line_end":670,"column_start":1,"column_end":77}},{"value":"/ they implement `next_state` more efficiently.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":52842,"byte_end":52891,"line_start":671,"line_end":671,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54865,"byte_end":54874,"line_start":733,"line_end":733,"column_start":12,"column_end":21},"name":"ByteClass","qualname":"::dense_imp::ByteClass","value":"","parent":null,"children":[],"decl_id":null,"docs":" A dense DFA that shrinks its alphabet.","sig":null,"attributes":[{"value":"/ A dense DFA that shrinks its alphabet.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":53912,"byte_end":53954,"line_start":716,"line_end":716,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":53955,"byte_end":53958,"line_start":717,"line_end":717,"column_start":1,"column_end":4}},{"value":"/ Alphabet shrinking is achieved by using a set of equivalence classes","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":53959,"byte_end":54031,"line_start":718,"line_end":718,"column_start":1,"column_end":73}},{"value":"/ instead of using all possible byte values. Any two bytes belong to the same","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54032,"byte_end":54111,"line_start":719,"line_end":719,"column_start":1,"column_end":80}},{"value":"/ equivalence class if and only if they can be used interchangeably anywhere","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54112,"byte_end":54190,"line_start":720,"line_end":720,"column_start":1,"column_end":79}},{"value":"/ in the DFA while never discriminating between a match and a non-match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54191,"byte_end":54265,"line_start":721,"line_end":721,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54266,"byte_end":54269,"line_start":722,"line_end":722,"column_start":1,"column_end":4}},{"value":"/ This type of DFA can result in significant space reduction with a very","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54270,"byte_end":54344,"line_start":723,"line_end":723,"column_start":1,"column_end":75}},{"value":"/ small match time performance penalty.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54345,"byte_end":54386,"line_start":724,"line_end":724,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54387,"byte_end":54390,"line_start":725,"line_end":725,"column_start":1,"column_end":4}},{"value":"/ Generally, it isn't necessary to use this type directly, since a `DenseDFA`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54391,"byte_end":54470,"line_start":726,"line_end":726,"column_start":1,"column_end":80}},{"value":"/ can be used for searching directly. One possible reason why one might want","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54471,"byte_end":54549,"line_start":727,"line_end":727,"column_start":1,"column_end":79}},{"value":"/ to use this type directly is if you are implementing your own search","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54550,"byte_end":54622,"line_start":728,"line_end":728,"column_start":1,"column_end":73}},{"value":"/ routines by walking a DFA's transitions directly. In that case, you'll want","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54623,"byte_end":54702,"line_start":729,"line_end":729,"column_start":1,"column_end":80}},{"value":"/ to use this type (or any of the other DFA variant types) directly, since","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54703,"byte_end":54779,"line_start":730,"line_end":730,"column_start":1,"column_end":77}},{"value":"/ they implement `next_state` more efficiently.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54780,"byte_end":54829,"line_start":731,"line_end":731,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56812,"byte_end":56825,"line_start":794,"line_end":794,"column_start":12,"column_end":25},"name":"Premultiplied","qualname":"::dense_imp::Premultiplied","value":"","parent":null,"children":[],"decl_id":null,"docs":" A dense DFA that premultiplies all of its state identifiers in its\n transition table.","sig":null,"attributes":[{"value":"/ A dense DFA that premultiplies all of its state identifiers in its","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":55988,"byte_end":56058,"line_start":778,"line_end":778,"column_start":1,"column_end":71}},{"value":"/ transition table.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56059,"byte_end":56080,"line_start":779,"line_end":779,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56081,"byte_end":56084,"line_start":780,"line_end":780,"column_start":1,"column_end":4}},{"value":"/ This saves an instruction per byte at match time which improves search","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56085,"byte_end":56159,"line_start":781,"line_end":781,"column_start":1,"column_end":75}},{"value":"/ performance.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56160,"byte_end":56176,"line_start":782,"line_end":782,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56177,"byte_end":56180,"line_start":783,"line_end":783,"column_start":1,"column_end":4}},{"value":"/ The only downside of premultiplication is that it may prevent one from","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56181,"byte_end":56255,"line_start":784,"line_end":784,"column_start":1,"column_end":75}},{"value":"/ using a smaller state identifier representation than you otherwise could.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56256,"byte_end":56333,"line_start":785,"line_end":785,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56334,"byte_end":56337,"line_start":786,"line_end":786,"column_start":1,"column_end":4}},{"value":"/ Generally, it isn't necessary to use this type directly, since a `DenseDFA`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56338,"byte_end":56417,"line_start":787,"line_end":787,"column_start":1,"column_end":80}},{"value":"/ can be used for searching directly. One possible reason why one might want","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56418,"byte_end":56496,"line_start":788,"line_end":788,"column_start":1,"column_end":79}},{"value":"/ to use this type directly is if you are implementing your own search","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56497,"byte_end":56569,"line_start":789,"line_end":789,"column_start":1,"column_end":73}},{"value":"/ routines by walking a DFA's transitions directly. In that case, you'll want","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56570,"byte_end":56649,"line_start":790,"line_end":790,"column_start":1,"column_end":80}},{"value":"/ to use this type (or any of the other DFA variant types) directly, since","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56650,"byte_end":56726,"line_start":791,"line_end":791,"column_start":1,"column_end":77}},{"value":"/ they implement `next_state` more efficiently.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56727,"byte_end":56776,"line_start":792,"line_end":792,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":58370,"byte_end":58392,"line_start":847,"line_end":847,"column_start":12,"column_end":34},"name":"PremultipliedByteClass","qualname":"::dense_imp::PremultipliedByteClass","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default configuration of a dense DFA, which uses byte classes and\n premultiplies its state identifiers.","sig":null,"attributes":[{"value":"/ The default configuration of a dense DFA, which uses byte classes and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":57777,"byte_end":57850,"line_start":837,"line_end":837,"column_start":1,"column_end":74}},{"value":"/ premultiplies its state identifiers.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":57851,"byte_end":57891,"line_start":838,"line_end":838,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":57892,"byte_end":57895,"line_start":839,"line_end":839,"column_start":1,"column_end":4}},{"value":"/ Generally, it isn't necessary to use this type directly, since a `DenseDFA`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":57896,"byte_end":57975,"line_start":840,"line_end":840,"column_start":1,"column_end":80}},{"value":"/ can be used for searching directly. One possible reason why one might want","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":57976,"byte_end":58054,"line_start":841,"line_end":841,"column_start":1,"column_end":79}},{"value":"/ to use this type directly is if you are implementing your own search","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":58055,"byte_end":58127,"line_start":842,"line_end":842,"column_start":1,"column_end":73}},{"value":"/ routines by walking a DFA's transitions directly. In that case, you'll want","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":58128,"byte_end":58207,"line_start":843,"line_end":843,"column_start":1,"column_end":80}},{"value":"/ to use this type (or any of the other DFA variant types) directly, since","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":58208,"byte_end":58284,"line_start":844,"line_end":844,"column_start":1,"column_end":77}},{"value":"/ they implement `next_state` more efficiently.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":58285,"byte_end":58334,"line_start":845,"line_end":845,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116261,"byte_end":116264,"line_start":19,"line_end":19,"column_start":11,"column_end":14},"name":"DFA","qualname":"::dfa::DFA","value":"DFA","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"decl_id":null,"docs":" A trait describing the interface of a deterministic finite automaton (DFA).","sig":null,"attributes":[{"value":"/ A trait describing the interface of a deterministic finite automaton (DFA).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115356,"byte_end":115435,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115436,"byte_end":115439,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Every DFA has exactly one start state and at least one dead state (which","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115440,"byte_end":115516,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/ may be the same, as in the case of an empty DFA). In all cases, a state","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115517,"byte_end":115592,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ identifier of `0` must be a dead state such that `DFA::is_dead_state(0)`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115593,"byte_end":115669,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ always returns `true`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115670,"byte_end":115696,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115697,"byte_end":115700,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Every DFA also has zero or more match states, such that","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115701,"byte_end":115760,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ `DFA::is_match_state(id)` returns `true` if and only if `id` corresponds to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115761,"byte_end":115840,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ a match state.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115841,"byte_end":115859,"line_start":12,"line_end":12,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115860,"byte_end":115863,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ In general, users of this trait likely will only need to use the search","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115864,"byte_end":115939,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ routines such as `is_match`, `shortest_match`, `find` or `rfind`. The other","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":115940,"byte_end":116019,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ methods are lower level and are used for walking the transitions of a DFA","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116020,"byte_end":116097,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ manually. In particular, the aforementioned search routines are implemented","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116098,"byte_end":116177,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ generically in terms of the lower level transition walking routines.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116178,"byte_end":116250,"line_start":18,"line_end":18,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116423,"byte_end":116425,"line_start":23,"line_end":23,"column_start":10,"column_end":12},"name":"ID","qualname":"::dfa::DFA::ID","value":"type ID: StateID;","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" The representation used for state identifiers in this DFA.","sig":null,"attributes":[{"value":"/ The representation used for state identifiers in this DFA.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116271,"byte_end":116333,"line_start":20,"line_end":20,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116338,"byte_end":116341,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Typically, this is one of `u8`, `u16`, `u32`, `u64` or `usize`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116346,"byte_end":116413,"line_start":22,"line_end":22,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116501,"byte_end":116512,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"start_state","qualname":"::dfa::DFA::start_state","value":"fn (&self) -> Self::ID","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Return the identifier of this DFA's start state.\n","sig":null,"attributes":[{"value":"/ Return the identifier of this DFA's start state.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116441,"byte_end":116493,"line_start":25,"line_end":25,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116636,"byte_end":116650,"line_start":30,"line_end":30,"column_start":8,"column_end":22},"name":"is_match_state","qualname":"::dfa::DFA::is_match_state","value":"fn (&self, id: Self::ID) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns true if and only if the given identifier corresponds to a match\n state.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if the given identifier corresponds to a match","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116538,"byte_end":116613,"line_start":28,"line_end":28,"column_start":5,"column_end":80}},{"value":"/ state.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116618,"byte_end":116628,"line_start":29,"line_end":29,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116885,"byte_end":116898,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"is_dead_state","qualname":"::dfa::DFA::is_dead_state","value":"fn (&self, id: Self::ID) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns true if and only if the given identifier corresponds to a dead\n state. When a DFA enters a dead state, it is impossible to leave and\n thus can never lead to a match.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if the given identifier corresponds to a dead","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116686,"byte_end":116760,"line_start":32,"line_end":32,"column_start":5,"column_end":79}},{"value":"/ state. When a DFA enters a dead state, it is impossible to leave and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116765,"byte_end":116837,"line_start":33,"line_end":33,"column_start":5,"column_end":77}},{"value":"/ thus can never lead to a match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116842,"byte_end":116877,"line_start":34,"line_end":34,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117385,"byte_end":117407,"line_start":45,"line_end":45,"column_start":8,"column_end":30},"name":"is_match_or_dead_state","qualname":"::dfa::DFA::is_match_or_dead_state","value":"fn (&self, id: Self::ID) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns true if and only if the given identifier corresponds to either\n a dead state or a match state, such that one of `is_match_state(id)`\n or `is_dead_state(id)` must return true.","sig":null,"attributes":[{"value":"/ Returns true if and only if the given identifier corresponds to either","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":116934,"byte_end":117008,"line_start":37,"line_end":37,"column_start":5,"column_end":79}},{"value":"/ a dead state or a match state, such that one of `is_match_state(id)`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117013,"byte_end":117085,"line_start":38,"line_end":38,"column_start":5,"column_end":77}},{"value":"/ or `is_dead_state(id)` must return true.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117090,"byte_end":117134,"line_start":39,"line_end":39,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117139,"byte_end":117142,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ Depending on the implementation of the DFA, this routine can be used","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117147,"byte_end":117219,"line_start":41,"line_end":41,"column_start":5,"column_end":77}},{"value":"/ to save a branch in the core matching loop. Nevertheless,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117224,"byte_end":117285,"line_start":42,"line_end":42,"column_start":5,"column_end":66}},{"value":"/ `is_match_state(id) || is_dead_state(id)` is always a valid","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117290,"byte_end":117353,"line_start":43,"line_end":43,"column_start":5,"column_end":68}},{"value":"/ implementation.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117358,"byte_end":117377,"line_start":44,"line_end":44,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117614,"byte_end":117625,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"is_anchored","qualname":"::dfa::DFA::is_anchored","value":"fn (&self) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns true if and only if this DFA is anchored.","sig":null,"attributes":[{"value":"/ Returns true if and only if this DFA is anchored.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117443,"byte_end":117496,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117501,"byte_end":117504,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ When a DFA is anchored, it is only allowed to report matches that","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117509,"byte_end":117578,"line_start":49,"line_end":49,"column_start":5,"column_end":74}},{"value":"/ start at index `0`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117583,"byte_end":117606,"line_start":50,"line_end":50,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117877,"byte_end":117887,"line_start":56,"line_end":56,"column_start":8,"column_end":18},"name":"next_state","qualname":"::dfa::DFA::next_state","value":"fn (&self, current: Self::ID, input: u8) -> Self::ID","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Given the current state that this DFA is in and the next input byte,\n this method returns the identifier of the next state. The identifier\n returned is always valid, but it may correspond to a dead state.\n","sig":null,"attributes":[{"value":"/ Given the current state that this DFA is in and the next input byte,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117647,"byte_end":117719,"line_start":53,"line_end":53,"column_start":5,"column_end":77}},{"value":"/ this method returns the identifier of the next state. The identifier","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117724,"byte_end":117796,"line_start":54,"line_end":54,"column_start":5,"column_end":77}},{"value":"/ returned is always valid, but it may correspond to a dead state.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117801,"byte_end":117869,"line_start":55,"line_end":55,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118330,"byte_end":118350,"line_start":63,"line_end":63,"column_start":15,"column_end":35},"name":"next_state_unchecked","qualname":"::dfa::DFA::next_state_unchecked","value":"fn (&self, current: Self::ID, input: u8) -> Self::ID","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Like `next_state`, but its implementation may look up the next state\n without memory safety checks such as bounds checks. As such, callers\n must ensure that the given identifier corresponds to a valid DFA\n state. Implementors must, in turn, ensure that this routine is safe\n for all valid state identifiers and for all possible `u8` values.\n","sig":null,"attributes":[{"value":"/ Like `next_state`, but its implementation may look up the next state","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":117943,"byte_end":118015,"line_start":58,"line_end":58,"column_start":5,"column_end":77}},{"value":"/ without memory safety checks such as bounds checks. As such, callers","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118020,"byte_end":118092,"line_start":59,"line_end":59,"column_start":5,"column_end":77}},{"value":"/ must ensure that the given identifier corresponds to a valid DFA","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118097,"byte_end":118165,"line_start":60,"line_end":60,"column_start":5,"column_end":73}},{"value":"/ state. Implementors must, in turn, ensure that this routine is safe","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118170,"byte_end":118241,"line_start":61,"line_end":61,"column_start":5,"column_end":76}},{"value":"/ for all valid state identifiers and for all possible `u8` values.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118246,"byte_end":118315,"line_start":62,"line_end":62,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119310,"byte_end":119318,"line_start":91,"line_end":91,"column_start":8,"column_end":16},"name":"is_match","qualname":"::dfa::DFA::is_match","value":"fn (&self, bytes: &[u8]) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns true if and only if the given bytes match this DFA.","sig":null,"attributes":[{"value":"/ Returns true if and only if the given bytes match this DFA.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118437,"byte_end":118500,"line_start":69,"line_end":69,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118505,"byte_end":118508,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ This routine may short circuit if it knows that scanning future input","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118513,"byte_end":118586,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ will never lead to a different result. In particular, if a DFA enters","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118591,"byte_end":118664,"line_start":72,"line_end":72,"column_start":5,"column_end":78}},{"value":"/ a match state or a dead state, then this routine will return `true` or","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118669,"byte_end":118743,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ `false`, respectively, without inspecting any future input.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118748,"byte_end":118811,"line_start":74,"line_end":74,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118816,"byte_end":118819,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118824,"byte_end":118837,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118842,"byte_end":118845,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ This example shows how to use this method with a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118850,"byte_end":118902,"line_start":78,"line_end":78,"column_start":5,"column_end":57}},{"value":"/ [`DenseDFA`](enum.DenseDFA.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118907,"byte_end":118944,"line_start":79,"line_end":79,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118949,"byte_end":118952,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118957,"byte_end":118964,"line_start":81,"line_end":81,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::{DFA, DenseDFA};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":118969,"byte_end":119009,"line_start":82,"line_end":82,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119014,"byte_end":119017,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119022,"byte_end":119079,"line_start":84,"line_end":84,"column_start":5,"column_end":62}},{"value":"/ let dfa = DenseDFA::new(\"foo[0-9]+bar\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119084,"byte_end":119129,"line_start":85,"line_end":85,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(true, dfa.is_match(b\"foo12345bar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119134,"byte_end":119185,"line_start":86,"line_end":86,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(false, dfa.is_match(b\"foobar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119190,"byte_end":119237,"line_start":87,"line_end":87,"column_start":5,"column_end":52}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119242,"byte_end":119276,"line_start":88,"line_end":88,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119281,"byte_end":119288,"line_start":89,"line_end":89,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119293,"byte_end":119302,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120455,"byte_end":120469,"line_start":121,"line_end":121,"column_start":8,"column_end":22},"name":"shortest_match","qualname":"::dfa::DFA::shortest_match","value":"fn (&self, bytes: &[u8]) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the first position at which a match is found.","sig":null,"attributes":[{"value":"/ Returns the first position at which a match is found.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119396,"byte_end":119453,"line_start":95,"line_end":95,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119458,"byte_end":119461,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ This routine stops scanning input in precisely the same circumstances","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119466,"byte_end":119539,"line_start":97,"line_end":97,"column_start":5,"column_end":78}},{"value":"/ as `is_match`. The key difference is that this routine returns the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119544,"byte_end":119614,"line_start":98,"line_end":98,"column_start":5,"column_end":75}},{"value":"/ position at which it stopped scanning input if and only if a match","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119619,"byte_end":119689,"line_start":99,"line_end":99,"column_start":5,"column_end":75}},{"value":"/ was found. If no match is found, then `None` is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119694,"byte_end":119755,"line_start":100,"line_end":100,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119760,"byte_end":119763,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119768,"byte_end":119781,"line_start":102,"line_end":102,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119786,"byte_end":119789,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ This example shows how to use this method with a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119794,"byte_end":119846,"line_start":104,"line_end":104,"column_start":5,"column_end":57}},{"value":"/ [`DenseDFA`](enum.DenseDFA.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119851,"byte_end":119888,"line_start":105,"line_end":105,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119893,"byte_end":119896,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119901,"byte_end":119908,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::{DFA, DenseDFA};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119913,"byte_end":119953,"line_start":108,"line_end":108,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119958,"byte_end":119961,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":119966,"byte_end":120023,"line_start":110,"line_end":110,"column_start":5,"column_end":62}},{"value":"/ let dfa = DenseDFA::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120028,"byte_end":120070,"line_start":111,"line_end":111,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(Some(4), dfa.shortest_match(b\"foo12345\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120075,"byte_end":120132,"line_start":112,"line_end":112,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120137,"byte_end":120140,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ // Normally, the end of the leftmost first match here would be 3,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120145,"byte_end":120214,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ // but the shortest match semantics detect a match earlier.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120219,"byte_end":120282,"line_start":115,"line_end":115,"column_start":5,"column_end":68}},{"value":"/ let dfa = DenseDFA::new(\"abc|a\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120287,"byte_end":120325,"line_start":116,"line_end":116,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(Some(1), dfa.shortest_match(b\"abc\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120330,"byte_end":120382,"line_start":117,"line_end":117,"column_start":5,"column_end":57}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120387,"byte_end":120421,"line_start":118,"line_end":118,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120426,"byte_end":120433,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120438,"byte_end":120447,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122753,"byte_end":122757,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"find","qualname":"::dfa::DFA::find","value":"fn (&self, bytes: &[u8]) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the end offset of the longest match. If no match exists,\n then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the end offset of the longest match. If no match exists,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120562,"byte_end":120630,"line_start":125,"line_end":125,"column_start":5,"column_end":73}},{"value":"/ then `None` is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120635,"byte_end":120663,"line_start":126,"line_end":126,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120668,"byte_end":120671,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Implementors of this trait are not required to implement any particular","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120676,"byte_end":120751,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/ match semantics (such as leftmost-first), which are instead manifest in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120756,"byte_end":120831,"line_start":129,"line_end":129,"column_start":5,"column_end":80}},{"value":"/ the DFA's topology itself.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120836,"byte_end":120866,"line_start":130,"line_end":130,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120871,"byte_end":120874,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ In particular, this method must continue searching even after it","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120879,"byte_end":120947,"line_start":132,"line_end":132,"column_start":5,"column_end":73}},{"value":"/ enters a match state. The search should only terminate once it has","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":120952,"byte_end":121022,"line_start":133,"line_end":133,"column_start":5,"column_end":75}},{"value":"/ reached the end of the input or when it has entered a dead state. Upon","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121027,"byte_end":121101,"line_start":134,"line_end":134,"column_start":5,"column_end":79}},{"value":"/ termination, the position of the last byte seen while still in a match","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121106,"byte_end":121180,"line_start":135,"line_end":135,"column_start":5,"column_end":79}},{"value":"/ state is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121185,"byte_end":121207,"line_start":136,"line_end":136,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121212,"byte_end":121215,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121220,"byte_end":121233,"line_start":138,"line_end":138,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121238,"byte_end":121241,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This example shows how to use this method with a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121246,"byte_end":121298,"line_start":140,"line_end":140,"column_start":5,"column_end":57}},{"value":"/ [`DenseDFA`](enum.DenseDFA.html). By default, a dense DFA uses","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121303,"byte_end":121369,"line_start":141,"line_end":141,"column_start":5,"column_end":71}},{"value":"/ \"leftmost first\" match semantics.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121374,"byte_end":121411,"line_start":142,"line_end":142,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121416,"byte_end":121419,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Leftmost first match semantics corresponds to the match with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121424,"byte_end":121492,"line_start":144,"line_end":144,"column_start":5,"column_end":73}},{"value":"/ smallest starting offset, but where the end offset is determined by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121497,"byte_end":121568,"line_start":145,"line_end":145,"column_start":5,"column_end":76}},{"value":"/ preferring earlier branches in the original regular expression. For","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121573,"byte_end":121644,"line_start":146,"line_end":146,"column_start":5,"column_end":76}},{"value":"/ example, `Sam|Samwise` will match `Sam` in `Samwise`, but `Samwise|Sam`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121649,"byte_end":121724,"line_start":147,"line_end":147,"column_start":5,"column_end":80}},{"value":"/ will match `Samwise` in `Samwise`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121729,"byte_end":121767,"line_start":148,"line_end":148,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121772,"byte_end":121775,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Generally speaking, the \"leftmost first\" match is how most backtracking","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121780,"byte_end":121855,"line_start":150,"line_end":150,"column_start":5,"column_end":80}},{"value":"/ regular expressions tend to work. This is in contrast to POSIX-style","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121860,"byte_end":121932,"line_start":151,"line_end":151,"column_start":5,"column_end":77}},{"value":"/ regular expressions that yield \"leftmost longest\" matches. Namely,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":121937,"byte_end":122007,"line_start":152,"line_end":152,"column_start":5,"column_end":75}},{"value":"/ both `Sam|Samwise` and `Samwise|Sam` match `Samwise` when using","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122012,"byte_end":122079,"line_start":153,"line_end":153,"column_start":5,"column_end":72}},{"value":"/ leftmost longest semantics.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122084,"byte_end":122115,"line_start":154,"line_end":154,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122120,"byte_end":122123,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122128,"byte_end":122135,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::{DFA, DenseDFA};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122140,"byte_end":122180,"line_start":157,"line_end":157,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122185,"byte_end":122188,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122193,"byte_end":122250,"line_start":159,"line_end":159,"column_start":5,"column_end":62}},{"value":"/ let dfa = DenseDFA::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122255,"byte_end":122297,"line_start":160,"line_end":160,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(Some(8), dfa.find(b\"foo12345\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122302,"byte_end":122349,"line_start":161,"line_end":161,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122354,"byte_end":122357,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ // Even though a match is found after reading the first byte (`a`),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122362,"byte_end":122433,"line_start":163,"line_end":163,"column_start":5,"column_end":76}},{"value":"/ // the leftmost first match semantics demand that we find the earliest","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122438,"byte_end":122512,"line_start":164,"line_end":164,"column_start":5,"column_end":79}},{"value":"/ // match that prefers earlier parts of the pattern over latter parts.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122517,"byte_end":122590,"line_start":165,"line_end":165,"column_start":5,"column_end":78}},{"value":"/ let dfa = DenseDFA::new(\"abc|a\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122595,"byte_end":122633,"line_start":166,"line_end":166,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(Some(3), dfa.find(b\"abc\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122638,"byte_end":122680,"line_start":167,"line_end":167,"column_start":5,"column_end":47}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122685,"byte_end":122719,"line_start":168,"line_end":168,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122724,"byte_end":122731,"line_start":169,"line_end":169,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122736,"byte_end":122745,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123958,"byte_end":123963,"line_start":199,"line_end":199,"column_start":8,"column_end":13},"name":"rfind","qualname":"::dfa::DFA::rfind","value":"fn (&self, bytes: &[u8]) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the start offset of the longest match in reverse, by searching\n from the end of the input towards the start of the input. If no match\n exists, then `None` is returned. In other words, this has the same\n match semantics as `find`, but in reverse.","sig":null,"attributes":[{"value":"/ Returns the start offset of the longest match in reverse, by searching","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122840,"byte_end":122914,"line_start":175,"line_end":175,"column_start":5,"column_end":79}},{"value":"/ from the end of the input towards the start of the input. If no match","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122919,"byte_end":122992,"line_start":176,"line_end":176,"column_start":5,"column_end":78}},{"value":"/ exists, then `None` is returned. In other words, this has the same","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":122997,"byte_end":123067,"line_start":177,"line_end":177,"column_start":5,"column_end":75}},{"value":"/ match semantics as `find`, but in reverse.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123072,"byte_end":123118,"line_start":178,"line_end":178,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123123,"byte_end":123126,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123131,"byte_end":123144,"line_start":180,"line_end":180,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123149,"byte_end":123152,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This example shows how to use this method with a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123157,"byte_end":123209,"line_start":182,"line_end":182,"column_start":5,"column_end":57}},{"value":"/ [`DenseDFA`](enum.DenseDFA.html). In particular, this routine","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123214,"byte_end":123279,"line_start":183,"line_end":183,"column_start":5,"column_end":70}},{"value":"/ is principally useful when used in conjunction with the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123284,"byte_end":123343,"line_start":184,"line_end":184,"column_start":5,"column_end":64}},{"value":"/ [`dense::Builder::reverse`](dense/struct.Builder.html#method.reverse)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123348,"byte_end":123421,"line_start":185,"line_end":185,"column_start":5,"column_end":78}},{"value":"/ configuration knob. In general, it's unlikely to be correct to use both","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123426,"byte_end":123501,"line_start":186,"line_end":186,"column_start":5,"column_end":80}},{"value":"/ `find` and `rfind` with the same DFA since any particular DFA will only","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123506,"byte_end":123581,"line_start":187,"line_end":187,"column_start":5,"column_end":80}},{"value":"/ support searching in one direction.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123586,"byte_end":123625,"line_start":188,"line_end":188,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123630,"byte_end":123633,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123638,"byte_end":123645,"line_start":190,"line_end":190,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::{dense, DFA};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123650,"byte_end":123687,"line_start":191,"line_end":191,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123692,"byte_end":123695,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123700,"byte_end":123757,"line_start":193,"line_end":193,"column_start":5,"column_end":62}},{"value":"/ let dfa = dense::Builder::new().reverse(true).build(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123762,"byte_end":123832,"line_start":194,"line_end":194,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(Some(0), dfa.rfind(b\"foo12345\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123837,"byte_end":123885,"line_start":195,"line_end":195,"column_start":5,"column_end":53}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123890,"byte_end":123924,"line_start":196,"line_end":196,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123929,"byte_end":123936,"line_start":197,"line_end":197,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":123941,"byte_end":123950,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":124381,"byte_end":124392,"line_start":210,"line_end":210,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::dfa::DFA::is_match_at","value":"fn (&self, bytes: &[u8], start: usize) -> bool","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the same as `is_match`, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as `is_match`, but starts the search at the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":124057,"byte_end":124127,"line_start":203,"line_end":203,"column_start":5,"column_end":75}},{"value":"/ offset.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":124132,"byte_end":124143,"line_start":204,"line_end":204,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":124148,"byte_end":124151,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":124156,"byte_end":124231,"line_start":206,"line_end":206,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, if the DFA is anchored, then","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":124236,"byte_end":124309,"line_start":207,"line_end":207,"column_start":5,"column_end":78}},{"value":"/ a match can only occur when `start == 0`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":124314,"byte_end":124359,"line_start":208,"line_end":208,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":124364,"byte_end":124373,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":125261,"byte_end":125278,"line_start":235,"line_end":235,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::dfa::DFA::shortest_match_at","value":"fn (&self, bytes: &[u8], start: usize) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the same as `shortest_match`, but starts the search at the\n given offset.","sig":null,"attributes":[{"value":"/ Returns the same as `shortest_match`, but starts the search at the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":124931,"byte_end":125001,"line_start":228,"line_end":228,"column_start":5,"column_end":75}},{"value":"/ given offset.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":125006,"byte_end":125023,"line_start":229,"line_end":229,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":125028,"byte_end":125031,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":125036,"byte_end":125111,"line_start":231,"line_end":231,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, if the DFA is anchored, then","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":125116,"byte_end":125189,"line_start":232,"line_end":232,"column_start":5,"column_end":78}},{"value":"/ a match can only occur when `start == 0`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":125194,"byte_end":125239,"line_start":233,"line_end":233,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":125244,"byte_end":125253,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":126305,"byte_end":126312,"line_start":264,"line_end":264,"column_start":8,"column_end":15},"name":"find_at","qualname":"::dfa::DFA::find_at","value":"fn (&self, bytes: &[u8], start: usize) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the same as `find`, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as `find`, but starts the search at the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":125985,"byte_end":126051,"line_start":257,"line_end":257,"column_start":5,"column_end":71}},{"value":"/ offset.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":126056,"byte_end":126067,"line_start":258,"line_end":258,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":126072,"byte_end":126075,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":126080,"byte_end":126155,"line_start":260,"line_end":260,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, if the DFA is anchored, then","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":126160,"byte_end":126233,"line_start":261,"line_end":261,"column_start":5,"column_end":78}},{"value":"/ a match can only occur when `start == 0`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":126238,"byte_end":126283,"line_start":262,"line_end":262,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":126288,"byte_end":126297,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":127418,"byte_end":127426,"line_start":296,"line_end":296,"column_start":8,"column_end":16},"name":"rfind_at","qualname":"::dfa::DFA::rfind_at","value":"fn (&self, bytes: &[u8], start: usize) -> Option<usize>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Returns the same as `rfind`, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as `rfind`, but starts the search at the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":127080,"byte_end":127147,"line_start":289,"line_end":289,"column_start":5,"column_end":72}},{"value":"/ offset.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":127152,"byte_end":127163,"line_start":290,"line_end":290,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":127168,"byte_end":127171,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":127176,"byte_end":127251,"line_start":292,"line_end":292,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, if the DFA is anchored, then","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":127256,"byte_end":127329,"line_start":293,"line_end":293,"column_start":5,"column_end":78}},{"value":"/ a match can only occur when `start == bytes.len()`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":127334,"byte_end":127389,"line_start":294,"line_end":294,"column_start":5,"column_end":60}},{"value":"inline(never)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dfa.rs","byte_start":127394,"byte_end":127410,"line_start":295,"line_end":295,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133516,"byte_end":133521,"line_start":109,"line_end":109,"column_start":12,"column_end":17},"name":"Regex","qualname":"::regex::Regex","value":"Regex {  }","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435}],"decl_id":null,"docs":" A regular expression that uses deterministic finite automata for fast\n searching.","sig":null,"attributes":[{"value":"/ A regular expression that uses deterministic finite automata for fast","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":131495,"byte_end":131568,"line_start":63,"line_end":63,"column_start":1,"column_end":74}},{"value":"/ searching.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":131569,"byte_end":131583,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":131584,"byte_end":131587,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ A regular expression is comprised of two DFAs, a \"forward\" DFA and a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":131588,"byte_end":131660,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/ \"reverse\" DFA. The forward DFA is responsible for detecting the end of a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":131661,"byte_end":131737,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/ match while the reverse DFA is responsible for detecting the start of a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":131738,"byte_end":131813,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/ match. Thus, in order to find the bounds of any given match, a forward","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":131814,"byte_end":131888,"line_start":69,"line_end":69,"column_start":1,"column_end":75}},{"value":"/ search must first be run followed by a reverse search. A match found by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":131889,"byte_end":131964,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ the forward DFA guarantees that the reverse DFA will also find a match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":131965,"byte_end":132040,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132041,"byte_end":132044,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ The type of the DFA used by a `Regex` corresponds to the `D` type","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132045,"byte_end":132114,"line_start":73,"line_end":73,"column_start":1,"column_end":70}},{"value":"/ parameter, which must satisfy the [`DFA`](trait.DFA.html) trait. Typically,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132115,"byte_end":132194,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/ `D` is either a [`DenseDFA`](enum.DenseDFA.html) or a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132195,"byte_end":132252,"line_start":75,"line_end":75,"column_start":1,"column_end":58}},{"value":"/ [`SparseDFA`](enum.SparseDFA.html), where dense DFAs use more memory but","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132253,"byte_end":132329,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ search faster, while sparse DFAs use less memory but search more slowly.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132330,"byte_end":132406,"line_start":77,"line_end":77,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132407,"byte_end":132410,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ When using this crate without the standard library, the `Regex` type has","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132411,"byte_end":132487,"line_start":79,"line_end":79,"column_start":1,"column_end":77}},{"value":"/ no default type parameter.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132488,"byte_end":132518,"line_start":80,"line_end":80,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132519,"byte_end":132522,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ # Sparse DFAs","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132523,"byte_end":132540,"line_start":82,"line_end":82,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132541,"byte_end":132544,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Since a `Regex` is generic over the `DFA` trait, it can be used with any","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132545,"byte_end":132621,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ kind of DFA. While this crate constructs dense DFAs by default, it is easy","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132622,"byte_end":132700,"line_start":85,"line_end":85,"column_start":1,"column_end":79}},{"value":"/ enough to build corresponding sparse DFAs, and then build a regex from","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132701,"byte_end":132775,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ them:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132776,"byte_end":132785,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132786,"byte_end":132789,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132790,"byte_end":132797,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ use regex_automata::Regex;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132798,"byte_end":132828,"line_start":90,"line_end":90,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132829,"byte_end":132832,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132833,"byte_end":132890,"line_start":92,"line_end":92,"column_start":1,"column_end":58}},{"value":"/ // First, build a regex that uses dense DFAs.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132891,"byte_end":132940,"line_start":93,"line_end":93,"column_start":1,"column_end":50}},{"value":"/ let dense_re = Regex::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132941,"byte_end":132985,"line_start":94,"line_end":94,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132986,"byte_end":132989,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ // Second, build sparse DFAs from the forward and reverse dense DFAs.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":132990,"byte_end":133063,"line_start":96,"line_end":96,"column_start":1,"column_end":74}},{"value":"/ let fwd = dense_re.forward().to_sparse()?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133064,"byte_end":133110,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/ let rev = dense_re.reverse().to_sparse()?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133111,"byte_end":133157,"line_start":98,"line_end":98,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133158,"byte_end":133161,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ // Third, build a new regex from the constituent sparse DFAs.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133162,"byte_end":133227,"line_start":100,"line_end":100,"column_start":1,"column_end":66}},{"value":"/ let sparse_re = Regex::from_dfas(fwd, rev);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133228,"byte_end":133275,"line_start":101,"line_end":101,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133276,"byte_end":133279,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ // A regex that uses sparse DFAs can be used just like with dense DFAs.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133280,"byte_end":133355,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"/ assert_eq!(true, sparse_re.is_match(b\"foo123\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133356,"byte_end":133408,"line_start":104,"line_end":104,"column_start":1,"column_end":53}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133409,"byte_end":133443,"line_start":105,"line_end":105,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133444,"byte_end":133451,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"cfg(not(feature = \"std\"))","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":133452,"byte_end":133480,"line_start":107,"line_end":107,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136319,"byte_end":136327,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex<D>>::is_match","value":"fn (&self, input: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given bytes match.","sig":null,"attributes":[{"value":"/ Returns true if and only if the given bytes match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135575,"byte_end":135629,"line_start":173,"line_end":173,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135634,"byte_end":135637,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ This routine may short circuit if it knows that scanning future input","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135642,"byte_end":135715,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ will never lead to a different result. In particular, if the underlying","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135720,"byte_end":135795,"line_start":176,"line_end":176,"column_start":5,"column_end":80}},{"value":"/ DFA enters a match state or a dead state, then this routine will return","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135800,"byte_end":135875,"line_start":177,"line_end":177,"column_start":5,"column_end":80}},{"value":"/ `true` or `false`, respectively, without inspecting any future input.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135880,"byte_end":135953,"line_start":178,"line_end":178,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135958,"byte_end":135961,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135966,"byte_end":135979,"line_start":180,"line_end":180,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135984,"byte_end":135987,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135992,"byte_end":135999,"line_start":182,"line_end":182,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::Regex;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136004,"byte_end":136034,"line_start":183,"line_end":183,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136039,"byte_end":136042,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136047,"byte_end":136104,"line_start":185,"line_end":185,"column_start":5,"column_end":62}},{"value":"/ let re = Regex::new(\"foo[0-9]+bar\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136109,"byte_end":136150,"line_start":186,"line_end":186,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(true, re.is_match(b\"foo12345bar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136155,"byte_end":136205,"line_start":187,"line_end":187,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(false, re.is_match(b\"foobar\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136210,"byte_end":136256,"line_start":188,"line_end":188,"column_start":5,"column_end":51}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136261,"byte_end":136295,"line_start":189,"line_end":189,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136300,"byte_end":136307,"line_start":190,"line_end":190,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137327,"byte_end":137341,"line_start":217,"line_end":217,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex<D>>::shortest_match","value":"fn (&self, input: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first position at which a match is found.","sig":null,"attributes":[{"value":"/ Returns the first position at which a match is found.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136405,"byte_end":136462,"line_start":195,"line_end":195,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136467,"byte_end":136470,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ This routine stops scanning input in precisely the same circumstances","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136475,"byte_end":136548,"line_start":197,"line_end":197,"column_start":5,"column_end":78}},{"value":"/ as `is_match`. The key difference is that this routine returns the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136553,"byte_end":136623,"line_start":198,"line_end":198,"column_start":5,"column_end":75}},{"value":"/ position at which it stopped scanning input if and only if a match","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136628,"byte_end":136698,"line_start":199,"line_end":199,"column_start":5,"column_end":75}},{"value":"/ was found. If no match is found, then `None` is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136703,"byte_end":136764,"line_start":200,"line_end":200,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136769,"byte_end":136772,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136777,"byte_end":136790,"line_start":202,"line_end":202,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136795,"byte_end":136798,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136803,"byte_end":136810,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::Regex;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136815,"byte_end":136845,"line_start":205,"line_end":205,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136850,"byte_end":136853,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136858,"byte_end":136915,"line_start":207,"line_end":207,"column_start":5,"column_end":62}},{"value":"/ let re = Regex::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136920,"byte_end":136958,"line_start":208,"line_end":208,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(Some(4), re.shortest_match(b\"foo12345\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":136963,"byte_end":137019,"line_start":209,"line_end":209,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137024,"byte_end":137027,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ // Normally, the end of the leftmost first match here would be 3,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137032,"byte_end":137101,"line_start":211,"line_end":211,"column_start":5,"column_end":74}},{"value":"/ // but the shortest match semantics detect a match earlier.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137106,"byte_end":137169,"line_start":212,"line_end":212,"column_start":5,"column_end":68}},{"value":"/ let re = Regex::new(\"abc|a\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137174,"byte_end":137208,"line_start":213,"line_end":213,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Some(1), re.shortest_match(b\"abc\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137213,"byte_end":137264,"line_start":214,"line_end":214,"column_start":5,"column_end":56}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137269,"byte_end":137303,"line_start":215,"line_end":215,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137308,"byte_end":137315,"line_start":216,"line_end":216,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138903,"byte_end":138907,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex<D>>::find","value":"fn (&self, input: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end offset of the leftmost first match. If no\n match exists, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the start and end offset of the leftmost first match. If no","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137434,"byte_end":137505,"line_start":221,"line_end":221,"column_start":5,"column_end":76}},{"value":"/ match exists, then `None` is returned.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137510,"byte_end":137552,"line_start":222,"line_end":222,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137557,"byte_end":137560,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ The \"leftmost first\" match corresponds to the match with the smallest","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137565,"byte_end":137638,"line_start":224,"line_end":224,"column_start":5,"column_end":78}},{"value":"/ starting offset, but where the end offset is determined by preferring","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137643,"byte_end":137716,"line_start":225,"line_end":225,"column_start":5,"column_end":78}},{"value":"/ earlier branches in the original regular expression. For example,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137721,"byte_end":137790,"line_start":226,"line_end":226,"column_start":5,"column_end":74}},{"value":"/ `Sam|Samwise` will match `Sam` in `Samwise`, but `Samwise|Sam` will","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137795,"byte_end":137866,"line_start":227,"line_end":227,"column_start":5,"column_end":76}},{"value":"/ match `Samwise` in `Samwise`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137871,"byte_end":137904,"line_start":228,"line_end":228,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137909,"byte_end":137912,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Generally speaking, the \"leftmost first\" match is how most backtracking","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137917,"byte_end":137992,"line_start":230,"line_end":230,"column_start":5,"column_end":80}},{"value":"/ regular expressions tend to work. This is in contrast to POSIX-style","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":137997,"byte_end":138069,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ regular expressions that yield \"leftmost longest\" matches. Namely,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138074,"byte_end":138144,"line_start":232,"line_end":232,"column_start":5,"column_end":75}},{"value":"/ both `Sam|Samwise` and `Samwise|Sam` match `Samwise` when using","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138149,"byte_end":138216,"line_start":233,"line_end":233,"column_start":5,"column_end":72}},{"value":"/ leftmost longest semantics.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138221,"byte_end":138252,"line_start":234,"line_end":234,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138257,"byte_end":138260,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138265,"byte_end":138278,"line_start":236,"line_end":236,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138283,"byte_end":138286,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138291,"byte_end":138298,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::Regex;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138303,"byte_end":138333,"line_start":239,"line_end":239,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138338,"byte_end":138341,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138346,"byte_end":138403,"line_start":241,"line_end":241,"column_start":5,"column_end":62}},{"value":"/ let re = Regex::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138408,"byte_end":138446,"line_start":242,"line_end":242,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(Some((3, 11)), re.find(b\"zzzfoo12345zzz\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138451,"byte_end":138509,"line_start":243,"line_end":243,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138514,"byte_end":138517,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ // Even though a match is found after reading the first byte (`a`),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138522,"byte_end":138593,"line_start":245,"line_end":245,"column_start":5,"column_end":76}},{"value":"/ // the leftmost first match semantics demand that we find the earliest","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138598,"byte_end":138672,"line_start":246,"line_end":246,"column_start":5,"column_end":79}},{"value":"/ // match that prefers earlier parts of the pattern over latter parts.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138677,"byte_end":138750,"line_start":247,"line_end":247,"column_start":5,"column_end":78}},{"value":"/ let re = Regex::new(\"abc|a\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138755,"byte_end":138789,"line_start":248,"line_end":248,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Some((0, 3)), re.find(b\"abc\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138794,"byte_end":138840,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138845,"byte_end":138879,"line_start":250,"line_end":250,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138884,"byte_end":138891,"line_start":251,"line_end":251,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139313,"byte_end":139324,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex<D>>::is_match_at","value":"fn (&self, input: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `is_match`, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as `is_match`, but starts the search at the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":138999,"byte_end":139069,"line_start":256,"line_end":256,"column_start":5,"column_end":75}},{"value":"/ offset.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139074,"byte_end":139085,"line_start":257,"line_end":257,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139090,"byte_end":139093,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139098,"byte_end":139173,"line_start":259,"line_end":259,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, if the DFA is anchored, then","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139178,"byte_end":139251,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ a match can only occur when `start == 0`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139256,"byte_end":139301,"line_start":261,"line_end":261,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139750,"byte_end":139767,"line_start":272,"line_end":272,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex<D>>::shortest_match_at","value":"fn (&self, input: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `shortest_match`, but starts the search at the\n given offset.","sig":null,"attributes":[{"value":"/ Returns the same as `shortest_match`, but starts the search at the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139430,"byte_end":139500,"line_start":266,"line_end":266,"column_start":5,"column_end":75}},{"value":"/ given offset.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139505,"byte_end":139522,"line_start":267,"line_end":267,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139527,"byte_end":139530,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139535,"byte_end":139610,"line_start":269,"line_end":269,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, if the DFA is anchored, then","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139615,"byte_end":139688,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/ a match can only occur when `start == 0`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139693,"byte_end":139738,"line_start":271,"line_end":271,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140229,"byte_end":140236,"line_start":286,"line_end":286,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex<D>>::find_at","value":"fn (&self, input: &[u8], start: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `find`, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as `find`, but starts the search at the given","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139919,"byte_end":139985,"line_start":280,"line_end":280,"column_start":5,"column_end":71}},{"value":"/ offset.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":139990,"byte_end":140001,"line_start":281,"line_end":281,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140006,"byte_end":140009,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140014,"byte_end":140089,"line_start":283,"line_end":283,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, if the DFA is anchored, then","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140094,"byte_end":140167,"line_start":284,"line_end":284,"column_start":5,"column_end":78}},{"value":"/ a match can only occur when `start == 0`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140172,"byte_end":140217,"line_start":285,"line_end":285,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141718,"byte_end":141727,"line_start":326,"line_end":326,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex<D>>::find_iter","value":"fn <'r, 't> (&'r self, input: &'t [u8]) -> Matches<'r, 't, D>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping leftmost first matches\n in the given bytes. If no match exists, then the iterator yields no\n elements.","sig":null,"attributes":[{"value":"/ Returns an iterator over all non-overlapping leftmost first matches","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140698,"byte_end":140769,"line_start":303,"line_end":303,"column_start":5,"column_end":76}},{"value":"/ in the given bytes. If no match exists, then the iterator yields no","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140774,"byte_end":140845,"line_start":304,"line_end":304,"column_start":5,"column_end":76}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140850,"byte_end":140863,"line_start":305,"line_end":305,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140868,"byte_end":140871,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Note that if the regex can match the empty string, then it is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140876,"byte_end":140941,"line_start":307,"line_end":307,"column_start":5,"column_end":70}},{"value":"/ possible for the iterator to yield a zero-width match at a location","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":140946,"byte_end":141017,"line_start":308,"line_end":308,"column_start":5,"column_end":76}},{"value":"/ that is not a valid UTF-8 boundary (for example, between the code units","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141022,"byte_end":141097,"line_start":309,"line_end":309,"column_start":5,"column_end":80}},{"value":"/ of a UTF-8 encoded codepoint). This can happen regardless of whether","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141102,"byte_end":141174,"line_start":310,"line_end":310,"column_start":5,"column_end":77}},{"value":"/ [`allow_invalid_utf8`](struct.RegexBuilder.html#method.allow_invalid_utf8)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141179,"byte_end":141257,"line_start":311,"line_end":311,"column_start":5,"column_end":83}},{"value":"/ was enabled or not.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141262,"byte_end":141285,"line_start":312,"line_end":312,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141290,"byte_end":141293,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141298,"byte_end":141311,"line_start":314,"line_end":314,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141316,"byte_end":141319,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141324,"byte_end":141331,"line_start":316,"line_end":316,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::Regex;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141336,"byte_end":141366,"line_start":317,"line_end":317,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141371,"byte_end":141374,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141379,"byte_end":141436,"line_start":319,"line_end":319,"column_start":5,"column_end":62}},{"value":"/ let re = Regex::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141441,"byte_end":141479,"line_start":320,"line_end":320,"column_start":5,"column_end":43}},{"value":"/ let text = b\"foo1 foo12 foo123\";","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141484,"byte_end":141520,"line_start":321,"line_end":321,"column_start":5,"column_end":41}},{"value":"/ let matches: Vec<(usize, usize)> = re.find_iter(text).collect();","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141525,"byte_end":141593,"line_start":322,"line_end":322,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(matches, vec![(0, 4), (5, 10), (11, 17)]);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141598,"byte_end":141655,"line_start":323,"line_end":323,"column_start":5,"column_end":62}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141660,"byte_end":141694,"line_start":324,"line_end":324,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141699,"byte_end":141706,"line_start":325,"line_end":325,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143994,"byte_end":144003,"line_start":388,"line_end":388,"column_start":12,"column_end":21},"name":"from_dfas","qualname":"<Regex<D>>::from_dfas","value":"fn (forward: D, reverse: D) -> Regex<D>","parent":null,"children":[],"decl_id":null,"docs":" Build a new regex from its constituent forward and reverse DFAs.","sig":null,"attributes":[{"value":"/ Build a new regex from its constituent forward and reverse DFAs.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141832,"byte_end":141900,"line_start":330,"line_end":330,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141905,"byte_end":141908,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ This is useful when deserializing a regex from some arbitrary","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141913,"byte_end":141978,"line_start":332,"line_end":332,"column_start":5,"column_end":70}},{"value":"/ memory region. This is also useful for building regexes from other","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":141983,"byte_end":142053,"line_start":333,"line_end":333,"column_start":5,"column_end":75}},{"value":"/ types of DFAs.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142058,"byte_end":142076,"line_start":334,"line_end":334,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142081,"byte_end":142084,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142089,"byte_end":142102,"line_start":336,"line_end":336,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142107,"byte_end":142110,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This example is a bit a contrived. The usual use of these methods","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142115,"byte_end":142184,"line_start":338,"line_end":338,"column_start":5,"column_end":74}},{"value":"/ would involve serializing `initial_re` somewhere and then deserializing","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142189,"byte_end":142264,"line_start":339,"line_end":339,"column_start":5,"column_end":80}},{"value":"/ it later to build a regex.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142269,"byte_end":142299,"line_start":340,"line_end":340,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142304,"byte_end":142307,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142312,"byte_end":142319,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::Regex;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142324,"byte_end":142354,"line_start":343,"line_end":343,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142359,"byte_end":142362,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142367,"byte_end":142424,"line_start":345,"line_end":345,"column_start":5,"column_end":62}},{"value":"/ let initial_re = Regex::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142429,"byte_end":142475,"line_start":346,"line_end":346,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(true, initial_re.is_match(b\"foo123\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142480,"byte_end":142533,"line_start":347,"line_end":347,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142538,"byte_end":142541,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ let (fwd, rev) = (initial_re.forward(), initial_re.reverse());","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142546,"byte_end":142612,"line_start":349,"line_end":349,"column_start":5,"column_end":71}},{"value":"/ let re = Regex::from_dfas(fwd, rev);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142617,"byte_end":142657,"line_start":350,"line_end":350,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(true, re.is_match(b\"foo123\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142662,"byte_end":142707,"line_start":351,"line_end":351,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142712,"byte_end":142746,"line_start":352,"line_end":352,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142751,"byte_end":142758,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142763,"byte_end":142766,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This example shows how you might build smaller DFAs, and then use those","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142771,"byte_end":142846,"line_start":355,"line_end":355,"column_start":5,"column_end":80}},{"value":"/ smaller DFAs to build a new regex.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142851,"byte_end":142889,"line_start":356,"line_end":356,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142894,"byte_end":142897,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142902,"byte_end":142909,"line_start":358,"line_end":358,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::Regex;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142914,"byte_end":142944,"line_start":359,"line_end":359,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142949,"byte_end":142952,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":142957,"byte_end":143014,"line_start":361,"line_end":361,"column_start":5,"column_end":62}},{"value":"/ let initial_re = Regex::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143019,"byte_end":143065,"line_start":362,"line_end":362,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(true, initial_re.is_match(b\"foo123\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143070,"byte_end":143123,"line_start":363,"line_end":363,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143128,"byte_end":143131,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ let fwd = initial_re.forward().to_u16()?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143136,"byte_end":143181,"line_start":365,"line_end":365,"column_start":5,"column_end":50}},{"value":"/ let rev = initial_re.reverse().to_u16()?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143186,"byte_end":143231,"line_start":366,"line_end":366,"column_start":5,"column_end":50}},{"value":"/ let re = Regex::from_dfas(fwd, rev);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143236,"byte_end":143276,"line_start":367,"line_end":367,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(true, re.is_match(b\"foo123\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143281,"byte_end":143326,"line_start":368,"line_end":368,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143331,"byte_end":143365,"line_start":369,"line_end":369,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143370,"byte_end":143377,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143382,"byte_end":143385,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ This example shows how to build a `Regex` that uses sparse DFAs instead","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143390,"byte_end":143465,"line_start":372,"line_end":372,"column_start":5,"column_end":80}},{"value":"/ of dense DFAs:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143470,"byte_end":143488,"line_start":373,"line_end":373,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143493,"byte_end":143496,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143501,"byte_end":143508,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::Regex;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143513,"byte_end":143543,"line_start":376,"line_end":376,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143548,"byte_end":143551,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143556,"byte_end":143613,"line_start":378,"line_end":378,"column_start":5,"column_end":62}},{"value":"/ let initial_re = Regex::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143618,"byte_end":143664,"line_start":379,"line_end":379,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(true, initial_re.is_match(b\"foo123\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143669,"byte_end":143722,"line_start":380,"line_end":380,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143727,"byte_end":143730,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let fwd = initial_re.forward().to_sparse()?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143735,"byte_end":143783,"line_start":382,"line_end":382,"column_start":5,"column_end":53}},{"value":"/ let rev = initial_re.reverse().to_sparse()?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143788,"byte_end":143836,"line_start":383,"line_end":383,"column_start":5,"column_end":53}},{"value":"/ let re = Regex::from_dfas(fwd, rev);","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143841,"byte_end":143881,"line_start":384,"line_end":384,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(true, re.is_match(b\"foo123\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143886,"byte_end":143931,"line_start":385,"line_end":385,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143936,"byte_end":143970,"line_start":386,"line_end":386,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":143975,"byte_end":143982,"line_start":387,"line_end":387,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144163,"byte_end":144170,"line_start":393,"line_end":393,"column_start":12,"column_end":19},"name":"forward","qualname":"<Regex<D>>::forward","value":"fn (&self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying DFA responsible for forward matching.\n","sig":null,"attributes":[{"value":"/ Return the underlying DFA responsible for forward matching.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144088,"byte_end":144151,"line_start":392,"line_end":392,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144294,"byte_end":144301,"line_start":398,"line_end":398,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Regex<D>>::reverse","value":"fn (&self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying DFA responsible for reverse matching.\n","sig":null,"attributes":[{"value":"/ Return the underlying DFA responsible for reverse matching.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144219,"byte_end":144282,"line_start":397,"line_end":397,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144928,"byte_end":144935,"line_start":415,"line_end":415,"column_start":12,"column_end":19},"name":"Matches","qualname":"::regex::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449}],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular search.","sig":null,"attributes":[{"value":"/ An iterator over all non-overlapping matches for a particular search.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144348,"byte_end":144421,"line_start":403,"line_end":403,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144422,"byte_end":144425,"line_start":404,"line_end":404,"column_start":1,"column_end":4}},{"value":"/ The iterator yields a `(usize, usize)` value until no more matches could be","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144426,"byte_end":144505,"line_start":405,"line_end":405,"column_start":1,"column_end":80}},{"value":"/ found. The first `usize` is the start of the match (inclusive) while the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144506,"byte_end":144582,"line_start":406,"line_end":406,"column_start":1,"column_end":77}},{"value":"/ second `usize` is the end of the match (exclusive).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144583,"byte_end":144638,"line_start":407,"line_end":407,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144639,"byte_end":144642,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ `S` is the type used to represent state identifiers in the underlying","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144643,"byte_end":144716,"line_start":409,"line_end":409,"column_start":1,"column_end":74}},{"value":"/ regex. The lifetime variables are as follows:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144717,"byte_end":144766,"line_start":410,"line_end":410,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144767,"byte_end":144770,"line_start":411,"line_end":411,"column_start":1,"column_end":4}},{"value":"/ * `'r` is the lifetime of the regular expression value itself.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144771,"byte_end":144837,"line_start":412,"line_end":412,"column_start":1,"column_end":67}},{"value":"/ * `'t` is the lifetime of the text being searched.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":144838,"byte_end":144892,"line_start":413,"line_end":413,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165576,"byte_end":165584,"line_start":111,"line_end":111,"column_start":5,"column_end":13},"name":"Standard","qualname":"::sparse_imp::SparseDFA::Standard","value":"SparseDFA::Standard(Standard<T, S>)","parent":{"krate":0,"index":460},"children":[],"decl_id":null,"docs":" A standard DFA that does not use byte classes.\n","sig":null,"attributes":[{"value":"/ A standard DFA that does not use byte classes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165521,"byte_end":165571,"line_start":110,"line_end":110,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166310,"byte_end":166319,"line_start":123,"line_end":123,"column_start":5,"column_end":14},"name":"ByteClass","qualname":"::sparse_imp::SparseDFA::ByteClass","value":"SparseDFA::ByteClass(ByteClass<T, S>)","parent":{"krate":0,"index":460},"children":[],"decl_id":null,"docs":" A DFA that shrinks its alphabet to a set of equivalence classes instead\n of using all possible byte values. Any two bytes belong to the same\n equivalence class if and only if they can be used interchangeably\n anywhere in the DFA while never discriminating between a match and a\n non-match.","sig":null,"attributes":[{"value":"/ A DFA that shrinks its alphabet to a set of equivalence classes instead","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165606,"byte_end":165681,"line_start":112,"line_end":112,"column_start":5,"column_end":80}},{"value":"/ of using all possible byte values. Any two bytes belong to the same","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165686,"byte_end":165757,"line_start":113,"line_end":113,"column_start":5,"column_end":76}},{"value":"/ equivalence class if and only if they can be used interchangeably","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165762,"byte_end":165831,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ anywhere in the DFA while never discriminating between a match and a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165836,"byte_end":165908,"line_start":115,"line_end":115,"column_start":5,"column_end":77}},{"value":"/ non-match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165913,"byte_end":165927,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165932,"byte_end":165935,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Unlike dense DFAs, sparse DFAs do not tend to benefit nearly as much","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165940,"byte_end":166012,"line_start":118,"line_end":118,"column_start":5,"column_end":77}},{"value":"/ from using byte classes. In some cases, using byte classes can even","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166017,"byte_end":166088,"line_start":119,"line_end":119,"column_start":5,"column_end":76}},{"value":"/ marginally increase the size of a sparse DFA's transition table. The","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166093,"byte_end":166165,"line_start":120,"line_end":120,"column_start":5,"column_end":77}},{"value":"/ reason for this is that a sparse DFA already compacts each state's","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166170,"byte_end":166240,"line_start":121,"line_end":121,"column_start":5,"column_end":75}},{"value":"/ transitions separate from whether byte classes are used.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166245,"byte_end":166305,"line_start":122,"line_end":122,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166616,"byte_end":166631,"line_start":130,"line_end":130,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::sparse_imp::SparseDFA::__Nonexhaustive","value":"SparseDFA::__Nonexhaustive","parent":{"krate":0,"index":460},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166342,"byte_end":166396,"line_start":124,"line_end":124,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166401,"byte_end":166404,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166409,"byte_end":166479,"line_start":126,"line_end":126,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166484,"byte_end":166556,"line_start":127,"line_end":127,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":166561,"byte_end":166592,"line_start":128,"line_end":128,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165469,"byte_end":165478,"line_start":109,"line_end":109,"column_start":10,"column_end":19},"name":"SparseDFA","qualname":"::sparse_imp::SparseDFA","value":"SparseDFA::{Standard, ByteClass, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":469}],"decl_id":null,"docs":" A sparse table-based deterministic finite automaton (DFA).","sig":null,"attributes":[{"value":"/ A sparse table-based deterministic finite automaton (DFA).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161022,"byte_end":161084,"line_start":24,"line_end":24,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161085,"byte_end":161088,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ In contrast to a [dense DFA](enum.DenseDFA.html), a sparse DFA uses a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161089,"byte_end":161162,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ more space efficient representation for its transition table. Consequently,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161163,"byte_end":161242,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/ sparse DFAs can use much less memory than dense DFAs, but this comes at a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161243,"byte_end":161320,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ price. In particular, reading the more space efficient transitions takes","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161321,"byte_end":161397,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ more work, and consequently, searching using a sparse DFA is typically","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161398,"byte_end":161472,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/ slower than a dense DFA.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161473,"byte_end":161501,"line_start":31,"line_end":31,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161502,"byte_end":161505,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A sparse DFA can be built using the default configuration via the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161506,"byte_end":161575,"line_start":33,"line_end":33,"column_start":1,"column_end":70}},{"value":"/ [`SparseDFA::new`](enum.SparseDFA.html#method.new) constructor. Otherwise,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161576,"byte_end":161654,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ one can configure various aspects of a dense DFA via","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161655,"byte_end":161711,"line_start":35,"line_end":35,"column_start":1,"column_end":57}},{"value":"/ [`dense::Builder`](dense/struct.Builder.html), and then convert a dense","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161712,"byte_end":161787,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ DFA to a sparse DFA using","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161788,"byte_end":161817,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"/ [`DenseDFA::to_sparse`](enum.DenseDFA.html#method.to_sparse).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161818,"byte_end":161883,"line_start":38,"line_end":38,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161884,"byte_end":161887,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ In general, a sparse DFA supports all the same operations as a dense DFA.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161888,"byte_end":161965,"line_start":40,"line_end":40,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161966,"byte_end":161969,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Making the choice between a dense and sparse DFA depends on your specific","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":161970,"byte_end":162047,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/ work load. If you can sacrifice a bit of search time performance, then a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162048,"byte_end":162124,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ sparse DFA might be the best choice. In particular, while sparse DFAs are","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162125,"byte_end":162202,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ probably always slower than dense DFAs, you may find that they are easily","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162203,"byte_end":162280,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ fast enough for your purposes!","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162281,"byte_end":162315,"line_start":46,"line_end":46,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162316,"byte_end":162319,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # State size","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162320,"byte_end":162336,"line_start":48,"line_end":48,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162337,"byte_end":162340,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ A `SparseDFA` has two type parameters, `T` and `S`. `T` corresponds to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162341,"byte_end":162415,"line_start":50,"line_end":50,"column_start":1,"column_end":75}},{"value":"/ the type of the DFA's transition table while `S` corresponds to the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162416,"byte_end":162487,"line_start":51,"line_end":51,"column_start":1,"column_end":72}},{"value":"/ representation used for the DFA's state identifiers as described by the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162488,"byte_end":162563,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/ [`StateID`](trait.StateID.html) trait. This type parameter is typically","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162564,"byte_end":162639,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ `usize`, but other valid choices provided by this crate include `u8`,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162640,"byte_end":162713,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/ `u16`, `u32` and `u64`. The primary reason for choosing a different state","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162714,"byte_end":162791,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ identifier representation than the default is to reduce the amount of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162792,"byte_end":162865,"line_start":56,"line_end":56,"column_start":1,"column_end":74}},{"value":"/ memory used by a DFA. Note though, that if the chosen representation cannot","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162866,"byte_end":162945,"line_start":57,"line_end":57,"column_start":1,"column_end":80}},{"value":"/ accommodate the size of your DFA, then building the DFA will fail and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":162946,"byte_end":163019,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ return an error.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163020,"byte_end":163040,"line_start":59,"line_end":59,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163041,"byte_end":163044,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ While the reduction in heap memory used by a DFA is one reason for choosing","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163045,"byte_end":163124,"line_start":61,"line_end":61,"column_start":1,"column_end":80}},{"value":"/ a smaller state identifier representation, another possible reason is for","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163125,"byte_end":163202,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ decreasing the serialization size of a DFA, as returned by","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163203,"byte_end":163265,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/ [`to_bytes_little_endian`](enum.SparseDFA.html#method.to_bytes_little_endian),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163266,"byte_end":163348,"line_start":64,"line_end":64,"column_start":1,"column_end":83}},{"value":"/ [`to_bytes_big_endian`](enum.SparseDFA.html#method.to_bytes_big_endian)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163349,"byte_end":163424,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ or","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163425,"byte_end":163431,"line_start":66,"line_end":66,"column_start":1,"column_end":7}},{"value":"/ [`to_bytes_native_endian`](enum.DenseDFA.html#method.to_bytes_native_endian).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163432,"byte_end":163513,"line_start":67,"line_end":67,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163514,"byte_end":163517,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ The type of the transition table is typically either `Vec<u8>` or `&[u8]`,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163518,"byte_end":163596,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ depending on where the transition table is stored. Note that this is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163597,"byte_end":163669,"line_start":70,"line_end":70,"column_start":1,"column_end":73}},{"value":"/ different than a dense DFA, whose transition table is typically","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163670,"byte_end":163737,"line_start":71,"line_end":71,"column_start":1,"column_end":68}},{"value":"/ `Vec<S>` or `&[S]`. The reason for this is that a sparse DFA always reads","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163738,"byte_end":163815,"line_start":72,"line_end":72,"column_start":1,"column_end":78}},{"value":"/ its transition table from raw bytes because the table is compactly packed.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163816,"byte_end":163894,"line_start":73,"line_end":73,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163895,"byte_end":163898,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ # Variants","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163899,"byte_end":163913,"line_start":75,"line_end":75,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163914,"byte_end":163917,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ This DFA is defined as a non-exhaustive enumeration of different types of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163918,"byte_end":163995,"line_start":77,"line_end":77,"column_start":1,"column_end":78}},{"value":"/ dense DFAs. All of the variants use the same internal representation","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":163996,"byte_end":164068,"line_start":78,"line_end":78,"column_start":1,"column_end":73}},{"value":"/ for the transition table, but they vary in how the transition table is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164069,"byte_end":164143,"line_start":79,"line_end":79,"column_start":1,"column_end":75}},{"value":"/ read. A DFA's specific variant depends on the configuration options set via","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164144,"byte_end":164223,"line_start":80,"line_end":80,"column_start":1,"column_end":80}},{"value":"/ [`dense::Builder`](dense/struct.Builder.html). The default variant is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164224,"byte_end":164297,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"/ `ByteClass`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164298,"byte_end":164314,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164315,"byte_end":164318,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ # The `DFA` trait","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164319,"byte_end":164340,"line_start":84,"line_end":84,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164341,"byte_end":164344,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This type implements the [`DFA`](trait.DFA.html) trait, which means it","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164345,"byte_end":164419,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ can be used for searching. For example:","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164420,"byte_end":164463,"line_start":87,"line_end":87,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164464,"byte_end":164467,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164468,"byte_end":164475,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ use regex_automata::{DFA, SparseDFA};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164476,"byte_end":164517,"line_start":90,"line_end":90,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164518,"byte_end":164521,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164522,"byte_end":164579,"line_start":92,"line_end":92,"column_start":1,"column_end":58}},{"value":"/ let dfa = SparseDFA::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164580,"byte_end":164623,"line_start":93,"line_end":93,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Some(8), dfa.find(b\"foo12345\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164624,"byte_end":164671,"line_start":94,"line_end":94,"column_start":1,"column_end":48}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164672,"byte_end":164706,"line_start":95,"line_end":95,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164707,"byte_end":164714,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164715,"byte_end":164718,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ The `DFA` trait also provides an assortment of other lower level methods","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164719,"byte_end":164795,"line_start":98,"line_end":98,"column_start":1,"column_end":77}},{"value":"/ for DFAs, such as `start_state` and `next_state`. While these are correctly","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164796,"byte_end":164875,"line_start":99,"line_end":99,"column_start":1,"column_end":80}},{"value":"/ implemented, it is an anti-pattern to use them in performance sensitive","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164876,"byte_end":164951,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/ code on the `SparseDFA` type directly. Namely, each implementation requires","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":164952,"byte_end":165031,"line_start":101,"line_end":101,"column_start":1,"column_end":80}},{"value":"/ a branch to determine which type of sparse DFA is being used. Instead,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165032,"byte_end":165106,"line_start":102,"line_end":102,"column_start":1,"column_end":75}},{"value":"/ this branch should be pushed up a layer in the code since walking the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165107,"byte_end":165180,"line_start":103,"line_end":103,"column_start":1,"column_end":74}},{"value":"/ transitions of a DFA is usually a hot path. If you do need to use these","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165181,"byte_end":165256,"line_start":104,"line_end":104,"column_start":1,"column_end":76}},{"value":"/ lower level methods in performance critical code, then you should match on","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165257,"byte_end":165335,"line_start":105,"line_end":105,"column_start":1,"column_end":79}},{"value":"/ the variants of this DFA and use each variant's implementation of the `DFA`","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165336,"byte_end":165415,"line_start":106,"line_end":106,"column_start":1,"column_end":80}},{"value":"/ trait directly.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":165416,"byte_end":165435,"line_start":107,"line_end":107,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":169031,"byte_end":169037,"line_start":198,"line_end":198,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<SparseDFA<T, S>>::as_ref","value":"fn <'a> (&'a self) -> SparseDFA<&'a [u8], S>","parent":null,"children":[],"decl_id":null,"docs":" Cheaply return a borrowed version of this sparse DFA. Specifically, the\n DFA returned always uses `&[u8]` for its transition table while keeping\n the same state identifier representation.\n","sig":null,"attributes":[{"value":"/ Cheaply return a borrowed version of this sparse DFA. Specifically, the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":168814,"byte_end":168889,"line_start":195,"line_end":195,"column_start":5,"column_end":80}},{"value":"/ DFA returned always uses `&[u8]` for its transition table while keeping","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":168894,"byte_end":168969,"line_start":196,"line_end":196,"column_start":5,"column_end":80}},{"value":"/ the same state identifier representation.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":168974,"byte_end":169019,"line_start":197,"line_end":197,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":170577,"byte_end":170589,"line_start":237,"line_end":237,"column_start":12,"column_end":24},"name":"memory_usage","qualname":"<SparseDFA<T, S>>::memory_usage","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory usage, in bytes, of this DFA.","sig":null,"attributes":[{"value":"/ Returns the memory usage, in bytes, of this DFA.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":170183,"byte_end":170235,"line_start":229,"line_end":229,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":170240,"byte_end":170243,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The memory usage is computed based on the number of bytes used to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":170248,"byte_end":170317,"line_start":231,"line_end":231,"column_start":5,"column_end":74}},{"value":"/ represent this DFA's transition table. This typically corresponds to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":170322,"byte_end":170394,"line_start":232,"line_end":232,"column_start":5,"column_end":77}},{"value":"/ heap memory usage.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":170399,"byte_end":170421,"line_start":233,"line_end":233,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":170426,"byte_end":170429,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ This does **not** include the stack size used up by this DFA. To","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":170434,"byte_end":170502,"line_start":235,"line_end":235,"column_start":5,"column_end":73}},{"value":"/ compute that, used `std::mem::size_of::<SparseDFA>()`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":170507,"byte_end":170565,"line_start":236,"line_end":236,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178431,"byte_end":178441,"line_start":410,"line_end":410,"column_start":19,"column_end":29},"name":"from_bytes","qualname":"<SparseDFA<&'a [u8], S>>::from_bytes","value":"fn (buf: &'a [u8]) -> SparseDFA<&'a [u8], S>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a sparse DFA with a specific state identifier\n representation.","sig":null,"attributes":[{"value":"/ Deserialize a sparse DFA with a specific state identifier","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175316,"byte_end":175377,"line_start":346,"line_end":346,"column_start":5,"column_end":66}},{"value":"/ representation.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175382,"byte_end":175401,"line_start":347,"line_end":347,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175406,"byte_end":175409,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ Deserializing a DFA using this routine will never allocate heap memory.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175414,"byte_end":175489,"line_start":349,"line_end":349,"column_start":5,"column_end":80}},{"value":"/ This is also guaranteed to be a constant time operation that does not","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175494,"byte_end":175567,"line_start":350,"line_end":350,"column_start":5,"column_end":78}},{"value":"/ vary with the size of the DFA.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175572,"byte_end":175606,"line_start":351,"line_end":351,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175611,"byte_end":175614,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ The bytes given should be generated by the serialization of a DFA with","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175619,"byte_end":175693,"line_start":353,"line_end":353,"column_start":5,"column_end":79}},{"value":"/ either the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175698,"byte_end":175712,"line_start":354,"line_end":354,"column_start":5,"column_end":19}},{"value":"/ [`to_bytes_little_endian`](enum.DenseDFA.html#method.to_bytes_little_endian)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175717,"byte_end":175797,"line_start":355,"line_end":355,"column_start":5,"column_end":85}},{"value":"/ method or the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175802,"byte_end":175819,"line_start":356,"line_end":356,"column_start":5,"column_end":22}},{"value":"/ [`to_bytes_big_endian`](enum.DenseDFA.html#method.to_bytes_big_endian)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175824,"byte_end":175898,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ endian, depending on the endianness of the machine you are","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175903,"byte_end":175965,"line_start":358,"line_end":358,"column_start":5,"column_end":67}},{"value":"/ deserializing this DFA from.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175970,"byte_end":176002,"line_start":359,"line_end":359,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176007,"byte_end":176010,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ If the state identifier representation is `usize`, then deserialization","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176015,"byte_end":176090,"line_start":361,"line_end":361,"column_start":5,"column_end":80}},{"value":"/ is dependent on the pointer size. For this reason, it is best to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176095,"byte_end":176163,"line_start":362,"line_end":362,"column_start":5,"column_end":73}},{"value":"/ serialize DFAs using a fixed size representation for your state","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176168,"byte_end":176235,"line_start":363,"line_end":363,"column_start":5,"column_end":72}},{"value":"/ identifiers, such as `u8`, `u16`, `u32` or `u64`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176240,"byte_end":176293,"line_start":364,"line_end":364,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176298,"byte_end":176301,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176306,"byte_end":176318,"line_start":366,"line_end":366,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176323,"byte_end":176326,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ The bytes given should be *trusted*. In particular, if the bytes","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176331,"byte_end":176399,"line_start":368,"line_end":368,"column_start":5,"column_end":73}},{"value":"/ are not a valid serialization of a DFA, or if the endianness of the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176404,"byte_end":176475,"line_start":369,"line_end":369,"column_start":5,"column_end":76}},{"value":"/ serialized bytes is different than the endianness of the machine that","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176480,"byte_end":176553,"line_start":370,"line_end":370,"column_start":5,"column_end":78}},{"value":"/ is deserializing the DFA, then this routine will panic. Moreover, it","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176558,"byte_end":176630,"line_start":371,"line_end":371,"column_start":5,"column_end":77}},{"value":"/ is possible for this deserialization routine to succeed even if the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176635,"byte_end":176706,"line_start":372,"line_end":372,"column_start":5,"column_end":76}},{"value":"/ given bytes do not represent a valid serialized sparse DFA.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176711,"byte_end":176774,"line_start":373,"line_end":373,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176779,"byte_end":176782,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176787,"byte_end":176799,"line_start":375,"line_end":375,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176804,"byte_end":176807,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ This routine is unsafe because it permits callers to provide an","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176812,"byte_end":176879,"line_start":377,"line_end":377,"column_start":5,"column_end":72}},{"value":"/ arbitrary transition table with possibly incorrect transitions. While","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176884,"byte_end":176957,"line_start":378,"line_end":378,"column_start":5,"column_end":78}},{"value":"/ the various serialization routines will never return an incorrect","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":176962,"byte_end":177031,"line_start":379,"line_end":379,"column_start":5,"column_end":74}},{"value":"/ transition table, there is no guarantee that the bytes provided here","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177036,"byte_end":177108,"line_start":380,"line_end":380,"column_start":5,"column_end":77}},{"value":"/ are correct. While deserialization does many checks (as documented","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177113,"byte_end":177183,"line_start":381,"line_end":381,"column_start":5,"column_end":75}},{"value":"/ above in the panic conditions), this routine does not check that the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177188,"byte_end":177260,"line_start":382,"line_end":382,"column_start":5,"column_end":77}},{"value":"/ transition table is correct. Given an incorrect transition table, it is","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177265,"byte_end":177340,"line_start":383,"line_end":383,"column_start":5,"column_end":80}},{"value":"/ possible for the search routines to access out-of-bounds memory because","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177345,"byte_end":177420,"line_start":384,"line_end":384,"column_start":5,"column_end":80}},{"value":"/ of explicit bounds check elision.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177425,"byte_end":177462,"line_start":385,"line_end":385,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177467,"byte_end":177470,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177475,"byte_end":177488,"line_start":387,"line_end":387,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177493,"byte_end":177496,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ This example shows how to serialize a DFA to raw bytes, deserialize it","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177501,"byte_end":177575,"line_start":389,"line_end":389,"column_start":5,"column_end":79}},{"value":"/ and then use it for searching. Note that we first convert the DFA to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177580,"byte_end":177652,"line_start":390,"line_end":390,"column_start":5,"column_end":77}},{"value":"/ using `u16` for its state identifier representation before serializing","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177657,"byte_end":177731,"line_start":391,"line_end":391,"column_start":5,"column_end":79}},{"value":"/ it. While this isn't strictly necessary, it's good practice in order to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177736,"byte_end":177811,"line_start":392,"line_end":392,"column_start":5,"column_end":80}},{"value":"/ decrease the size of the DFA and to avoid platform specific pitfalls","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177816,"byte_end":177888,"line_start":393,"line_end":393,"column_start":5,"column_end":77}},{"value":"/ such as differing pointer sizes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177893,"byte_end":177929,"line_start":394,"line_end":394,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177934,"byte_end":177937,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177942,"byte_end":177949,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"/ use regex_automata::{DFA, DenseDFA, SparseDFA};","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":177954,"byte_end":178005,"line_start":397,"line_end":397,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178010,"byte_end":178013,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), regex_automata::Error> {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178018,"byte_end":178075,"line_start":399,"line_end":399,"column_start":5,"column_end":62}},{"value":"/ let sparse = SparseDFA::new(\"foo[0-9]+\")?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178080,"byte_end":178126,"line_start":400,"line_end":400,"column_start":5,"column_end":51}},{"value":"/ let bytes = sparse.to_u16()?.to_bytes_native_endian()?;","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178131,"byte_end":178190,"line_start":401,"line_end":401,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178195,"byte_end":178198,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ let dfa: SparseDFA<&[u8], u16> = unsafe {","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178203,"byte_end":178248,"line_start":403,"line_end":403,"column_start":5,"column_end":50}},{"value":"/     SparseDFA::from_bytes(&bytes)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178253,"byte_end":178290,"line_start":404,"line_end":404,"column_start":5,"column_end":42}},{"value":"/ };","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178295,"byte_end":178301,"line_start":405,"line_end":405,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178306,"byte_end":178309,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(8), dfa.find(b\"foo12345\"));","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178314,"byte_end":178361,"line_start":407,"line_end":407,"column_start":5,"column_end":52}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178366,"byte_end":178400,"line_start":408,"line_end":408,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178405,"byte_end":178412,"line_start":409,"line_end":409,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181828,"byte_end":181836,"line_start":510,"line_end":510,"column_start":12,"column_end":20},"name":"Standard","qualname":"::sparse_imp::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A standard sparse DFA that does not use premultiplication or byte classes.","sig":null,"attributes":[{"value":"/ A standard sparse DFA that does not use premultiplication or byte classes.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181270,"byte_end":181348,"line_start":501,"line_end":501,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181349,"byte_end":181352,"line_start":502,"line_end":502,"column_start":1,"column_end":4}},{"value":"/ Generally, it isn't necessary to use this type directly, since a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181353,"byte_end":181421,"line_start":503,"line_end":503,"column_start":1,"column_end":69}},{"value":"/ `SparseDFA` can be used for searching directly. One possible reason why","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181422,"byte_end":181497,"line_start":504,"line_end":504,"column_start":1,"column_end":76}},{"value":"/ one might want to use this type directly is if you are implementing your","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181498,"byte_end":181574,"line_start":505,"line_end":505,"column_start":1,"column_end":77}},{"value":"/ own search routines by walking a DFA's transitions directly. In that case,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181575,"byte_end":181653,"line_start":506,"line_end":506,"column_start":1,"column_end":79}},{"value":"/ you'll want to use this type (or any of the other DFA variant types)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181654,"byte_end":181726,"line_start":507,"line_end":507,"column_start":1,"column_end":73}},{"value":"/ directly, since they implement `next_state` more efficiently.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181727,"byte_end":181792,"line_start":508,"line_end":508,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183890,"byte_end":183899,"line_start":571,"line_end":571,"column_start":12,"column_end":21},"name":"ByteClass","qualname":"::sparse_imp::ByteClass","value":"","parent":null,"children":[],"decl_id":null,"docs":" A sparse DFA that shrinks its alphabet.","sig":null,"attributes":[{"value":"/ A sparse DFA that shrinks its alphabet.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":182702,"byte_end":182745,"line_start":551,"line_end":551,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":182746,"byte_end":182749,"line_start":552,"line_end":552,"column_start":1,"column_end":4}},{"value":"/ Alphabet shrinking is achieved by using a set of equivalence classes","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":182750,"byte_end":182822,"line_start":553,"line_end":553,"column_start":1,"column_end":73}},{"value":"/ instead of using all possible byte values. Any two bytes belong to the same","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":182823,"byte_end":182902,"line_start":554,"line_end":554,"column_start":1,"column_end":80}},{"value":"/ equivalence class if and only if they can be used interchangeably anywhere","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":182903,"byte_end":182981,"line_start":555,"line_end":555,"column_start":1,"column_end":79}},{"value":"/ in the DFA while never discriminating between a match and a non-match.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":182982,"byte_end":183056,"line_start":556,"line_end":556,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183057,"byte_end":183060,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ Unlike dense DFAs, sparse DFAs do not tend to benefit nearly as much from","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183061,"byte_end":183138,"line_start":558,"line_end":558,"column_start":1,"column_end":78}},{"value":"/ using byte classes. In some cases, using byte classes can even marginally","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183139,"byte_end":183216,"line_start":559,"line_end":559,"column_start":1,"column_end":78}},{"value":"/ increase the size of a sparse DFA's transition table. The reason for this","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183217,"byte_end":183294,"line_start":560,"line_end":560,"column_start":1,"column_end":78}},{"value":"/ is that a sparse DFA already compacts each state's transitions separate","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183295,"byte_end":183370,"line_start":561,"line_end":561,"column_start":1,"column_end":76}},{"value":"/ from whether byte classes are used.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183371,"byte_end":183410,"line_start":562,"line_end":562,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183411,"byte_end":183414,"line_start":563,"line_end":563,"column_start":1,"column_end":4}},{"value":"/ Generally, it isn't necessary to use this type directly, since a","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183415,"byte_end":183483,"line_start":564,"line_end":564,"column_start":1,"column_end":69}},{"value":"/ `SparseDFA` can be used for searching directly. One possible reason why","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183484,"byte_end":183559,"line_start":565,"line_end":565,"column_start":1,"column_end":76}},{"value":"/ one might want to use this type directly is if you are implementing your","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183560,"byte_end":183636,"line_start":566,"line_end":566,"column_start":1,"column_end":77}},{"value":"/ own search routines by walking a DFA's transitions directly. In that case,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183637,"byte_end":183715,"line_start":567,"line_end":567,"column_start":1,"column_end":79}},{"value":"/ you'll want to use this type (or any of the other DFA variant types)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183716,"byte_end":183788,"line_start":568,"line_end":568,"column_start":1,"column_end":73}},{"value":"/ directly, since they implement `next_state` more efficiently.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183789,"byte_end":183854,"line_start":569,"line_end":569,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212365,"byte_end":212372,"line_start":115,"line_end":115,"column_start":18,"column_end":25},"name":"StateID","qualname":"::state_id::StateID","value":"StateID: Clone + Copy + Debug + Eq + Hash + PartialEq + PartialOrd + Ord","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294}],"decl_id":null,"docs":" A trait describing the representation of a DFA's state identifier.","sig":null,"attributes":[{"value":"/ A trait describing the representation of a DFA's state identifier.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211096,"byte_end":211166,"line_start":93,"line_end":93,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211167,"byte_end":211170,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ The purpose of this trait is to safely express both the possible state","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211171,"byte_end":211245,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"/ identifier representations that can be used in a DFA and to convert between","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211246,"byte_end":211325,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/ state identifier representations and types that can be used to efficiently","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211326,"byte_end":211404,"line_start":97,"line_end":97,"column_start":1,"column_end":79}},{"value":"/ index memory (such as `usize`).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211405,"byte_end":211440,"line_start":98,"line_end":98,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211441,"byte_end":211444,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ In general, one should not need to implement this trait explicitly. In","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211445,"byte_end":211519,"line_start":100,"line_end":100,"column_start":1,"column_end":75}},{"value":"/ particular, this crate provides implementations for `u8`, `u16`, `u32`,","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211520,"byte_end":211595,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/ `u64` and `usize`. (`u32` and `u64` are only provided for targets that can","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211596,"byte_end":211674,"line_start":102,"line_end":102,"column_start":1,"column_end":79}},{"value":"/ represent all corresponding values in a `usize`.)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211675,"byte_end":211728,"line_start":103,"line_end":103,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211729,"byte_end":211732,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211733,"byte_end":211745,"line_start":105,"line_end":105,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211746,"byte_end":211749,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ This trait is unsafe because the correctness of its implementations may be","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211750,"byte_end":211828,"line_start":107,"line_end":107,"column_start":1,"column_end":79}},{"value":"/ relied upon by other unsafe code. For example, one possible way to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211829,"byte_end":211899,"line_start":108,"line_end":108,"column_start":1,"column_end":71}},{"value":"/ implement this trait incorrectly would be to return a maximum identifier","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211900,"byte_end":211976,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/ in `max_id` that is greater than the real maximum identifier. This will","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":211977,"byte_end":212052,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/ likely result in wrap-on-overflow semantics in release mode, which can in","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212053,"byte_end":212130,"line_start":111,"line_end":111,"column_start":1,"column_end":78}},{"value":"/ turn produce incorrect state identifiers. Those state identifiers may then","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212131,"byte_end":212209,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/ in turn access out-of-bounds memory in a DFA's search routine, where bounds","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212210,"byte_end":212289,"line_start":113,"line_end":113,"column_start":1,"column_end":80}},{"value":"/ checks are explicitly elided for performance reasons.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212290,"byte_end":212347,"line_start":114,"line_end":114,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212713,"byte_end":212723,"line_start":123,"line_end":123,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::state_id::StateID::from_usize","value":"fn (n: usize) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert from a `usize` to this implementation's representation.","sig":null,"attributes":[{"value":"/ Convert from a `usize` to this implementation's representation.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212448,"byte_end":212515,"line_start":118,"line_end":118,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212520,"byte_end":212523,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Implementors may assume that `n <= Self::max_id`. That is, implementors","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212528,"byte_end":212603,"line_start":120,"line_end":120,"column_start":5,"column_end":80}},{"value":"/ do not need to check whether `n` can fit inside this implementation's","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212608,"byte_end":212681,"line_start":121,"line_end":121,"column_start":5,"column_end":78}},{"value":"/ representation.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212686,"byte_end":212705,"line_start":122,"line_end":122,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213215,"byte_end":213223,"line_start":133,"line_end":133,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::state_id::StateID::to_usize","value":"fn (self) -> usize","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert this implementation's representation to a `usize`.","sig":null,"attributes":[{"value":"/ Convert this implementation's representation to a `usize`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212748,"byte_end":212810,"line_start":125,"line_end":125,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212815,"byte_end":212818,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ Implementors must not return a `usize` value greater than","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212823,"byte_end":212884,"line_start":127,"line_end":127,"column_start":5,"column_end":66}},{"value":"/ `Self::max_id` and must not permit overflow when converting between the","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212889,"byte_end":212964,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/ implementor's representation and `usize`. In general, the preferred","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212969,"byte_end":213040,"line_start":129,"line_end":129,"column_start":5,"column_end":76}},{"value":"/ way for implementors to achieve this is to simply not provide","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213045,"byte_end":213110,"line_start":130,"line_end":130,"column_start":5,"column_end":70}},{"value":"/ implementations of `StateID` that cannot fit into the target platform's","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213115,"byte_end":213190,"line_start":131,"line_end":131,"column_start":5,"column_end":80}},{"value":"/ `usize`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213195,"byte_end":213207,"line_start":132,"line_end":132,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213439,"byte_end":213445,"line_start":139,"line_end":139,"column_start":8,"column_end":14},"name":"max_id","qualname":"::state_id::StateID::max_id","value":"fn () -> usize","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Return the maximum state identifier supported by this representation.","sig":null,"attributes":[{"value":"/ Return the maximum state identifier supported by this representation.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213245,"byte_end":213318,"line_start":135,"line_end":135,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213323,"byte_end":213326,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Implementors must return a correct bound. Doing otherwise may result","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213331,"byte_end":213403,"line_start":137,"line_end":137,"column_start":5,"column_end":77}},{"value":"/ in memory unsafety.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213408,"byte_end":213431,"line_start":138,"line_end":138,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213678,"byte_end":213688,"line_start":146,"line_end":146,"column_start":8,"column_end":18},"name":"read_bytes","qualname":"::state_id::StateID::read_bytes","value":"fn (slice: &[u8]) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Read a single state identifier from the given slice of bytes in native\n endian format.","sig":null,"attributes":[{"value":"/ Read a single state identifier from the given slice of bytes in native","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213463,"byte_end":213537,"line_start":141,"line_end":141,"column_start":5,"column_end":79}},{"value":"/ endian format.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213542,"byte_end":213560,"line_start":142,"line_end":142,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213565,"byte_end":213568,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Implementors may assume that the given slice has length at least","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213573,"byte_end":213641,"line_start":144,"line_end":144,"column_start":5,"column_end":73}},{"value":"/ `size_of::<Self>()`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213646,"byte_end":213670,"line_start":145,"line_end":145,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213927,"byte_end":213938,"line_start":153,"line_end":153,"column_start":8,"column_end":19},"name":"write_bytes","qualname":"::state_id::StateID::write_bytes","value":"fn (self, slice: &mut [u8]) -> ()","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Write this state identifier to the given slice of bytes in native\n endian format.","sig":null,"attributes":[{"value":"/ Write this state identifier to the given slice of bytes in native","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213717,"byte_end":213786,"line_start":148,"line_end":148,"column_start":5,"column_end":74}},{"value":"/ endian format.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213791,"byte_end":213809,"line_start":149,"line_end":149,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213814,"byte_end":213817,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Implementors may assume that the given slice has length at least","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213822,"byte_end":213890,"line_start":151,"line_end":151,"column_start":5,"column_end":73}},{"value":"/ `size_of::<Self>()`.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":213895,"byte_end":213919,"line_start":152,"line_end":152,"column_start":5,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14907,"byte_end":14912,"line_start":339,"line_end":339,"column_start":9,"column_end":14},"name":"dense","qualname":"::dense","value":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":326}],"decl_id":null,"docs":" Types and routines specific to dense DFAs.","sig":null,"attributes":[{"value":"/ Types and routines specific to dense DFAs.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14522,"byte_end":14568,"line_start":331,"line_end":331,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14569,"byte_end":14572,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ This module is the home of [`DenseDFA`](enum.DenseDFA.html) and each of its","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14573,"byte_end":14652,"line_start":333,"line_end":333,"column_start":1,"column_end":80}},{"value":"/ corresponding variant DFA types, such as [`Standard`](struct.Standard.html)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14653,"byte_end":14732,"line_start":334,"line_end":334,"column_start":1,"column_end":80}},{"value":"/ and [`ByteClass`](struct.ByteClass.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14733,"byte_end":14778,"line_start":335,"line_end":335,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14779,"byte_end":14782,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ This module also contains a [builder](struct.Builder.html) for","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14783,"byte_end":14849,"line_start":337,"line_end":337,"column_start":1,"column_end":67}},{"value":"/ configuring the construction of a dense DFA.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14850,"byte_end":14898,"line_start":338,"line_end":338,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15684,"byte_end":15690,"line_start":358,"line_end":358,"column_start":9,"column_end":15},"name":"sparse","qualname":"::sparse","value":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":328}],"decl_id":null,"docs":" Types and routines specific to sparse DFAs.","sig":null,"attributes":[{"value":"/ Types and routines specific to sparse DFAs.","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14944,"byte_end":14991,"line_start":343,"line_end":343,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14992,"byte_end":14995,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This module is the home of [`SparseDFA`](enum.SparseDFA.html) and each of","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":14996,"byte_end":15073,"line_start":345,"line_end":345,"column_start":1,"column_end":78}},{"value":"/ its corresponding variant DFA types, such as","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15074,"byte_end":15122,"line_start":346,"line_end":346,"column_start":1,"column_end":49}},{"value":"/ [`Standard`](struct.Standard.html) and","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15123,"byte_end":15165,"line_start":347,"line_end":347,"column_start":1,"column_end":43}},{"value":"/ [`ByteClass`](struct.ByteClass.html).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15166,"byte_end":15207,"line_start":348,"line_end":348,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15208,"byte_end":15211,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ Unlike the [`dense`](../dense/index.html) module, this module does not","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15212,"byte_end":15286,"line_start":350,"line_end":350,"column_start":1,"column_end":75}},{"value":"/ contain a builder specific for sparse DFAs. Instead, the intended way to","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15287,"byte_end":15363,"line_start":351,"line_end":351,"column_start":1,"column_end":77}},{"value":"/ build a sparse DFA is either by using a default configuration with its","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15364,"byte_end":15438,"line_start":352,"line_end":352,"column_start":1,"column_end":75}},{"value":"/ [constructor](enum.SparseDFA.html#method.new),","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15439,"byte_end":15489,"line_start":353,"line_end":353,"column_start":1,"column_end":51}},{"value":"/ or by first","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15490,"byte_end":15505,"line_start":354,"line_end":354,"column_start":1,"column_end":16}},{"value":"/ [configuring the construction of a dense DFA](../dense/struct.Builder.html)","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15506,"byte_end":15585,"line_start":355,"line_end":355,"column_start":1,"column_end":80}},{"value":"/ and then calling","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15586,"byte_end":15606,"line_start":356,"line_end":356,"column_start":1,"column_end":21}},{"value":"/ [`DenseDFA::to_sparse`](../enum.DenseDFA.html#method.to_sparse).","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\lib.rs","byte_start":15607,"byte_end":15675,"line_start":357,"line_end":357,"column_start":1,"column_end":69}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\classes.rs","byte_start":16056,"byte_end":16067,"line_start":11,"line_end":11,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\classes.rs","byte_start":19491,"byte_end":19502,"line_start":110,"line_end":110,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32996,"byte_end":33004,"line_start":174,"line_end":174,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":35213,"byte_end":35221,"line_start":240,"line_end":240,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44283,"byte_end":44291,"line_start":454,"line_end":454,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":48392,"byte_end":48400,"line_start":546,"line_end":546,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":53017,"byte_end":53025,"line_start":675,"line_end":675,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54956,"byte_end":54965,"line_start":735,"line_end":735,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56907,"byte_end":56920,"line_start":796,"line_end":796,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":58474,"byte_end":58496,"line_start":849,"line_end":849,"column_start":41,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":64464,"byte_end":64468,"line_start":1011,"line_end":1011,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":74662,"byte_end":74666,"line_start":1297,"line_end":1297,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135560,"byte_end":135565,"line_start":172,"line_end":172,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":145077,"byte_end":145084,"line_start":422,"line_end":422,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":145270,"byte_end":145277,"line_start":428,"line_end":428,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":168792,"byte_end":168801,"line_start":194,"line_end":194,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175287,"byte_end":175296,"line_start":345,"line_end":345,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178583,"byte_end":178592,"line_start":415,"line_end":415,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181928,"byte_end":181936,"line_start":512,"line_end":512,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183991,"byte_end":184000,"line_start":573,"line_end":573,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":185211,"byte_end":185215,"line_start":626,"line_end":626,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":193045,"byte_end":193049,"line_start":856,"line_end":856,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":201792,"byte_end":201797,"line_start":1096,"line_end":1096,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\classes.rs","byte_start":16056,"byte_end":16067,"line_start":11,"line_end":11,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\classes.rs","byte_start":19491,"byte_end":19502,"line_start":110,"line_end":110,"column_start":21,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":329},"to":{"krate":1,"index":6076}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":32996,"byte_end":33004,"line_start":174,"line_end":174,"column_start":33,"column_end":41},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":35213,"byte_end":35221,"line_start":240,"line_end":240,"column_start":33,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":44283,"byte_end":44291,"line_start":454,"line_end":454,"column_start":22,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":48392,"byte_end":48400,"line_start":546,"line_end":546,"column_start":41,"column_end":49},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":337},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":53017,"byte_end":53025,"line_start":675,"line_end":675,"column_start":41,"column_end":49},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":362},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":54956,"byte_end":54965,"line_start":735,"line_end":735,"column_start":41,"column_end":50},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":375},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":56907,"byte_end":56920,"line_start":796,"line_end":796,"column_start":41,"column_end":54},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":388},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":58474,"byte_end":58496,"line_start":849,"line_end":849,"column_start":41,"column_end":63},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":401},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":64464,"byte_end":64468,"line_start":1011,"line_end":1011,"column_start":33,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\dense.rs","byte_start":74662,"byte_end":74666,"line_start":1297,"line_end":1297,"column_start":22,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":135560,"byte_end":135565,"line_start":172,"line_end":172,"column_start":14,"column_end":19},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":145077,"byte_end":145084,"line_start":422,"line_end":422,"column_start":22,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\regex.rs","byte_start":145270,"byte_end":145277,"line_start":428,"line_end":428,"column_start":35,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":442},"to":{"krate":1,"index":4859}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":168792,"byte_end":168801,"line_start":194,"line_end":194,"column_start":34,"column_end":43},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":175287,"byte_end":175296,"line_start":345,"line_end":345,"column_start":22,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":178583,"byte_end":178592,"line_start":415,"line_end":415,"column_start":42,"column_end":51},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":460},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":181928,"byte_end":181936,"line_start":512,"line_end":512,"column_start":42,"column_end":50},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":479},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":183991,"byte_end":184000,"line_start":573,"line_end":573,"column_start":42,"column_end":51},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":492},"to":{"krate":0,"index":137}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":185211,"byte_end":185215,"line_start":626,"line_end":626,"column_start":34,"column_end":38},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":193045,"byte_end":193049,"line_start":856,"line_end":856,"column_start":22,"column_end":26},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\sparse.rs","byte_start":201792,"byte_end":201797,"line_start":1096,"line_end":1096,"column_start":22,"column_end":27},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212378,"byte_end":212383,"line_start":116,"line_end":116,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1606},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212386,"byte_end":212390,"line_start":116,"line_end":116,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":1914},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212393,"byte_end":212398,"line_start":116,"line_end":116,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":6076},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212401,"byte_end":212403,"line_start":116,"line_end":116,"column_start":28,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":1639},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212406,"byte_end":212410,"line_start":116,"line_end":116,"column_start":33,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":6264},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212413,"byte_end":212422,"line_start":116,"line_end":116,"column_start":40,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":1634},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212425,"byte_end":212435,"line_start":116,"line_end":116,"column_start":52,"column_end":62},"kind":"SuperTrait","from":{"krate":1,"index":1671},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\rajesh\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.9\\src\\state_id.rs","byte_start":212438,"byte_end":212441,"line_start":116,"line_end":116,"column_start":65,"column_end":68},"kind":"SuperTrait","from":{"krate":1,"index":1660},"to":{"krate":0,"index":289}}]}